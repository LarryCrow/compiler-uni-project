Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ERROR
    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> scope
Rule 3     body_block -> LBRACE scope RBRACE
Rule 4     func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block
Rule 5     scope -> scope statement
Rule 6     scope -> statement
Rule 7     statement -> expr SEMI
Rule 8     statement -> var_declaration
Rule 9     statement -> return
Rule 10    statement -> assign
Rule 11    statement -> func_declaration
Rule 12    statement -> struct_declaration
Rule 13    statement -> while
Rule 14    statement -> BREAK SEMI
Rule 15    statement -> CONTINUE SEMI
Rule 16    statement -> GOTO ID SEMI
Rule 17    statement -> goto_mark
Rule 18    statement -> if-else
Rule 19    while -> WHILE conditional body_block
Rule 20    while -> DO body_block WHILE conditional SEMI
Rule 21    if-else -> IF conditional body_block
Rule 22    if-else -> IF conditional body_block ELSE body_block
Rule 23    conditional -> LPAREN expr RPAREN
Rule 24    conditional -> error expr RPAREN
Rule 25    conditional -> LPAREN error RPAREN
Rule 26    conditional -> LPAREN expr error
Rule 27    struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE
Rule 28    struct_params -> struct_param
Rule 29    struct_params -> struct_params COMMA struct_param
Rule 30    struct_param -> DATATYPE ID
Rule 31    struct_param -> func_declaration
Rule 32    params -> <empty>
Rule 33    params -> param
Rule 34    params -> params COMMA param
Rule 35    param -> DATATYPE ID
Rule 36    expr -> id LPAREN args RPAREN
Rule 37    args -> <empty>
Rule 38    args -> expr
Rule 39    args -> args COMMA expr
Rule 40    var_declaration -> datatype id EQUALS expr SEMI
Rule 41    var_declaration -> datatype id SEMI
Rule 42    var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI
Rule 43    assign -> ID EQUALS expr SEMI
Rule 44    assign -> ID EQUALS LBRACE args RBRACE SEMI
Rule 45    assign -> ID DOT ID EQUALS expr SEMI
Rule 46    return -> RETURN expr SEMI
Rule 47    return -> RETURN SEMI
Rule 48    expr -> expr PLUS expr
Rule 49    expr -> expr MINUS expr
Rule 50    expr -> expr MUL expr
Rule 51    expr -> expr DIVIDE expr
Rule 52    expr -> expr INTDIVIDE expr
Rule 53    expr -> expr MODULO expr
Rule 54    expr -> expr POW expr
Rule 55    expr -> expr LE expr
Rule 56    expr -> expr GE expr
Rule 57    expr -> expr LT expr
Rule 58    expr -> expr GT expr
Rule 59    expr -> expr EQ expr
Rule 60    expr -> expr NE expr
Rule 61    expr -> MINUS expr
Rule 62    expr -> expr LAND expr
Rule 63    expr -> expr LOR expr
Rule 64    expr -> LNOT expr
Rule 65    expr -> expr BAND expr
Rule 66    expr -> expr BOR expr
Rule 67    expr -> id
Rule 68    expr -> int
Rule 69    expr -> double
Rule 70    expr -> bool
Rule 71    expr -> str
Rule 72    expr -> void
Rule 73    expr -> NULL
Rule 74    expr -> LPAREN expr RPAREN
Rule 75    int -> INTEGER
Rule 76    double -> DOUBLE
Rule 77    bool -> BOOL
Rule 78    str -> STRING
Rule 79    void -> VOID
Rule 80    expr -> datatype LBRACKET RBRACKET id
Rule 81    expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
Rule 82    expr -> ID LBRACKET expr RBRACKET
Rule 83    goto_mark -> ID COLON
Rule 84    datatype -> DATATYPE
Rule 85    id -> ID

Terminals, with rules where they appear

BAND                 : 65
BOOL                 : 77
BOR                  : 66
BREAK                : 14
COLON                : 83
COMMA                : 29 34 39
COMMENT              : 
CONTINUE             : 15
DATATYPE             : 30 35 84
DIVIDE               : 51
DO                   : 20
DOT                  : 45
DOUBLE               : 76
ELSE                 : 22
EQ                   : 59
EQUALS               : 40 42 43 44 45 81
ERROR                : 
FUNCTION             : 4
GE                   : 56
GOTO                 : 16
GT                   : 58
ID                   : 16 30 35 42 43 44 45 45 82 83 85
IF                   : 21 22
INTDIVIDE            : 52
INTEGER              : 75 81
LAND                 : 62
LBRACE               : 3 27 42 44
LBRACKET             : 80 81 81 82
LE                   : 55
LNOT                 : 64
LOR                  : 63
LPAREN               : 4 23 25 26 36 74
LT                   : 57
MINUS                : 49 61
MODULO               : 53
MUL                  : 50
NE                   : 60
NEWLINE              : 
NULL                 : 73
PLUS                 : 48
POW                  : 54
RBRACE               : 3 27 42 44
RBRACKET             : 80 81 81 82
RETURN               : 46 47
RPAREN               : 4 23 24 25 36 74
SEMI                 : 7 14 15 16 20 40 41 42 43 44 45 46 47
STRING               : 78
STRUCTURE            : 27
VOID                 : 79
WHILE                : 19 20
error                : 24 25 26

Nonterminals, with rules where they appear

args                 : 36 39 42 44
assign               : 10
body_block           : 4 19 20 21 22 22
bool                 : 70
conditional          : 19 20 21 22
datatype             : 4 40 41 80 81 81
double               : 69
expr                 : 7 23 24 26 38 39 40 43 45 46 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 62 62 63 63 64 65 65 66 66 74 82
func_declaration     : 11 31
goto_mark            : 17
id                   : 4 27 36 40 41 42 67 80 81
if-else              : 18
int                  : 68
param                : 33 34
params               : 4 34
program              : 0
return               : 9
scope                : 2 3 5
statement            : 5 6
str                  : 71
struct_declaration   : 12
struct_param         : 28 29
struct_params        : 27 29
var_declaration      : 8
void                 : 72
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . scope
    (5) scope -> . scope statement
    (6) scope -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (40) var_declaration -> . datatype id EQUALS expr SEMI
    (41) var_declaration -> . datatype id SEMI
    (42) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (46) return -> . RETURN expr SEMI
    (47) return -> . RETURN SEMI
    (43) assign -> . ID EQUALS expr SEMI
    (44) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (45) assign -> . ID DOT ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (27) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE conditional body_block
    (20) while -> . DO body_block WHILE conditional SEMI
    (83) goto_mark -> . ID COLON
    (21) if-else -> . IF conditional body_block
    (22) if-else -> . IF conditional body_block ELSE body_block
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    $end            reduce using rule 1 (program -> .)
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    GOTO            shift and go to state 13
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 14
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    program                        shift and go to state 1
    scope                          shift and go to state 2
    statement                      shift and go to state 3
    expr                           shift and go to state 4
    var_declaration                shift and go to state 5
    return                         shift and go to state 6
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9
    while                          shift and go to state 10
    goto_mark                      shift and go to state 15
    if-else                        shift and go to state 16
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (2) program -> scope .
    (5) scope -> scope . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (40) var_declaration -> . datatype id EQUALS expr SEMI
    (41) var_declaration -> . datatype id SEMI
    (42) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (46) return -> . RETURN expr SEMI
    (47) return -> . RETURN SEMI
    (43) assign -> . ID EQUALS expr SEMI
    (44) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (45) assign -> . ID DOT ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (27) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE conditional body_block
    (20) while -> . DO body_block WHILE conditional SEMI
    (83) goto_mark -> . ID COLON
    (21) if-else -> . IF conditional body_block
    (22) if-else -> . IF conditional body_block ELSE body_block
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    $end            reduce using rule 2 (program -> scope .)
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    GOTO            shift and go to state 13
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 14
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    statement                      shift and go to state 40
    expr                           shift and go to state 4
    var_declaration                shift and go to state 5
    return                         shift and go to state 6
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9
    while                          shift and go to state 10
    goto_mark                      shift and go to state 15
    if-else                        shift and go to state 16
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 27

state 3

    (6) scope -> statement .

    BREAK           reduce using rule 6 (scope -> statement .)
    CONTINUE        reduce using rule 6 (scope -> statement .)
    GOTO            reduce using rule 6 (scope -> statement .)
    MINUS           reduce using rule 6 (scope -> statement .)
    LNOT            reduce using rule 6 (scope -> statement .)
    NULL            reduce using rule 6 (scope -> statement .)
    LPAREN          reduce using rule 6 (scope -> statement .)
    ID              reduce using rule 6 (scope -> statement .)
    RETURN          reduce using rule 6 (scope -> statement .)
    FUNCTION        reduce using rule 6 (scope -> statement .)
    STRUCTURE       reduce using rule 6 (scope -> statement .)
    WHILE           reduce using rule 6 (scope -> statement .)
    DO              reduce using rule 6 (scope -> statement .)
    IF              reduce using rule 6 (scope -> statement .)
    INTEGER         reduce using rule 6 (scope -> statement .)
    DOUBLE          reduce using rule 6 (scope -> statement .)
    BOOL            reduce using rule 6 (scope -> statement .)
    STRING          reduce using rule 6 (scope -> statement .)
    VOID            reduce using rule 6 (scope -> statement .)
    DATATYPE        reduce using rule 6 (scope -> statement .)
    $end            reduce using rule 6 (scope -> statement .)
    RBRACE          reduce using rule 6 (scope -> statement .)


state 4

    (7) statement -> expr . SEMI
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 5

    (8) statement -> var_declaration .

    BREAK           reduce using rule 8 (statement -> var_declaration .)
    CONTINUE        reduce using rule 8 (statement -> var_declaration .)
    GOTO            reduce using rule 8 (statement -> var_declaration .)
    MINUS           reduce using rule 8 (statement -> var_declaration .)
    LNOT            reduce using rule 8 (statement -> var_declaration .)
    NULL            reduce using rule 8 (statement -> var_declaration .)
    LPAREN          reduce using rule 8 (statement -> var_declaration .)
    ID              reduce using rule 8 (statement -> var_declaration .)
    RETURN          reduce using rule 8 (statement -> var_declaration .)
    FUNCTION        reduce using rule 8 (statement -> var_declaration .)
    STRUCTURE       reduce using rule 8 (statement -> var_declaration .)
    WHILE           reduce using rule 8 (statement -> var_declaration .)
    DO              reduce using rule 8 (statement -> var_declaration .)
    IF              reduce using rule 8 (statement -> var_declaration .)
    INTEGER         reduce using rule 8 (statement -> var_declaration .)
    DOUBLE          reduce using rule 8 (statement -> var_declaration .)
    BOOL            reduce using rule 8 (statement -> var_declaration .)
    STRING          reduce using rule 8 (statement -> var_declaration .)
    VOID            reduce using rule 8 (statement -> var_declaration .)
    DATATYPE        reduce using rule 8 (statement -> var_declaration .)
    $end            reduce using rule 8 (statement -> var_declaration .)
    RBRACE          reduce using rule 8 (statement -> var_declaration .)


state 6

    (9) statement -> return .

    BREAK           reduce using rule 9 (statement -> return .)
    CONTINUE        reduce using rule 9 (statement -> return .)
    GOTO            reduce using rule 9 (statement -> return .)
    MINUS           reduce using rule 9 (statement -> return .)
    LNOT            reduce using rule 9 (statement -> return .)
    NULL            reduce using rule 9 (statement -> return .)
    LPAREN          reduce using rule 9 (statement -> return .)
    ID              reduce using rule 9 (statement -> return .)
    RETURN          reduce using rule 9 (statement -> return .)
    FUNCTION        reduce using rule 9 (statement -> return .)
    STRUCTURE       reduce using rule 9 (statement -> return .)
    WHILE           reduce using rule 9 (statement -> return .)
    DO              reduce using rule 9 (statement -> return .)
    IF              reduce using rule 9 (statement -> return .)
    INTEGER         reduce using rule 9 (statement -> return .)
    DOUBLE          reduce using rule 9 (statement -> return .)
    BOOL            reduce using rule 9 (statement -> return .)
    STRING          reduce using rule 9 (statement -> return .)
    VOID            reduce using rule 9 (statement -> return .)
    DATATYPE        reduce using rule 9 (statement -> return .)
    $end            reduce using rule 9 (statement -> return .)
    RBRACE          reduce using rule 9 (statement -> return .)


state 7

    (10) statement -> assign .

    BREAK           reduce using rule 10 (statement -> assign .)
    CONTINUE        reduce using rule 10 (statement -> assign .)
    GOTO            reduce using rule 10 (statement -> assign .)
    MINUS           reduce using rule 10 (statement -> assign .)
    LNOT            reduce using rule 10 (statement -> assign .)
    NULL            reduce using rule 10 (statement -> assign .)
    LPAREN          reduce using rule 10 (statement -> assign .)
    ID              reduce using rule 10 (statement -> assign .)
    RETURN          reduce using rule 10 (statement -> assign .)
    FUNCTION        reduce using rule 10 (statement -> assign .)
    STRUCTURE       reduce using rule 10 (statement -> assign .)
    WHILE           reduce using rule 10 (statement -> assign .)
    DO              reduce using rule 10 (statement -> assign .)
    IF              reduce using rule 10 (statement -> assign .)
    INTEGER         reduce using rule 10 (statement -> assign .)
    DOUBLE          reduce using rule 10 (statement -> assign .)
    BOOL            reduce using rule 10 (statement -> assign .)
    STRING          reduce using rule 10 (statement -> assign .)
    VOID            reduce using rule 10 (statement -> assign .)
    DATATYPE        reduce using rule 10 (statement -> assign .)
    $end            reduce using rule 10 (statement -> assign .)
    RBRACE          reduce using rule 10 (statement -> assign .)


state 8

    (11) statement -> func_declaration .

    BREAK           reduce using rule 11 (statement -> func_declaration .)
    CONTINUE        reduce using rule 11 (statement -> func_declaration .)
    GOTO            reduce using rule 11 (statement -> func_declaration .)
    MINUS           reduce using rule 11 (statement -> func_declaration .)
    LNOT            reduce using rule 11 (statement -> func_declaration .)
    NULL            reduce using rule 11 (statement -> func_declaration .)
    LPAREN          reduce using rule 11 (statement -> func_declaration .)
    ID              reduce using rule 11 (statement -> func_declaration .)
    RETURN          reduce using rule 11 (statement -> func_declaration .)
    FUNCTION        reduce using rule 11 (statement -> func_declaration .)
    STRUCTURE       reduce using rule 11 (statement -> func_declaration .)
    WHILE           reduce using rule 11 (statement -> func_declaration .)
    DO              reduce using rule 11 (statement -> func_declaration .)
    IF              reduce using rule 11 (statement -> func_declaration .)
    INTEGER         reduce using rule 11 (statement -> func_declaration .)
    DOUBLE          reduce using rule 11 (statement -> func_declaration .)
    BOOL            reduce using rule 11 (statement -> func_declaration .)
    STRING          reduce using rule 11 (statement -> func_declaration .)
    VOID            reduce using rule 11 (statement -> func_declaration .)
    DATATYPE        reduce using rule 11 (statement -> func_declaration .)
    $end            reduce using rule 11 (statement -> func_declaration .)
    RBRACE          reduce using rule 11 (statement -> func_declaration .)


state 9

    (12) statement -> struct_declaration .

    BREAK           reduce using rule 12 (statement -> struct_declaration .)
    CONTINUE        reduce using rule 12 (statement -> struct_declaration .)
    GOTO            reduce using rule 12 (statement -> struct_declaration .)
    MINUS           reduce using rule 12 (statement -> struct_declaration .)
    LNOT            reduce using rule 12 (statement -> struct_declaration .)
    NULL            reduce using rule 12 (statement -> struct_declaration .)
    LPAREN          reduce using rule 12 (statement -> struct_declaration .)
    ID              reduce using rule 12 (statement -> struct_declaration .)
    RETURN          reduce using rule 12 (statement -> struct_declaration .)
    FUNCTION        reduce using rule 12 (statement -> struct_declaration .)
    STRUCTURE       reduce using rule 12 (statement -> struct_declaration .)
    WHILE           reduce using rule 12 (statement -> struct_declaration .)
    DO              reduce using rule 12 (statement -> struct_declaration .)
    IF              reduce using rule 12 (statement -> struct_declaration .)
    INTEGER         reduce using rule 12 (statement -> struct_declaration .)
    DOUBLE          reduce using rule 12 (statement -> struct_declaration .)
    BOOL            reduce using rule 12 (statement -> struct_declaration .)
    STRING          reduce using rule 12 (statement -> struct_declaration .)
    VOID            reduce using rule 12 (statement -> struct_declaration .)
    DATATYPE        reduce using rule 12 (statement -> struct_declaration .)
    $end            reduce using rule 12 (statement -> struct_declaration .)
    RBRACE          reduce using rule 12 (statement -> struct_declaration .)


state 10

    (13) statement -> while .

    BREAK           reduce using rule 13 (statement -> while .)
    CONTINUE        reduce using rule 13 (statement -> while .)
    GOTO            reduce using rule 13 (statement -> while .)
    MINUS           reduce using rule 13 (statement -> while .)
    LNOT            reduce using rule 13 (statement -> while .)
    NULL            reduce using rule 13 (statement -> while .)
    LPAREN          reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)
    RETURN          reduce using rule 13 (statement -> while .)
    FUNCTION        reduce using rule 13 (statement -> while .)
    STRUCTURE       reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    DO              reduce using rule 13 (statement -> while .)
    IF              reduce using rule 13 (statement -> while .)
    INTEGER         reduce using rule 13 (statement -> while .)
    DOUBLE          reduce using rule 13 (statement -> while .)
    BOOL            reduce using rule 13 (statement -> while .)
    STRING          reduce using rule 13 (statement -> while .)
    VOID            reduce using rule 13 (statement -> while .)
    DATATYPE        reduce using rule 13 (statement -> while .)
    $end            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)


state 11

    (14) statement -> BREAK . SEMI

    SEMI            shift and go to state 59


state 12

    (15) statement -> CONTINUE . SEMI

    SEMI            shift and go to state 60


state 13

    (16) statement -> GOTO . ID SEMI

    ID              shift and go to state 61


state 14

    (82) expr -> ID . LBRACKET expr RBRACKET
    (42) var_declaration -> ID . id EQUALS LBRACE args RBRACE SEMI
    (43) assign -> ID . EQUALS expr SEMI
    (44) assign -> ID . EQUALS LBRACE args RBRACE SEMI
    (45) assign -> ID . DOT ID EQUALS expr SEMI
    (83) goto_mark -> ID . COLON
    (85) id -> ID .
    (85) id -> . ID

    LBRACKET        shift and go to state 63
    EQUALS          shift and go to state 65
    DOT             shift and go to state 66
    COLON           shift and go to state 67
    LPAREN          reduce using rule 85 (id -> ID .)
    SEMI            reduce using rule 85 (id -> ID .)
    PLUS            reduce using rule 85 (id -> ID .)
    MINUS           reduce using rule 85 (id -> ID .)
    MUL             reduce using rule 85 (id -> ID .)
    DIVIDE          reduce using rule 85 (id -> ID .)
    INTDIVIDE       reduce using rule 85 (id -> ID .)
    MODULO          reduce using rule 85 (id -> ID .)
    POW             reduce using rule 85 (id -> ID .)
    LE              reduce using rule 85 (id -> ID .)
    GE              reduce using rule 85 (id -> ID .)
    LT              reduce using rule 85 (id -> ID .)
    GT              reduce using rule 85 (id -> ID .)
    EQ              reduce using rule 85 (id -> ID .)
    NE              reduce using rule 85 (id -> ID .)
    LAND            reduce using rule 85 (id -> ID .)
    LOR             reduce using rule 85 (id -> ID .)
    BAND            reduce using rule 85 (id -> ID .)
    BOR             reduce using rule 85 (id -> ID .)
    ID              shift and go to state 62

    id                             shift and go to state 64

state 15

    (17) statement -> goto_mark .

    BREAK           reduce using rule 17 (statement -> goto_mark .)
    CONTINUE        reduce using rule 17 (statement -> goto_mark .)
    GOTO            reduce using rule 17 (statement -> goto_mark .)
    MINUS           reduce using rule 17 (statement -> goto_mark .)
    LNOT            reduce using rule 17 (statement -> goto_mark .)
    NULL            reduce using rule 17 (statement -> goto_mark .)
    LPAREN          reduce using rule 17 (statement -> goto_mark .)
    ID              reduce using rule 17 (statement -> goto_mark .)
    RETURN          reduce using rule 17 (statement -> goto_mark .)
    FUNCTION        reduce using rule 17 (statement -> goto_mark .)
    STRUCTURE       reduce using rule 17 (statement -> goto_mark .)
    WHILE           reduce using rule 17 (statement -> goto_mark .)
    DO              reduce using rule 17 (statement -> goto_mark .)
    IF              reduce using rule 17 (statement -> goto_mark .)
    INTEGER         reduce using rule 17 (statement -> goto_mark .)
    DOUBLE          reduce using rule 17 (statement -> goto_mark .)
    BOOL            reduce using rule 17 (statement -> goto_mark .)
    STRING          reduce using rule 17 (statement -> goto_mark .)
    VOID            reduce using rule 17 (statement -> goto_mark .)
    DATATYPE        reduce using rule 17 (statement -> goto_mark .)
    $end            reduce using rule 17 (statement -> goto_mark .)
    RBRACE          reduce using rule 17 (statement -> goto_mark .)


state 16

    (18) statement -> if-else .

    BREAK           reduce using rule 18 (statement -> if-else .)
    CONTINUE        reduce using rule 18 (statement -> if-else .)
    GOTO            reduce using rule 18 (statement -> if-else .)
    MINUS           reduce using rule 18 (statement -> if-else .)
    LNOT            reduce using rule 18 (statement -> if-else .)
    NULL            reduce using rule 18 (statement -> if-else .)
    LPAREN          reduce using rule 18 (statement -> if-else .)
    ID              reduce using rule 18 (statement -> if-else .)
    RETURN          reduce using rule 18 (statement -> if-else .)
    FUNCTION        reduce using rule 18 (statement -> if-else .)
    STRUCTURE       reduce using rule 18 (statement -> if-else .)
    WHILE           reduce using rule 18 (statement -> if-else .)
    DO              reduce using rule 18 (statement -> if-else .)
    IF              reduce using rule 18 (statement -> if-else .)
    INTEGER         reduce using rule 18 (statement -> if-else .)
    DOUBLE          reduce using rule 18 (statement -> if-else .)
    BOOL            reduce using rule 18 (statement -> if-else .)
    STRING          reduce using rule 18 (statement -> if-else .)
    VOID            reduce using rule 18 (statement -> if-else .)
    DATATYPE        reduce using rule 18 (statement -> if-else .)
    $end            reduce using rule 18 (statement -> if-else .)
    RBRACE          reduce using rule 18 (statement -> if-else .)


state 17

    (36) expr -> id . LPAREN args RPAREN
    (67) expr -> id .

    LPAREN          shift and go to state 68
    SEMI            reduce using rule 67 (expr -> id .)
    PLUS            reduce using rule 67 (expr -> id .)
    MINUS           reduce using rule 67 (expr -> id .)
    MUL             reduce using rule 67 (expr -> id .)
    DIVIDE          reduce using rule 67 (expr -> id .)
    INTDIVIDE       reduce using rule 67 (expr -> id .)
    MODULO          reduce using rule 67 (expr -> id .)
    POW             reduce using rule 67 (expr -> id .)
    LE              reduce using rule 67 (expr -> id .)
    GE              reduce using rule 67 (expr -> id .)
    LT              reduce using rule 67 (expr -> id .)
    GT              reduce using rule 67 (expr -> id .)
    EQ              reduce using rule 67 (expr -> id .)
    NE              reduce using rule 67 (expr -> id .)
    LAND            reduce using rule 67 (expr -> id .)
    LOR             reduce using rule 67 (expr -> id .)
    BAND            reduce using rule 67 (expr -> id .)
    BOR             reduce using rule 67 (expr -> id .)
    RPAREN          reduce using rule 67 (expr -> id .)
    RBRACKET        reduce using rule 67 (expr -> id .)
    COMMA           reduce using rule 67 (expr -> id .)
    error           reduce using rule 67 (expr -> id .)
    RBRACE          reduce using rule 67 (expr -> id .)


state 18

    (74) expr -> LPAREN . expr RPAREN
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 69
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 19

    (61) expr -> MINUS . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 72
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 20

    (64) expr -> LNOT . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 73
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 21

    (68) expr -> int .

    SEMI            reduce using rule 68 (expr -> int .)
    PLUS            reduce using rule 68 (expr -> int .)
    MINUS           reduce using rule 68 (expr -> int .)
    MUL             reduce using rule 68 (expr -> int .)
    DIVIDE          reduce using rule 68 (expr -> int .)
    INTDIVIDE       reduce using rule 68 (expr -> int .)
    MODULO          reduce using rule 68 (expr -> int .)
    POW             reduce using rule 68 (expr -> int .)
    LE              reduce using rule 68 (expr -> int .)
    GE              reduce using rule 68 (expr -> int .)
    LT              reduce using rule 68 (expr -> int .)
    GT              reduce using rule 68 (expr -> int .)
    EQ              reduce using rule 68 (expr -> int .)
    NE              reduce using rule 68 (expr -> int .)
    LAND            reduce using rule 68 (expr -> int .)
    LOR             reduce using rule 68 (expr -> int .)
    BAND            reduce using rule 68 (expr -> int .)
    BOR             reduce using rule 68 (expr -> int .)
    RPAREN          reduce using rule 68 (expr -> int .)
    RBRACKET        reduce using rule 68 (expr -> int .)
    COMMA           reduce using rule 68 (expr -> int .)
    error           reduce using rule 68 (expr -> int .)
    RBRACE          reduce using rule 68 (expr -> int .)


state 22

    (69) expr -> double .

    SEMI            reduce using rule 69 (expr -> double .)
    PLUS            reduce using rule 69 (expr -> double .)
    MINUS           reduce using rule 69 (expr -> double .)
    MUL             reduce using rule 69 (expr -> double .)
    DIVIDE          reduce using rule 69 (expr -> double .)
    INTDIVIDE       reduce using rule 69 (expr -> double .)
    MODULO          reduce using rule 69 (expr -> double .)
    POW             reduce using rule 69 (expr -> double .)
    LE              reduce using rule 69 (expr -> double .)
    GE              reduce using rule 69 (expr -> double .)
    LT              reduce using rule 69 (expr -> double .)
    GT              reduce using rule 69 (expr -> double .)
    EQ              reduce using rule 69 (expr -> double .)
    NE              reduce using rule 69 (expr -> double .)
    LAND            reduce using rule 69 (expr -> double .)
    LOR             reduce using rule 69 (expr -> double .)
    BAND            reduce using rule 69 (expr -> double .)
    BOR             reduce using rule 69 (expr -> double .)
    RPAREN          reduce using rule 69 (expr -> double .)
    RBRACKET        reduce using rule 69 (expr -> double .)
    COMMA           reduce using rule 69 (expr -> double .)
    error           reduce using rule 69 (expr -> double .)
    RBRACE          reduce using rule 69 (expr -> double .)


state 23

    (70) expr -> bool .

    SEMI            reduce using rule 70 (expr -> bool .)
    PLUS            reduce using rule 70 (expr -> bool .)
    MINUS           reduce using rule 70 (expr -> bool .)
    MUL             reduce using rule 70 (expr -> bool .)
    DIVIDE          reduce using rule 70 (expr -> bool .)
    INTDIVIDE       reduce using rule 70 (expr -> bool .)
    MODULO          reduce using rule 70 (expr -> bool .)
    POW             reduce using rule 70 (expr -> bool .)
    LE              reduce using rule 70 (expr -> bool .)
    GE              reduce using rule 70 (expr -> bool .)
    LT              reduce using rule 70 (expr -> bool .)
    GT              reduce using rule 70 (expr -> bool .)
    EQ              reduce using rule 70 (expr -> bool .)
    NE              reduce using rule 70 (expr -> bool .)
    LAND            reduce using rule 70 (expr -> bool .)
    LOR             reduce using rule 70 (expr -> bool .)
    BAND            reduce using rule 70 (expr -> bool .)
    BOR             reduce using rule 70 (expr -> bool .)
    RPAREN          reduce using rule 70 (expr -> bool .)
    RBRACKET        reduce using rule 70 (expr -> bool .)
    COMMA           reduce using rule 70 (expr -> bool .)
    error           reduce using rule 70 (expr -> bool .)
    RBRACE          reduce using rule 70 (expr -> bool .)


state 24

    (71) expr -> str .

    SEMI            reduce using rule 71 (expr -> str .)
    PLUS            reduce using rule 71 (expr -> str .)
    MINUS           reduce using rule 71 (expr -> str .)
    MUL             reduce using rule 71 (expr -> str .)
    DIVIDE          reduce using rule 71 (expr -> str .)
    INTDIVIDE       reduce using rule 71 (expr -> str .)
    MODULO          reduce using rule 71 (expr -> str .)
    POW             reduce using rule 71 (expr -> str .)
    LE              reduce using rule 71 (expr -> str .)
    GE              reduce using rule 71 (expr -> str .)
    LT              reduce using rule 71 (expr -> str .)
    GT              reduce using rule 71 (expr -> str .)
    EQ              reduce using rule 71 (expr -> str .)
    NE              reduce using rule 71 (expr -> str .)
    LAND            reduce using rule 71 (expr -> str .)
    LOR             reduce using rule 71 (expr -> str .)
    BAND            reduce using rule 71 (expr -> str .)
    BOR             reduce using rule 71 (expr -> str .)
    RPAREN          reduce using rule 71 (expr -> str .)
    RBRACKET        reduce using rule 71 (expr -> str .)
    COMMA           reduce using rule 71 (expr -> str .)
    error           reduce using rule 71 (expr -> str .)
    RBRACE          reduce using rule 71 (expr -> str .)


state 25

    (72) expr -> void .

    SEMI            reduce using rule 72 (expr -> void .)
    PLUS            reduce using rule 72 (expr -> void .)
    MINUS           reduce using rule 72 (expr -> void .)
    MUL             reduce using rule 72 (expr -> void .)
    DIVIDE          reduce using rule 72 (expr -> void .)
    INTDIVIDE       reduce using rule 72 (expr -> void .)
    MODULO          reduce using rule 72 (expr -> void .)
    POW             reduce using rule 72 (expr -> void .)
    LE              reduce using rule 72 (expr -> void .)
    GE              reduce using rule 72 (expr -> void .)
    LT              reduce using rule 72 (expr -> void .)
    GT              reduce using rule 72 (expr -> void .)
    EQ              reduce using rule 72 (expr -> void .)
    NE              reduce using rule 72 (expr -> void .)
    LAND            reduce using rule 72 (expr -> void .)
    LOR             reduce using rule 72 (expr -> void .)
    BAND            reduce using rule 72 (expr -> void .)
    BOR             reduce using rule 72 (expr -> void .)
    RPAREN          reduce using rule 72 (expr -> void .)
    RBRACKET        reduce using rule 72 (expr -> void .)
    COMMA           reduce using rule 72 (expr -> void .)
    error           reduce using rule 72 (expr -> void .)
    RBRACE          reduce using rule 72 (expr -> void .)


state 26

    (73) expr -> NULL .

    SEMI            reduce using rule 73 (expr -> NULL .)
    PLUS            reduce using rule 73 (expr -> NULL .)
    MINUS           reduce using rule 73 (expr -> NULL .)
    MUL             reduce using rule 73 (expr -> NULL .)
    DIVIDE          reduce using rule 73 (expr -> NULL .)
    INTDIVIDE       reduce using rule 73 (expr -> NULL .)
    MODULO          reduce using rule 73 (expr -> NULL .)
    POW             reduce using rule 73 (expr -> NULL .)
    LE              reduce using rule 73 (expr -> NULL .)
    GE              reduce using rule 73 (expr -> NULL .)
    LT              reduce using rule 73 (expr -> NULL .)
    GT              reduce using rule 73 (expr -> NULL .)
    EQ              reduce using rule 73 (expr -> NULL .)
    NE              reduce using rule 73 (expr -> NULL .)
    LAND            reduce using rule 73 (expr -> NULL .)
    LOR             reduce using rule 73 (expr -> NULL .)
    BAND            reduce using rule 73 (expr -> NULL .)
    BOR             reduce using rule 73 (expr -> NULL .)
    RPAREN          reduce using rule 73 (expr -> NULL .)
    RBRACKET        reduce using rule 73 (expr -> NULL .)
    COMMA           reduce using rule 73 (expr -> NULL .)
    error           reduce using rule 73 (expr -> NULL .)
    RBRACE          reduce using rule 73 (expr -> NULL .)


state 27

    (80) expr -> datatype . LBRACKET RBRACKET id
    (81) expr -> datatype . LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (40) var_declaration -> datatype . id EQUALS expr SEMI
    (41) var_declaration -> datatype . id SEMI
    (85) id -> . ID

    LBRACKET        shift and go to state 74
    ID              shift and go to state 62

    id                             shift and go to state 75

state 28

    (75) int -> INTEGER .

    SEMI            reduce using rule 75 (int -> INTEGER .)
    PLUS            reduce using rule 75 (int -> INTEGER .)
    MINUS           reduce using rule 75 (int -> INTEGER .)
    MUL             reduce using rule 75 (int -> INTEGER .)
    DIVIDE          reduce using rule 75 (int -> INTEGER .)
    INTDIVIDE       reduce using rule 75 (int -> INTEGER .)
    MODULO          reduce using rule 75 (int -> INTEGER .)
    POW             reduce using rule 75 (int -> INTEGER .)
    LE              reduce using rule 75 (int -> INTEGER .)
    GE              reduce using rule 75 (int -> INTEGER .)
    LT              reduce using rule 75 (int -> INTEGER .)
    GT              reduce using rule 75 (int -> INTEGER .)
    EQ              reduce using rule 75 (int -> INTEGER .)
    NE              reduce using rule 75 (int -> INTEGER .)
    LAND            reduce using rule 75 (int -> INTEGER .)
    LOR             reduce using rule 75 (int -> INTEGER .)
    BAND            reduce using rule 75 (int -> INTEGER .)
    BOR             reduce using rule 75 (int -> INTEGER .)
    RPAREN          reduce using rule 75 (int -> INTEGER .)
    RBRACKET        reduce using rule 75 (int -> INTEGER .)
    COMMA           reduce using rule 75 (int -> INTEGER .)
    error           reduce using rule 75 (int -> INTEGER .)
    RBRACE          reduce using rule 75 (int -> INTEGER .)


state 29

    (46) return -> RETURN . expr SEMI
    (47) return -> RETURN . SEMI
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    SEMI            shift and go to state 77
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 76
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 30

    (4) func_declaration -> FUNCTION . datatype id LPAREN params RPAREN body_block
    (84) datatype -> . DATATYPE

    DATATYPE        shift and go to state 39

    datatype                       shift and go to state 78

state 31

    (27) struct_declaration -> STRUCTURE . id LBRACE struct_params RBRACE
    (85) id -> . ID

    ID              shift and go to state 62

    id                             shift and go to state 79

state 32

    (19) while -> WHILE . conditional body_block
    (23) conditional -> . LPAREN expr RPAREN
    (24) conditional -> . error expr RPAREN
    (25) conditional -> . LPAREN error RPAREN
    (26) conditional -> . LPAREN expr error

    LPAREN          shift and go to state 81
    error           shift and go to state 82

    conditional                    shift and go to state 80

state 33

    (20) while -> DO . body_block WHILE conditional SEMI
    (3) body_block -> . LBRACE scope RBRACE

    LBRACE          shift and go to state 84

    body_block                     shift and go to state 83

state 34

    (21) if-else -> IF . conditional body_block
    (22) if-else -> IF . conditional body_block ELSE body_block
    (23) conditional -> . LPAREN expr RPAREN
    (24) conditional -> . error expr RPAREN
    (25) conditional -> . LPAREN error RPAREN
    (26) conditional -> . LPAREN expr error

    LPAREN          shift and go to state 81
    error           shift and go to state 82

    conditional                    shift and go to state 85

state 35

    (76) double -> DOUBLE .

    SEMI            reduce using rule 76 (double -> DOUBLE .)
    PLUS            reduce using rule 76 (double -> DOUBLE .)
    MINUS           reduce using rule 76 (double -> DOUBLE .)
    MUL             reduce using rule 76 (double -> DOUBLE .)
    DIVIDE          reduce using rule 76 (double -> DOUBLE .)
    INTDIVIDE       reduce using rule 76 (double -> DOUBLE .)
    MODULO          reduce using rule 76 (double -> DOUBLE .)
    POW             reduce using rule 76 (double -> DOUBLE .)
    LE              reduce using rule 76 (double -> DOUBLE .)
    GE              reduce using rule 76 (double -> DOUBLE .)
    LT              reduce using rule 76 (double -> DOUBLE .)
    GT              reduce using rule 76 (double -> DOUBLE .)
    EQ              reduce using rule 76 (double -> DOUBLE .)
    NE              reduce using rule 76 (double -> DOUBLE .)
    LAND            reduce using rule 76 (double -> DOUBLE .)
    LOR             reduce using rule 76 (double -> DOUBLE .)
    BAND            reduce using rule 76 (double -> DOUBLE .)
    BOR             reduce using rule 76 (double -> DOUBLE .)
    RPAREN          reduce using rule 76 (double -> DOUBLE .)
    RBRACKET        reduce using rule 76 (double -> DOUBLE .)
    COMMA           reduce using rule 76 (double -> DOUBLE .)
    error           reduce using rule 76 (double -> DOUBLE .)
    RBRACE          reduce using rule 76 (double -> DOUBLE .)


state 36

    (77) bool -> BOOL .

    SEMI            reduce using rule 77 (bool -> BOOL .)
    PLUS            reduce using rule 77 (bool -> BOOL .)
    MINUS           reduce using rule 77 (bool -> BOOL .)
    MUL             reduce using rule 77 (bool -> BOOL .)
    DIVIDE          reduce using rule 77 (bool -> BOOL .)
    INTDIVIDE       reduce using rule 77 (bool -> BOOL .)
    MODULO          reduce using rule 77 (bool -> BOOL .)
    POW             reduce using rule 77 (bool -> BOOL .)
    LE              reduce using rule 77 (bool -> BOOL .)
    GE              reduce using rule 77 (bool -> BOOL .)
    LT              reduce using rule 77 (bool -> BOOL .)
    GT              reduce using rule 77 (bool -> BOOL .)
    EQ              reduce using rule 77 (bool -> BOOL .)
    NE              reduce using rule 77 (bool -> BOOL .)
    LAND            reduce using rule 77 (bool -> BOOL .)
    LOR             reduce using rule 77 (bool -> BOOL .)
    BAND            reduce using rule 77 (bool -> BOOL .)
    BOR             reduce using rule 77 (bool -> BOOL .)
    RPAREN          reduce using rule 77 (bool -> BOOL .)
    RBRACKET        reduce using rule 77 (bool -> BOOL .)
    COMMA           reduce using rule 77 (bool -> BOOL .)
    error           reduce using rule 77 (bool -> BOOL .)
    RBRACE          reduce using rule 77 (bool -> BOOL .)


state 37

    (78) str -> STRING .

    SEMI            reduce using rule 78 (str -> STRING .)
    PLUS            reduce using rule 78 (str -> STRING .)
    MINUS           reduce using rule 78 (str -> STRING .)
    MUL             reduce using rule 78 (str -> STRING .)
    DIVIDE          reduce using rule 78 (str -> STRING .)
    INTDIVIDE       reduce using rule 78 (str -> STRING .)
    MODULO          reduce using rule 78 (str -> STRING .)
    POW             reduce using rule 78 (str -> STRING .)
    LE              reduce using rule 78 (str -> STRING .)
    GE              reduce using rule 78 (str -> STRING .)
    LT              reduce using rule 78 (str -> STRING .)
    GT              reduce using rule 78 (str -> STRING .)
    EQ              reduce using rule 78 (str -> STRING .)
    NE              reduce using rule 78 (str -> STRING .)
    LAND            reduce using rule 78 (str -> STRING .)
    LOR             reduce using rule 78 (str -> STRING .)
    BAND            reduce using rule 78 (str -> STRING .)
    BOR             reduce using rule 78 (str -> STRING .)
    RPAREN          reduce using rule 78 (str -> STRING .)
    RBRACKET        reduce using rule 78 (str -> STRING .)
    COMMA           reduce using rule 78 (str -> STRING .)
    error           reduce using rule 78 (str -> STRING .)
    RBRACE          reduce using rule 78 (str -> STRING .)


state 38

    (79) void -> VOID .

    SEMI            reduce using rule 79 (void -> VOID .)
    PLUS            reduce using rule 79 (void -> VOID .)
    MINUS           reduce using rule 79 (void -> VOID .)
    MUL             reduce using rule 79 (void -> VOID .)
    DIVIDE          reduce using rule 79 (void -> VOID .)
    INTDIVIDE       reduce using rule 79 (void -> VOID .)
    MODULO          reduce using rule 79 (void -> VOID .)
    POW             reduce using rule 79 (void -> VOID .)
    LE              reduce using rule 79 (void -> VOID .)
    GE              reduce using rule 79 (void -> VOID .)
    LT              reduce using rule 79 (void -> VOID .)
    GT              reduce using rule 79 (void -> VOID .)
    EQ              reduce using rule 79 (void -> VOID .)
    NE              reduce using rule 79 (void -> VOID .)
    LAND            reduce using rule 79 (void -> VOID .)
    LOR             reduce using rule 79 (void -> VOID .)
    BAND            reduce using rule 79 (void -> VOID .)
    BOR             reduce using rule 79 (void -> VOID .)
    RPAREN          reduce using rule 79 (void -> VOID .)
    RBRACKET        reduce using rule 79 (void -> VOID .)
    COMMA           reduce using rule 79 (void -> VOID .)
    error           reduce using rule 79 (void -> VOID .)
    RBRACE          reduce using rule 79 (void -> VOID .)


state 39

    (84) datatype -> DATATYPE .

    LBRACKET        reduce using rule 84 (datatype -> DATATYPE .)
    ID              reduce using rule 84 (datatype -> DATATYPE .)


state 40

    (5) scope -> scope statement .

    BREAK           reduce using rule 5 (scope -> scope statement .)
    CONTINUE        reduce using rule 5 (scope -> scope statement .)
    GOTO            reduce using rule 5 (scope -> scope statement .)
    MINUS           reduce using rule 5 (scope -> scope statement .)
    LNOT            reduce using rule 5 (scope -> scope statement .)
    NULL            reduce using rule 5 (scope -> scope statement .)
    LPAREN          reduce using rule 5 (scope -> scope statement .)
    ID              reduce using rule 5 (scope -> scope statement .)
    RETURN          reduce using rule 5 (scope -> scope statement .)
    FUNCTION        reduce using rule 5 (scope -> scope statement .)
    STRUCTURE       reduce using rule 5 (scope -> scope statement .)
    WHILE           reduce using rule 5 (scope -> scope statement .)
    DO              reduce using rule 5 (scope -> scope statement .)
    IF              reduce using rule 5 (scope -> scope statement .)
    INTEGER         reduce using rule 5 (scope -> scope statement .)
    DOUBLE          reduce using rule 5 (scope -> scope statement .)
    BOOL            reduce using rule 5 (scope -> scope statement .)
    STRING          reduce using rule 5 (scope -> scope statement .)
    VOID            reduce using rule 5 (scope -> scope statement .)
    DATATYPE        reduce using rule 5 (scope -> scope statement .)
    $end            reduce using rule 5 (scope -> scope statement .)
    RBRACE          reduce using rule 5 (scope -> scope statement .)


state 41

    (7) statement -> expr SEMI .

    BREAK           reduce using rule 7 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 7 (statement -> expr SEMI .)
    GOTO            reduce using rule 7 (statement -> expr SEMI .)
    MINUS           reduce using rule 7 (statement -> expr SEMI .)
    LNOT            reduce using rule 7 (statement -> expr SEMI .)
    NULL            reduce using rule 7 (statement -> expr SEMI .)
    LPAREN          reduce using rule 7 (statement -> expr SEMI .)
    ID              reduce using rule 7 (statement -> expr SEMI .)
    RETURN          reduce using rule 7 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 7 (statement -> expr SEMI .)
    STRUCTURE       reduce using rule 7 (statement -> expr SEMI .)
    WHILE           reduce using rule 7 (statement -> expr SEMI .)
    DO              reduce using rule 7 (statement -> expr SEMI .)
    IF              reduce using rule 7 (statement -> expr SEMI .)
    INTEGER         reduce using rule 7 (statement -> expr SEMI .)
    DOUBLE          reduce using rule 7 (statement -> expr SEMI .)
    BOOL            reduce using rule 7 (statement -> expr SEMI .)
    STRING          reduce using rule 7 (statement -> expr SEMI .)
    VOID            reduce using rule 7 (statement -> expr SEMI .)
    DATATYPE        reduce using rule 7 (statement -> expr SEMI .)
    $end            reduce using rule 7 (statement -> expr SEMI .)
    RBRACE          reduce using rule 7 (statement -> expr SEMI .)


state 42

    (48) expr -> expr PLUS . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 86
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 43

    (49) expr -> expr MINUS . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 87
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 44

    (50) expr -> expr MUL . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 88
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 45

    (51) expr -> expr DIVIDE . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 89
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 46

    (52) expr -> expr INTDIVIDE . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 90
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 47

    (53) expr -> expr MODULO . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 91
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 48

    (54) expr -> expr POW . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 92
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 49

    (55) expr -> expr LE . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 93
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 50

    (56) expr -> expr GE . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 94
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 51

    (57) expr -> expr LT . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 95
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 52

    (58) expr -> expr GT . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 96
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 53

    (59) expr -> expr EQ . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 97
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 54

    (60) expr -> expr NE . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 98
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 55

    (62) expr -> expr LAND . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 99
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 56

    (63) expr -> expr LOR . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 100
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 57

    (65) expr -> expr BAND . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 101
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 58

    (66) expr -> expr BOR . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 102
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 59

    (14) statement -> BREAK SEMI .

    BREAK           reduce using rule 14 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 14 (statement -> BREAK SEMI .)
    GOTO            reduce using rule 14 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 14 (statement -> BREAK SEMI .)
    LNOT            reduce using rule 14 (statement -> BREAK SEMI .)
    NULL            reduce using rule 14 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 14 (statement -> BREAK SEMI .)
    ID              reduce using rule 14 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 14 (statement -> BREAK SEMI .)
    FUNCTION        reduce using rule 14 (statement -> BREAK SEMI .)
    STRUCTURE       reduce using rule 14 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 14 (statement -> BREAK SEMI .)
    DO              reduce using rule 14 (statement -> BREAK SEMI .)
    IF              reduce using rule 14 (statement -> BREAK SEMI .)
    INTEGER         reduce using rule 14 (statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 14 (statement -> BREAK SEMI .)
    BOOL            reduce using rule 14 (statement -> BREAK SEMI .)
    STRING          reduce using rule 14 (statement -> BREAK SEMI .)
    VOID            reduce using rule 14 (statement -> BREAK SEMI .)
    DATATYPE        reduce using rule 14 (statement -> BREAK SEMI .)
    $end            reduce using rule 14 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 14 (statement -> BREAK SEMI .)


state 60

    (15) statement -> CONTINUE SEMI .

    BREAK           reduce using rule 15 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 15 (statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 15 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 15 (statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 15 (statement -> CONTINUE SEMI .)
    NULL            reduce using rule 15 (statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 15 (statement -> CONTINUE SEMI .)
    ID              reduce using rule 15 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 15 (statement -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 15 (statement -> CONTINUE SEMI .)
    STRUCTURE       reduce using rule 15 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 15 (statement -> CONTINUE SEMI .)
    DO              reduce using rule 15 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 15 (statement -> CONTINUE SEMI .)
    INTEGER         reduce using rule 15 (statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 15 (statement -> CONTINUE SEMI .)
    BOOL            reduce using rule 15 (statement -> CONTINUE SEMI .)
    STRING          reduce using rule 15 (statement -> CONTINUE SEMI .)
    VOID            reduce using rule 15 (statement -> CONTINUE SEMI .)
    DATATYPE        reduce using rule 15 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 15 (statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 15 (statement -> CONTINUE SEMI .)


state 61

    (16) statement -> GOTO ID . SEMI

    SEMI            shift and go to state 103


state 62

    (85) id -> ID .

    EQUALS          reduce using rule 85 (id -> ID .)
    SEMI            reduce using rule 85 (id -> ID .)
    LBRACE          reduce using rule 85 (id -> ID .)
    LPAREN          reduce using rule 85 (id -> ID .)
    PLUS            reduce using rule 85 (id -> ID .)
    MINUS           reduce using rule 85 (id -> ID .)
    MUL             reduce using rule 85 (id -> ID .)
    DIVIDE          reduce using rule 85 (id -> ID .)
    INTDIVIDE       reduce using rule 85 (id -> ID .)
    MODULO          reduce using rule 85 (id -> ID .)
    POW             reduce using rule 85 (id -> ID .)
    LE              reduce using rule 85 (id -> ID .)
    GE              reduce using rule 85 (id -> ID .)
    LT              reduce using rule 85 (id -> ID .)
    GT              reduce using rule 85 (id -> ID .)
    EQ              reduce using rule 85 (id -> ID .)
    NE              reduce using rule 85 (id -> ID .)
    LAND            reduce using rule 85 (id -> ID .)
    LOR             reduce using rule 85 (id -> ID .)
    BAND            reduce using rule 85 (id -> ID .)
    BOR             reduce using rule 85 (id -> ID .)
    RPAREN          reduce using rule 85 (id -> ID .)
    RBRACKET        reduce using rule 85 (id -> ID .)
    COMMA           reduce using rule 85 (id -> ID .)
    error           reduce using rule 85 (id -> ID .)
    RBRACE          reduce using rule 85 (id -> ID .)


state 63

    (82) expr -> ID LBRACKET . expr RBRACKET
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 104
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 64

    (42) var_declaration -> ID id . EQUALS LBRACE args RBRACE SEMI

    EQUALS          shift and go to state 105


state 65

    (43) assign -> ID EQUALS . expr SEMI
    (44) assign -> ID EQUALS . LBRACE args RBRACE SEMI
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    LBRACE          shift and go to state 107
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 106
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 66

    (45) assign -> ID DOT . ID EQUALS expr SEMI

    ID              shift and go to state 108


state 67

    (83) goto_mark -> ID COLON .

    BREAK           reduce using rule 83 (goto_mark -> ID COLON .)
    CONTINUE        reduce using rule 83 (goto_mark -> ID COLON .)
    GOTO            reduce using rule 83 (goto_mark -> ID COLON .)
    MINUS           reduce using rule 83 (goto_mark -> ID COLON .)
    LNOT            reduce using rule 83 (goto_mark -> ID COLON .)
    NULL            reduce using rule 83 (goto_mark -> ID COLON .)
    LPAREN          reduce using rule 83 (goto_mark -> ID COLON .)
    ID              reduce using rule 83 (goto_mark -> ID COLON .)
    RETURN          reduce using rule 83 (goto_mark -> ID COLON .)
    FUNCTION        reduce using rule 83 (goto_mark -> ID COLON .)
    STRUCTURE       reduce using rule 83 (goto_mark -> ID COLON .)
    WHILE           reduce using rule 83 (goto_mark -> ID COLON .)
    DO              reduce using rule 83 (goto_mark -> ID COLON .)
    IF              reduce using rule 83 (goto_mark -> ID COLON .)
    INTEGER         reduce using rule 83 (goto_mark -> ID COLON .)
    DOUBLE          reduce using rule 83 (goto_mark -> ID COLON .)
    BOOL            reduce using rule 83 (goto_mark -> ID COLON .)
    STRING          reduce using rule 83 (goto_mark -> ID COLON .)
    VOID            reduce using rule 83 (goto_mark -> ID COLON .)
    DATATYPE        reduce using rule 83 (goto_mark -> ID COLON .)
    $end            reduce using rule 83 (goto_mark -> ID COLON .)
    RBRACE          reduce using rule 83 (goto_mark -> ID COLON .)


state 68

    (36) expr -> id LPAREN . args RPAREN
    (37) args -> .
    (38) args -> . expr
    (39) args -> . args COMMA expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    RPAREN          reduce using rule 37 (args -> .)
    COMMA           reduce using rule 37 (args -> .)
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    id                             shift and go to state 17
    args                           shift and go to state 109
    expr                           shift and go to state 110
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 69

    (74) expr -> LPAREN expr . RPAREN
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    RPAREN          shift and go to state 111
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 70

    (80) expr -> datatype . LBRACKET RBRACKET id
    (81) expr -> datatype . LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET

    LBRACKET        shift and go to state 74


state 71

    (82) expr -> ID . LBRACKET expr RBRACKET
    (85) id -> ID .

    LBRACKET        shift and go to state 63
    LPAREN          reduce using rule 85 (id -> ID .)
    RPAREN          reduce using rule 85 (id -> ID .)
    PLUS            reduce using rule 85 (id -> ID .)
    MINUS           reduce using rule 85 (id -> ID .)
    MUL             reduce using rule 85 (id -> ID .)
    DIVIDE          reduce using rule 85 (id -> ID .)
    INTDIVIDE       reduce using rule 85 (id -> ID .)
    MODULO          reduce using rule 85 (id -> ID .)
    POW             reduce using rule 85 (id -> ID .)
    LE              reduce using rule 85 (id -> ID .)
    GE              reduce using rule 85 (id -> ID .)
    LT              reduce using rule 85 (id -> ID .)
    GT              reduce using rule 85 (id -> ID .)
    EQ              reduce using rule 85 (id -> ID .)
    NE              reduce using rule 85 (id -> ID .)
    LAND            reduce using rule 85 (id -> ID .)
    LOR             reduce using rule 85 (id -> ID .)
    BAND            reduce using rule 85 (id -> ID .)
    BOR             reduce using rule 85 (id -> ID .)
    SEMI            reduce using rule 85 (id -> ID .)
    RBRACKET        reduce using rule 85 (id -> ID .)
    COMMA           reduce using rule 85 (id -> ID .)
    error           reduce using rule 85 (id -> ID .)
    RBRACE          reduce using rule 85 (id -> ID .)


state 72

    (61) expr -> MINUS expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 61 (expr -> MINUS expr .)
    PLUS            reduce using rule 61 (expr -> MINUS expr .)
    MINUS           reduce using rule 61 (expr -> MINUS expr .)
    MUL             reduce using rule 61 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 61 (expr -> MINUS expr .)
    INTDIVIDE       reduce using rule 61 (expr -> MINUS expr .)
    MODULO          reduce using rule 61 (expr -> MINUS expr .)
    POW             reduce using rule 61 (expr -> MINUS expr .)
    LE              reduce using rule 61 (expr -> MINUS expr .)
    GE              reduce using rule 61 (expr -> MINUS expr .)
    LT              reduce using rule 61 (expr -> MINUS expr .)
    GT              reduce using rule 61 (expr -> MINUS expr .)
    EQ              reduce using rule 61 (expr -> MINUS expr .)
    NE              reduce using rule 61 (expr -> MINUS expr .)
    LAND            reduce using rule 61 (expr -> MINUS expr .)
    LOR             reduce using rule 61 (expr -> MINUS expr .)
    BAND            reduce using rule 61 (expr -> MINUS expr .)
    BOR             reduce using rule 61 (expr -> MINUS expr .)
    RPAREN          reduce using rule 61 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 61 (expr -> MINUS expr .)
    COMMA           reduce using rule 61 (expr -> MINUS expr .)
    error           reduce using rule 61 (expr -> MINUS expr .)
    RBRACE          reduce using rule 61 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! POW             [ shift and go to state 48 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 73

    (64) expr -> LNOT expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 64 (expr -> LNOT expr .)
    PLUS            reduce using rule 64 (expr -> LNOT expr .)
    MINUS           reduce using rule 64 (expr -> LNOT expr .)
    MUL             reduce using rule 64 (expr -> LNOT expr .)
    DIVIDE          reduce using rule 64 (expr -> LNOT expr .)
    INTDIVIDE       reduce using rule 64 (expr -> LNOT expr .)
    MODULO          reduce using rule 64 (expr -> LNOT expr .)
    POW             reduce using rule 64 (expr -> LNOT expr .)
    LE              reduce using rule 64 (expr -> LNOT expr .)
    GE              reduce using rule 64 (expr -> LNOT expr .)
    LT              reduce using rule 64 (expr -> LNOT expr .)
    GT              reduce using rule 64 (expr -> LNOT expr .)
    EQ              reduce using rule 64 (expr -> LNOT expr .)
    NE              reduce using rule 64 (expr -> LNOT expr .)
    LAND            reduce using rule 64 (expr -> LNOT expr .)
    LOR             reduce using rule 64 (expr -> LNOT expr .)
    BAND            reduce using rule 64 (expr -> LNOT expr .)
    BOR             reduce using rule 64 (expr -> LNOT expr .)
    RPAREN          reduce using rule 64 (expr -> LNOT expr .)
    RBRACKET        reduce using rule 64 (expr -> LNOT expr .)
    COMMA           reduce using rule 64 (expr -> LNOT expr .)
    error           reduce using rule 64 (expr -> LNOT expr .)
    RBRACE          reduce using rule 64 (expr -> LNOT expr .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! POW             [ shift and go to state 48 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 74

    (80) expr -> datatype LBRACKET . RBRACKET id
    (81) expr -> datatype LBRACKET . RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET

    RBRACKET        shift and go to state 112


state 75

    (40) var_declaration -> datatype id . EQUALS expr SEMI
    (41) var_declaration -> datatype id . SEMI

    EQUALS          shift and go to state 113
    SEMI            shift and go to state 114


state 76

    (46) return -> RETURN expr . SEMI
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            shift and go to state 115
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 77

    (47) return -> RETURN SEMI .

    BREAK           reduce using rule 47 (return -> RETURN SEMI .)
    CONTINUE        reduce using rule 47 (return -> RETURN SEMI .)
    GOTO            reduce using rule 47 (return -> RETURN SEMI .)
    MINUS           reduce using rule 47 (return -> RETURN SEMI .)
    LNOT            reduce using rule 47 (return -> RETURN SEMI .)
    NULL            reduce using rule 47 (return -> RETURN SEMI .)
    LPAREN          reduce using rule 47 (return -> RETURN SEMI .)
    ID              reduce using rule 47 (return -> RETURN SEMI .)
    RETURN          reduce using rule 47 (return -> RETURN SEMI .)
    FUNCTION        reduce using rule 47 (return -> RETURN SEMI .)
    STRUCTURE       reduce using rule 47 (return -> RETURN SEMI .)
    WHILE           reduce using rule 47 (return -> RETURN SEMI .)
    DO              reduce using rule 47 (return -> RETURN SEMI .)
    IF              reduce using rule 47 (return -> RETURN SEMI .)
    INTEGER         reduce using rule 47 (return -> RETURN SEMI .)
    DOUBLE          reduce using rule 47 (return -> RETURN SEMI .)
    BOOL            reduce using rule 47 (return -> RETURN SEMI .)
    STRING          reduce using rule 47 (return -> RETURN SEMI .)
    VOID            reduce using rule 47 (return -> RETURN SEMI .)
    DATATYPE        reduce using rule 47 (return -> RETURN SEMI .)
    $end            reduce using rule 47 (return -> RETURN SEMI .)
    RBRACE          reduce using rule 47 (return -> RETURN SEMI .)


state 78

    (4) func_declaration -> FUNCTION datatype . id LPAREN params RPAREN body_block
    (85) id -> . ID

    ID              shift and go to state 62

    id                             shift and go to state 116

state 79

    (27) struct_declaration -> STRUCTURE id . LBRACE struct_params RBRACE

    LBRACE          shift and go to state 117


state 80

    (19) while -> WHILE conditional . body_block
    (3) body_block -> . LBRACE scope RBRACE

    LBRACE          shift and go to state 84

    body_block                     shift and go to state 118

state 81

    (23) conditional -> LPAREN . expr RPAREN
    (25) conditional -> LPAREN . error RPAREN
    (26) conditional -> LPAREN . expr error
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    error           shift and go to state 120
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 119
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 82

    (24) conditional -> error . expr RPAREN
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 121
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 83

    (20) while -> DO body_block . WHILE conditional SEMI

    WHILE           shift and go to state 122


state 84

    (3) body_block -> LBRACE . scope RBRACE
    (5) scope -> . scope statement
    (6) scope -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (40) var_declaration -> . datatype id EQUALS expr SEMI
    (41) var_declaration -> . datatype id SEMI
    (42) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (46) return -> . RETURN expr SEMI
    (47) return -> . RETURN SEMI
    (43) assign -> . ID EQUALS expr SEMI
    (44) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (45) assign -> . ID DOT ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (27) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE conditional body_block
    (20) while -> . DO body_block WHILE conditional SEMI
    (83) goto_mark -> . ID COLON
    (21) if-else -> . IF conditional body_block
    (22) if-else -> . IF conditional body_block ELSE body_block
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    GOTO            shift and go to state 13
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 14
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    scope                          shift and go to state 123
    statement                      shift and go to state 3
    expr                           shift and go to state 4
    var_declaration                shift and go to state 5
    return                         shift and go to state 6
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9
    while                          shift and go to state 10
    goto_mark                      shift and go to state 15
    if-else                        shift and go to state 16
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 27

state 85

    (21) if-else -> IF conditional . body_block
    (22) if-else -> IF conditional . body_block ELSE body_block
    (3) body_block -> . LBRACE scope RBRACE

    LBRACE          shift and go to state 84

    body_block                     shift and go to state 124

state 86

    (48) expr -> expr PLUS expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 48 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 48 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 48 (expr -> expr PLUS expr .)
    LE              reduce using rule 48 (expr -> expr PLUS expr .)
    GE              reduce using rule 48 (expr -> expr PLUS expr .)
    LT              reduce using rule 48 (expr -> expr PLUS expr .)
    GT              reduce using rule 48 (expr -> expr PLUS expr .)
    EQ              reduce using rule 48 (expr -> expr PLUS expr .)
    NE              reduce using rule 48 (expr -> expr PLUS expr .)
    LAND            reduce using rule 48 (expr -> expr PLUS expr .)
    LOR             reduce using rule 48 (expr -> expr PLUS expr .)
    BAND            reduce using rule 48 (expr -> expr PLUS expr .)
    BOR             reduce using rule 48 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 48 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 48 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 48 (expr -> expr PLUS expr .)
    error           reduce using rule 48 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 48 (expr -> expr PLUS expr .)
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48

  ! MUL             [ reduce using rule 48 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr PLUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 48 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 48 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 48 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 87

    (49) expr -> expr MINUS expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 49 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 49 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 49 (expr -> expr MINUS expr .)
    LE              reduce using rule 49 (expr -> expr MINUS expr .)
    GE              reduce using rule 49 (expr -> expr MINUS expr .)
    LT              reduce using rule 49 (expr -> expr MINUS expr .)
    GT              reduce using rule 49 (expr -> expr MINUS expr .)
    EQ              reduce using rule 49 (expr -> expr MINUS expr .)
    NE              reduce using rule 49 (expr -> expr MINUS expr .)
    LAND            reduce using rule 49 (expr -> expr MINUS expr .)
    LOR             reduce using rule 49 (expr -> expr MINUS expr .)
    BAND            reduce using rule 49 (expr -> expr MINUS expr .)
    BOR             reduce using rule 49 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 49 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 49 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 49 (expr -> expr MINUS expr .)
    error           reduce using rule 49 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 49 (expr -> expr MINUS expr .)
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48

  ! MUL             [ reduce using rule 49 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr MINUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 49 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 49 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 49 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 88

    (50) expr -> expr MUL expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 50 (expr -> expr MUL expr .)
    PLUS            reduce using rule 50 (expr -> expr MUL expr .)
    MINUS           reduce using rule 50 (expr -> expr MUL expr .)
    MUL             reduce using rule 50 (expr -> expr MUL expr .)
    DIVIDE          reduce using rule 50 (expr -> expr MUL expr .)
    INTDIVIDE       reduce using rule 50 (expr -> expr MUL expr .)
    MODULO          reduce using rule 50 (expr -> expr MUL expr .)
    LE              reduce using rule 50 (expr -> expr MUL expr .)
    GE              reduce using rule 50 (expr -> expr MUL expr .)
    LT              reduce using rule 50 (expr -> expr MUL expr .)
    GT              reduce using rule 50 (expr -> expr MUL expr .)
    EQ              reduce using rule 50 (expr -> expr MUL expr .)
    NE              reduce using rule 50 (expr -> expr MUL expr .)
    LAND            reduce using rule 50 (expr -> expr MUL expr .)
    LOR             reduce using rule 50 (expr -> expr MUL expr .)
    BAND            reduce using rule 50 (expr -> expr MUL expr .)
    BOR             reduce using rule 50 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 50 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 50 (expr -> expr MUL expr .)
    COMMA           reduce using rule 50 (expr -> expr MUL expr .)
    error           reduce using rule 50 (expr -> expr MUL expr .)
    RBRACE          reduce using rule 50 (expr -> expr MUL expr .)
    POW             shift and go to state 48

  ! POW             [ reduce using rule 50 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 89

    (51) expr -> expr DIVIDE expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 51 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 51 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 51 (expr -> expr DIVIDE expr .)
    MUL             reduce using rule 51 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 51 (expr -> expr DIVIDE expr .)
    INTDIVIDE       reduce using rule 51 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 51 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 51 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 51 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 51 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 51 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 51 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 51 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 51 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 51 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 51 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 51 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 51 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 51 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 51 (expr -> expr DIVIDE expr .)
    error           reduce using rule 51 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 51 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 48

  ! POW             [ reduce using rule 51 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 90

    (52) expr -> expr INTDIVIDE expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    PLUS            reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    MINUS           reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    MUL             reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    DIVIDE          reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    INTDIVIDE       reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    MODULO          reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    LE              reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    GE              reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    LT              reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    GT              reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    EQ              reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    NE              reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    LAND            reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    LOR             reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    BAND            reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    BOR             reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    RPAREN          reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    RBRACKET        reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    COMMA           reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    error           reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    RBRACE          reduce using rule 52 (expr -> expr INTDIVIDE expr .)
    POW             shift and go to state 48

  ! POW             [ reduce using rule 52 (expr -> expr INTDIVIDE expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 91

    (53) expr -> expr MODULO expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 53 (expr -> expr MODULO expr .)
    PLUS            reduce using rule 53 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 53 (expr -> expr MODULO expr .)
    MUL             reduce using rule 53 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 53 (expr -> expr MODULO expr .)
    INTDIVIDE       reduce using rule 53 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 53 (expr -> expr MODULO expr .)
    LE              reduce using rule 53 (expr -> expr MODULO expr .)
    GE              reduce using rule 53 (expr -> expr MODULO expr .)
    LT              reduce using rule 53 (expr -> expr MODULO expr .)
    GT              reduce using rule 53 (expr -> expr MODULO expr .)
    EQ              reduce using rule 53 (expr -> expr MODULO expr .)
    NE              reduce using rule 53 (expr -> expr MODULO expr .)
    LAND            reduce using rule 53 (expr -> expr MODULO expr .)
    LOR             reduce using rule 53 (expr -> expr MODULO expr .)
    BAND            reduce using rule 53 (expr -> expr MODULO expr .)
    BOR             reduce using rule 53 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 53 (expr -> expr MODULO expr .)
    RBRACKET        reduce using rule 53 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 53 (expr -> expr MODULO expr .)
    error           reduce using rule 53 (expr -> expr MODULO expr .)
    RBRACE          reduce using rule 53 (expr -> expr MODULO expr .)
    POW             shift and go to state 48

  ! POW             [ reduce using rule 53 (expr -> expr MODULO expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 92

    (54) expr -> expr POW expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 54 (expr -> expr POW expr .)
    PLUS            reduce using rule 54 (expr -> expr POW expr .)
    MINUS           reduce using rule 54 (expr -> expr POW expr .)
    MUL             reduce using rule 54 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 54 (expr -> expr POW expr .)
    INTDIVIDE       reduce using rule 54 (expr -> expr POW expr .)
    MODULO          reduce using rule 54 (expr -> expr POW expr .)
    LE              reduce using rule 54 (expr -> expr POW expr .)
    GE              reduce using rule 54 (expr -> expr POW expr .)
    LT              reduce using rule 54 (expr -> expr POW expr .)
    GT              reduce using rule 54 (expr -> expr POW expr .)
    EQ              reduce using rule 54 (expr -> expr POW expr .)
    NE              reduce using rule 54 (expr -> expr POW expr .)
    LAND            reduce using rule 54 (expr -> expr POW expr .)
    LOR             reduce using rule 54 (expr -> expr POW expr .)
    BAND            reduce using rule 54 (expr -> expr POW expr .)
    BOR             reduce using rule 54 (expr -> expr POW expr .)
    RPAREN          reduce using rule 54 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 54 (expr -> expr POW expr .)
    COMMA           reduce using rule 54 (expr -> expr POW expr .)
    error           reduce using rule 54 (expr -> expr POW expr .)
    RBRACE          reduce using rule 54 (expr -> expr POW expr .)
    POW             shift and go to state 48

  ! POW             [ reduce using rule 54 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! INTDIVIDE       [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 93

    (55) expr -> expr LE expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 55 (expr -> expr LE expr .)
    LE              reduce using rule 55 (expr -> expr LE expr .)
    GE              reduce using rule 55 (expr -> expr LE expr .)
    LT              reduce using rule 55 (expr -> expr LE expr .)
    GT              reduce using rule 55 (expr -> expr LE expr .)
    EQ              reduce using rule 55 (expr -> expr LE expr .)
    NE              reduce using rule 55 (expr -> expr LE expr .)
    LAND            reduce using rule 55 (expr -> expr LE expr .)
    LOR             reduce using rule 55 (expr -> expr LE expr .)
    BAND            reduce using rule 55 (expr -> expr LE expr .)
    BOR             reduce using rule 55 (expr -> expr LE expr .)
    RPAREN          reduce using rule 55 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 55 (expr -> expr LE expr .)
    COMMA           reduce using rule 55 (expr -> expr LE expr .)
    error           reduce using rule 55 (expr -> expr LE expr .)
    RBRACE          reduce using rule 55 (expr -> expr LE expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48

  ! PLUS            [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! INTDIVIDE       [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 55 (expr -> expr LE expr .) ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 94

    (56) expr -> expr GE expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 56 (expr -> expr GE expr .)
    LE              reduce using rule 56 (expr -> expr GE expr .)
    GE              reduce using rule 56 (expr -> expr GE expr .)
    LT              reduce using rule 56 (expr -> expr GE expr .)
    GT              reduce using rule 56 (expr -> expr GE expr .)
    EQ              reduce using rule 56 (expr -> expr GE expr .)
    NE              reduce using rule 56 (expr -> expr GE expr .)
    LAND            reduce using rule 56 (expr -> expr GE expr .)
    LOR             reduce using rule 56 (expr -> expr GE expr .)
    BAND            reduce using rule 56 (expr -> expr GE expr .)
    BOR             reduce using rule 56 (expr -> expr GE expr .)
    RPAREN          reduce using rule 56 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 56 (expr -> expr GE expr .)
    COMMA           reduce using rule 56 (expr -> expr GE expr .)
    error           reduce using rule 56 (expr -> expr GE expr .)
    RBRACE          reduce using rule 56 (expr -> expr GE expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48

  ! PLUS            [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! INTDIVIDE       [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 95

    (57) expr -> expr LT expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 57 (expr -> expr LT expr .)
    LE              reduce using rule 57 (expr -> expr LT expr .)
    GE              reduce using rule 57 (expr -> expr LT expr .)
    LT              reduce using rule 57 (expr -> expr LT expr .)
    GT              reduce using rule 57 (expr -> expr LT expr .)
    EQ              reduce using rule 57 (expr -> expr LT expr .)
    NE              reduce using rule 57 (expr -> expr LT expr .)
    LAND            reduce using rule 57 (expr -> expr LT expr .)
    LOR             reduce using rule 57 (expr -> expr LT expr .)
    BAND            reduce using rule 57 (expr -> expr LT expr .)
    BOR             reduce using rule 57 (expr -> expr LT expr .)
    RPAREN          reduce using rule 57 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 57 (expr -> expr LT expr .)
    COMMA           reduce using rule 57 (expr -> expr LT expr .)
    error           reduce using rule 57 (expr -> expr LT expr .)
    RBRACE          reduce using rule 57 (expr -> expr LT expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48

  ! PLUS            [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! INTDIVIDE       [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 57 (expr -> expr LT expr .) ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 96

    (58) expr -> expr GT expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 58 (expr -> expr GT expr .)
    LE              reduce using rule 58 (expr -> expr GT expr .)
    GE              reduce using rule 58 (expr -> expr GT expr .)
    LT              reduce using rule 58 (expr -> expr GT expr .)
    GT              reduce using rule 58 (expr -> expr GT expr .)
    EQ              reduce using rule 58 (expr -> expr GT expr .)
    NE              reduce using rule 58 (expr -> expr GT expr .)
    LAND            reduce using rule 58 (expr -> expr GT expr .)
    LOR             reduce using rule 58 (expr -> expr GT expr .)
    BAND            reduce using rule 58 (expr -> expr GT expr .)
    BOR             reduce using rule 58 (expr -> expr GT expr .)
    RPAREN          reduce using rule 58 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 58 (expr -> expr GT expr .)
    COMMA           reduce using rule 58 (expr -> expr GT expr .)
    error           reduce using rule 58 (expr -> expr GT expr .)
    RBRACE          reduce using rule 58 (expr -> expr GT expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48

  ! PLUS            [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! INTDIVIDE       [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 58 (expr -> expr GT expr .) ]
  ! LE              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 50 ]
  ! LT              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 97

    (59) expr -> expr EQ expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 59 (expr -> expr EQ expr .)
    EQ              reduce using rule 59 (expr -> expr EQ expr .)
    NE              reduce using rule 59 (expr -> expr EQ expr .)
    LAND            reduce using rule 59 (expr -> expr EQ expr .)
    LOR             reduce using rule 59 (expr -> expr EQ expr .)
    BAND            reduce using rule 59 (expr -> expr EQ expr .)
    BOR             reduce using rule 59 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 59 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 59 (expr -> expr EQ expr .)
    COMMA           reduce using rule 59 (expr -> expr EQ expr .)
    error           reduce using rule 59 (expr -> expr EQ expr .)
    RBRACE          reduce using rule 59 (expr -> expr EQ expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52

  ! PLUS            [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! INTDIVIDE       [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 59 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 98

    (60) expr -> expr NE expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 60 (expr -> expr NE expr .)
    EQ              reduce using rule 60 (expr -> expr NE expr .)
    NE              reduce using rule 60 (expr -> expr NE expr .)
    LAND            reduce using rule 60 (expr -> expr NE expr .)
    LOR             reduce using rule 60 (expr -> expr NE expr .)
    BAND            reduce using rule 60 (expr -> expr NE expr .)
    BOR             reduce using rule 60 (expr -> expr NE expr .)
    RPAREN          reduce using rule 60 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 60 (expr -> expr NE expr .)
    COMMA           reduce using rule 60 (expr -> expr NE expr .)
    error           reduce using rule 60 (expr -> expr NE expr .)
    RBRACE          reduce using rule 60 (expr -> expr NE expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52

  ! PLUS            [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! INTDIVIDE       [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 60 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 99

    (62) expr -> expr LAND expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 62 (expr -> expr LAND expr .)
    LAND            reduce using rule 62 (expr -> expr LAND expr .)
    LOR             reduce using rule 62 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 62 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 62 (expr -> expr LAND expr .)
    COMMA           reduce using rule 62 (expr -> expr LAND expr .)
    error           reduce using rule 62 (expr -> expr LAND expr .)
    RBRACE          reduce using rule 62 (expr -> expr LAND expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    BAND            shift and go to state 57
    BOR             shift and go to state 58

  ! PLUS            [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! MUL             [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! MODULO          [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! POW             [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! LE              [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! GE              [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! LT              [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! GT              [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! EQ              [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! NE              [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! BAND            [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! BOR             [ reduce using rule 62 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]


state 100

    (63) expr -> expr LOR expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 63 (expr -> expr LOR expr .)
    LOR             reduce using rule 63 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 63 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 63 (expr -> expr LOR expr .)
    COMMA           reduce using rule 63 (expr -> expr LOR expr .)
    error           reduce using rule 63 (expr -> expr LOR expr .)
    RBRACE          reduce using rule 63 (expr -> expr LOR expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    BAND            shift and go to state 57
    BOR             shift and go to state 58

  ! PLUS            [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! MUL             [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! MODULO          [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! POW             [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! LE              [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! GE              [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! LT              [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! GT              [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! EQ              [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! NE              [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! LAND            [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! BAND            [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! BOR             [ reduce using rule 63 (expr -> expr LOR expr .) ]
  ! LOR             [ shift and go to state 56 ]


state 101

    (65) expr -> expr BAND expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 65 (expr -> expr BAND expr .)
    LAND            reduce using rule 65 (expr -> expr BAND expr .)
    LOR             reduce using rule 65 (expr -> expr BAND expr .)
    BAND            reduce using rule 65 (expr -> expr BAND expr .)
    BOR             reduce using rule 65 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 65 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 65 (expr -> expr BAND expr .)
    COMMA           reduce using rule 65 (expr -> expr BAND expr .)
    error           reduce using rule 65 (expr -> expr BAND expr .)
    RBRACE          reduce using rule 65 (expr -> expr BAND expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! MUL             [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! MODULO          [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! POW             [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! LE              [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! GE              [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! LT              [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! GT              [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! EQ              [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! NE              [ reduce using rule 65 (expr -> expr BAND expr .) ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BAND            [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 58 ]


state 102

    (66) expr -> expr BOR expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            reduce using rule 66 (expr -> expr BOR expr .)
    LAND            reduce using rule 66 (expr -> expr BOR expr .)
    LOR             reduce using rule 66 (expr -> expr BOR expr .)
    BOR             reduce using rule 66 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 66 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 66 (expr -> expr BOR expr .)
    COMMA           reduce using rule 66 (expr -> expr BOR expr .)
    error           reduce using rule 66 (expr -> expr BOR expr .)
    RBRACE          reduce using rule 66 (expr -> expr BOR expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    BAND            shift and go to state 57

  ! PLUS            [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! MUL             [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! MODULO          [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! POW             [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! LE              [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! GE              [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! LT              [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! GT              [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! EQ              [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! NE              [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! BAND            [ reduce using rule 66 (expr -> expr BOR expr .) ]
  ! LAND            [ shift and go to state 55 ]
  ! LOR             [ shift and go to state 56 ]
  ! BOR             [ shift and go to state 58 ]


state 103

    (16) statement -> GOTO ID SEMI .

    BREAK           reduce using rule 16 (statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 16 (statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 16 (statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 16 (statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 16 (statement -> GOTO ID SEMI .)
    NULL            reduce using rule 16 (statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 16 (statement -> GOTO ID SEMI .)
    ID              reduce using rule 16 (statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 16 (statement -> GOTO ID SEMI .)
    FUNCTION        reduce using rule 16 (statement -> GOTO ID SEMI .)
    STRUCTURE       reduce using rule 16 (statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 16 (statement -> GOTO ID SEMI .)
    DO              reduce using rule 16 (statement -> GOTO ID SEMI .)
    IF              reduce using rule 16 (statement -> GOTO ID SEMI .)
    INTEGER         reduce using rule 16 (statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 16 (statement -> GOTO ID SEMI .)
    BOOL            reduce using rule 16 (statement -> GOTO ID SEMI .)
    STRING          reduce using rule 16 (statement -> GOTO ID SEMI .)
    VOID            reduce using rule 16 (statement -> GOTO ID SEMI .)
    DATATYPE        reduce using rule 16 (statement -> GOTO ID SEMI .)
    $end            reduce using rule 16 (statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 16 (statement -> GOTO ID SEMI .)


state 104

    (82) expr -> ID LBRACKET expr . RBRACKET
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    RBRACKET        shift and go to state 125
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 105

    (42) var_declaration -> ID id EQUALS . LBRACE args RBRACE SEMI

    LBRACE          shift and go to state 126


state 106

    (43) assign -> ID EQUALS expr . SEMI
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            shift and go to state 127
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 107

    (44) assign -> ID EQUALS LBRACE . args RBRACE SEMI
    (37) args -> .
    (38) args -> . expr
    (39) args -> . args COMMA expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    RBRACE          reduce using rule 37 (args -> .)
    COMMA           reduce using rule 37 (args -> .)
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    args                           shift and go to state 128
    expr                           shift and go to state 110
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 108

    (45) assign -> ID DOT ID . EQUALS expr SEMI

    EQUALS          shift and go to state 129


state 109

    (36) expr -> id LPAREN args . RPAREN
    (39) args -> args . COMMA expr

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 131


state 110

    (38) args -> expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    RPAREN          reduce using rule 38 (args -> expr .)
    COMMA           reduce using rule 38 (args -> expr .)
    RBRACE          reduce using rule 38 (args -> expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 111

    (74) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    INTDIVIDE       reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    BAND            reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    BOR             reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    error           reduce using rule 74 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 74 (expr -> LPAREN expr RPAREN .)


state 112

    (80) expr -> datatype LBRACKET RBRACKET . id
    (81) expr -> datatype LBRACKET RBRACKET . id EQUALS datatype LBRACKET INTEGER RBRACKET
    (85) id -> . ID

    ID              shift and go to state 62

    id                             shift and go to state 132

state 113

    (40) var_declaration -> datatype id EQUALS . expr SEMI
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    datatype                       shift and go to state 70
    id                             shift and go to state 17
    expr                           shift and go to state 133
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25

state 114

    (41) var_declaration -> datatype id SEMI .

    BREAK           reduce using rule 41 (var_declaration -> datatype id SEMI .)
    CONTINUE        reduce using rule 41 (var_declaration -> datatype id SEMI .)
    GOTO            reduce using rule 41 (var_declaration -> datatype id SEMI .)
    MINUS           reduce using rule 41 (var_declaration -> datatype id SEMI .)
    LNOT            reduce using rule 41 (var_declaration -> datatype id SEMI .)
    NULL            reduce using rule 41 (var_declaration -> datatype id SEMI .)
    LPAREN          reduce using rule 41 (var_declaration -> datatype id SEMI .)
    ID              reduce using rule 41 (var_declaration -> datatype id SEMI .)
    RETURN          reduce using rule 41 (var_declaration -> datatype id SEMI .)
    FUNCTION        reduce using rule 41 (var_declaration -> datatype id SEMI .)
    STRUCTURE       reduce using rule 41 (var_declaration -> datatype id SEMI .)
    WHILE           reduce using rule 41 (var_declaration -> datatype id SEMI .)
    DO              reduce using rule 41 (var_declaration -> datatype id SEMI .)
    IF              reduce using rule 41 (var_declaration -> datatype id SEMI .)
    INTEGER         reduce using rule 41 (var_declaration -> datatype id SEMI .)
    DOUBLE          reduce using rule 41 (var_declaration -> datatype id SEMI .)
    BOOL            reduce using rule 41 (var_declaration -> datatype id SEMI .)
    STRING          reduce using rule 41 (var_declaration -> datatype id SEMI .)
    VOID            reduce using rule 41 (var_declaration -> datatype id SEMI .)
    DATATYPE        reduce using rule 41 (var_declaration -> datatype id SEMI .)
    $end            reduce using rule 41 (var_declaration -> datatype id SEMI .)
    RBRACE          reduce using rule 41 (var_declaration -> datatype id SEMI .)


state 115

    (46) return -> RETURN expr SEMI .

    BREAK           reduce using rule 46 (return -> RETURN expr SEMI .)
    CONTINUE        reduce using rule 46 (return -> RETURN expr SEMI .)
    GOTO            reduce using rule 46 (return -> RETURN expr SEMI .)
    MINUS           reduce using rule 46 (return -> RETURN expr SEMI .)
    LNOT            reduce using rule 46 (return -> RETURN expr SEMI .)
    NULL            reduce using rule 46 (return -> RETURN expr SEMI .)
    LPAREN          reduce using rule 46 (return -> RETURN expr SEMI .)
    ID              reduce using rule 46 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 46 (return -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 46 (return -> RETURN expr SEMI .)
    STRUCTURE       reduce using rule 46 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 46 (return -> RETURN expr SEMI .)
    DO              reduce using rule 46 (return -> RETURN expr SEMI .)
    IF              reduce using rule 46 (return -> RETURN expr SEMI .)
    INTEGER         reduce using rule 46 (return -> RETURN expr SEMI .)
    DOUBLE          reduce using rule 46 (return -> RETURN expr SEMI .)
    BOOL            reduce using rule 46 (return -> RETURN expr SEMI .)
    STRING          reduce using rule 46 (return -> RETURN expr SEMI .)
    VOID            reduce using rule 46 (return -> RETURN expr SEMI .)
    DATATYPE        reduce using rule 46 (return -> RETURN expr SEMI .)
    $end            reduce using rule 46 (return -> RETURN expr SEMI .)
    RBRACE          reduce using rule 46 (return -> RETURN expr SEMI .)


state 116

    (4) func_declaration -> FUNCTION datatype id . LPAREN params RPAREN body_block

    LPAREN          shift and go to state 134


state 117

    (27) struct_declaration -> STRUCTURE id LBRACE . struct_params RBRACE
    (28) struct_params -> . struct_param
    (29) struct_params -> . struct_params COMMA struct_param
    (30) struct_param -> . DATATYPE ID
    (31) struct_param -> . func_declaration
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block

    DATATYPE        shift and go to state 137
    FUNCTION        shift and go to state 30

    struct_params                  shift and go to state 135
    struct_param                   shift and go to state 136
    func_declaration               shift and go to state 138

state 118

    (19) while -> WHILE conditional body_block .

    BREAK           reduce using rule 19 (while -> WHILE conditional body_block .)
    CONTINUE        reduce using rule 19 (while -> WHILE conditional body_block .)
    GOTO            reduce using rule 19 (while -> WHILE conditional body_block .)
    MINUS           reduce using rule 19 (while -> WHILE conditional body_block .)
    LNOT            reduce using rule 19 (while -> WHILE conditional body_block .)
    NULL            reduce using rule 19 (while -> WHILE conditional body_block .)
    LPAREN          reduce using rule 19 (while -> WHILE conditional body_block .)
    ID              reduce using rule 19 (while -> WHILE conditional body_block .)
    RETURN          reduce using rule 19 (while -> WHILE conditional body_block .)
    FUNCTION        reduce using rule 19 (while -> WHILE conditional body_block .)
    STRUCTURE       reduce using rule 19 (while -> WHILE conditional body_block .)
    WHILE           reduce using rule 19 (while -> WHILE conditional body_block .)
    DO              reduce using rule 19 (while -> WHILE conditional body_block .)
    IF              reduce using rule 19 (while -> WHILE conditional body_block .)
    INTEGER         reduce using rule 19 (while -> WHILE conditional body_block .)
    DOUBLE          reduce using rule 19 (while -> WHILE conditional body_block .)
    BOOL            reduce using rule 19 (while -> WHILE conditional body_block .)
    STRING          reduce using rule 19 (while -> WHILE conditional body_block .)
    VOID            reduce using rule 19 (while -> WHILE conditional body_block .)
    DATATYPE        reduce using rule 19 (while -> WHILE conditional body_block .)
    $end            reduce using rule 19 (while -> WHILE conditional body_block .)
    RBRACE          reduce using rule 19 (while -> WHILE conditional body_block .)


state 119

    (23) conditional -> LPAREN expr . RPAREN
    (26) conditional -> LPAREN expr . error
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    RPAREN          shift and go to state 139
    error           shift and go to state 140
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 120

    (25) conditional -> LPAREN error . RPAREN

    RPAREN          shift and go to state 141


state 121

    (24) conditional -> error expr . RPAREN
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 122

    (20) while -> DO body_block WHILE . conditional SEMI
    (23) conditional -> . LPAREN expr RPAREN
    (24) conditional -> . error expr RPAREN
    (25) conditional -> . LPAREN error RPAREN
    (26) conditional -> . LPAREN expr error

    LPAREN          shift and go to state 81
    error           shift and go to state 82

    conditional                    shift and go to state 143

state 123

    (3) body_block -> LBRACE scope . RBRACE
    (5) scope -> scope . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (40) var_declaration -> . datatype id EQUALS expr SEMI
    (41) var_declaration -> . datatype id SEMI
    (42) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (46) return -> . RETURN expr SEMI
    (47) return -> . RETURN SEMI
    (43) assign -> . ID EQUALS expr SEMI
    (44) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (45) assign -> . ID DOT ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (27) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE conditional body_block
    (20) while -> . DO body_block WHILE conditional SEMI
    (83) goto_mark -> . ID COLON
    (21) if-else -> . IF conditional body_block
    (22) if-else -> . IF conditional body_block ELSE body_block
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    RBRACE          shift and go to state 144
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    GOTO            shift and go to state 13
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 14
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    statement                      shift and go to state 40
    expr                           shift and go to state 4
    var_declaration                shift and go to state 5
    return                         shift and go to state 6
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9
    while                          shift and go to state 10
    goto_mark                      shift and go to state 15
    if-else                        shift and go to state 16
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 27

state 124

    (21) if-else -> IF conditional body_block .
    (22) if-else -> IF conditional body_block . ELSE body_block

    BREAK           reduce using rule 21 (if-else -> IF conditional body_block .)
    CONTINUE        reduce using rule 21 (if-else -> IF conditional body_block .)
    GOTO            reduce using rule 21 (if-else -> IF conditional body_block .)
    MINUS           reduce using rule 21 (if-else -> IF conditional body_block .)
    LNOT            reduce using rule 21 (if-else -> IF conditional body_block .)
    NULL            reduce using rule 21 (if-else -> IF conditional body_block .)
    LPAREN          reduce using rule 21 (if-else -> IF conditional body_block .)
    ID              reduce using rule 21 (if-else -> IF conditional body_block .)
    RETURN          reduce using rule 21 (if-else -> IF conditional body_block .)
    FUNCTION        reduce using rule 21 (if-else -> IF conditional body_block .)
    STRUCTURE       reduce using rule 21 (if-else -> IF conditional body_block .)
    WHILE           reduce using rule 21 (if-else -> IF conditional body_block .)
    DO              reduce using rule 21 (if-else -> IF conditional body_block .)
    IF              reduce using rule 21 (if-else -> IF conditional body_block .)
    INTEGER         reduce using rule 21 (if-else -> IF conditional body_block .)
    DOUBLE          reduce using rule 21 (if-else -> IF conditional body_block .)
    BOOL            reduce using rule 21 (if-else -> IF conditional body_block .)
    STRING          reduce using rule 21 (if-else -> IF conditional body_block .)
    VOID            reduce using rule 21 (if-else -> IF conditional body_block .)
    DATATYPE        reduce using rule 21 (if-else -> IF conditional body_block .)
    $end            reduce using rule 21 (if-else -> IF conditional body_block .)
    RBRACE          reduce using rule 21 (if-else -> IF conditional body_block .)
    ELSE            shift and go to state 145


state 125

    (82) expr -> ID LBRACKET expr RBRACKET .

    SEMI            reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    MUL             reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    INTDIVIDE       reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    POW             reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    LE              reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    GE              reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    LT              reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    GT              reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    EQ              reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    NE              reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    LAND            reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    LOR             reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    BAND            reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    BOR             reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    error           reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 82 (expr -> ID LBRACKET expr RBRACKET .)


state 126

    (42) var_declaration -> ID id EQUALS LBRACE . args RBRACE SEMI
    (37) args -> .
    (38) args -> . expr
    (39) args -> . args COMMA expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    RBRACE          reduce using rule 37 (args -> .)
    COMMA           reduce using rule 37 (args -> .)
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    id                             shift and go to state 17
    args                           shift and go to state 146
    expr                           shift and go to state 110
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 127

    (43) assign -> ID EQUALS expr SEMI .

    BREAK           reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    CONTINUE        reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    GOTO            reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    MINUS           reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    LNOT            reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    NULL            reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    ID              reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    RETURN          reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    WHILE           reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    DO              reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    IF              reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    BOOL            reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    STRING          reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    VOID            reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    DATATYPE        reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    $end            reduce using rule 43 (assign -> ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 43 (assign -> ID EQUALS expr SEMI .)


state 128

    (44) assign -> ID EQUALS LBRACE args . RBRACE SEMI
    (39) args -> args . COMMA expr

    RBRACE          shift and go to state 147
    COMMA           shift and go to state 131


state 129

    (45) assign -> ID DOT ID EQUALS . expr SEMI
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 148
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 130

    (36) expr -> id LPAREN args RPAREN .

    SEMI            reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    PLUS            reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    MINUS           reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    MUL             reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    DIVIDE          reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    INTDIVIDE       reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    MODULO          reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    POW             reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    LE              reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    GE              reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    LT              reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    GT              reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    EQ              reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    NE              reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    LAND            reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    LOR             reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    BAND            reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    BOR             reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    RPAREN          reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    RBRACKET        reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    COMMA           reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    error           reduce using rule 36 (expr -> id LPAREN args RPAREN .)
    RBRACE          reduce using rule 36 (expr -> id LPAREN args RPAREN .)


state 131

    (39) args -> args COMMA . expr
    (36) expr -> . id LPAREN args RPAREN
    (48) expr -> . expr PLUS expr
    (49) expr -> . expr MINUS expr
    (50) expr -> . expr MUL expr
    (51) expr -> . expr DIVIDE expr
    (52) expr -> . expr INTDIVIDE expr
    (53) expr -> . expr MODULO expr
    (54) expr -> . expr POW expr
    (55) expr -> . expr LE expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LT expr
    (58) expr -> . expr GT expr
    (59) expr -> . expr EQ expr
    (60) expr -> . expr NE expr
    (61) expr -> . MINUS expr
    (62) expr -> . expr LAND expr
    (63) expr -> . expr LOR expr
    (64) expr -> . LNOT expr
    (65) expr -> . expr BAND expr
    (66) expr -> . expr BOR expr
    (67) expr -> . id
    (68) expr -> . int
    (69) expr -> . double
    (70) expr -> . bool
    (71) expr -> . str
    (72) expr -> . void
    (73) expr -> . NULL
    (74) expr -> . LPAREN expr RPAREN
    (80) expr -> . datatype LBRACKET RBRACKET id
    (81) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (82) expr -> . ID LBRACKET expr RBRACKET
    (85) id -> . ID
    (75) int -> . INTEGER
    (76) double -> . DOUBLE
    (77) bool -> . BOOL
    (78) str -> . STRING
    (79) void -> . VOID
    (84) datatype -> . DATATYPE

    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    ID              shift and go to state 71
    INTEGER         shift and go to state 28
    DOUBLE          shift and go to state 35
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    VOID            shift and go to state 38
    DATATYPE        shift and go to state 39

    expr                           shift and go to state 149
    id                             shift and go to state 17
    int                            shift and go to state 21
    double                         shift and go to state 22
    bool                           shift and go to state 23
    str                            shift and go to state 24
    void                           shift and go to state 25
    datatype                       shift and go to state 70

state 132

    (80) expr -> datatype LBRACKET RBRACKET id .
    (81) expr -> datatype LBRACKET RBRACKET id . EQUALS datatype LBRACKET INTEGER RBRACKET

    SEMI            reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    PLUS            reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    MINUS           reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    MUL             reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    DIVIDE          reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    INTDIVIDE       reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    MODULO          reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    POW             reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    LE              reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    GE              reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    LT              reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    GT              reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    EQ              reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    NE              reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    LAND            reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    LOR             reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    BAND            reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    BOR             reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    RPAREN          reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    RBRACKET        reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    COMMA           reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    error           reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    RBRACE          reduce using rule 80 (expr -> datatype LBRACKET RBRACKET id .)
    EQUALS          shift and go to state 150


state 133

    (40) var_declaration -> datatype id EQUALS expr . SEMI
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            shift and go to state 151
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 134

    (4) func_declaration -> FUNCTION datatype id LPAREN . params RPAREN body_block
    (32) params -> .
    (33) params -> . param
    (34) params -> . params COMMA param
    (35) param -> . DATATYPE ID

    RPAREN          reduce using rule 32 (params -> .)
    COMMA           reduce using rule 32 (params -> .)
    DATATYPE        shift and go to state 154

    params                         shift and go to state 152
    param                          shift and go to state 153

state 135

    (27) struct_declaration -> STRUCTURE id LBRACE struct_params . RBRACE
    (29) struct_params -> struct_params . COMMA struct_param

    RBRACE          shift and go to state 155
    COMMA           shift and go to state 156


state 136

    (28) struct_params -> struct_param .

    RBRACE          reduce using rule 28 (struct_params -> struct_param .)
    COMMA           reduce using rule 28 (struct_params -> struct_param .)


state 137

    (30) struct_param -> DATATYPE . ID

    ID              shift and go to state 157


state 138

    (31) struct_param -> func_declaration .

    RBRACE          reduce using rule 31 (struct_param -> func_declaration .)
    COMMA           reduce using rule 31 (struct_param -> func_declaration .)


state 139

    (23) conditional -> LPAREN expr RPAREN .

    LBRACE          reduce using rule 23 (conditional -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 23 (conditional -> LPAREN expr RPAREN .)


state 140

    (26) conditional -> LPAREN expr error .

    LBRACE          reduce using rule 26 (conditional -> LPAREN expr error .)
    SEMI            reduce using rule 26 (conditional -> LPAREN expr error .)


state 141

    (25) conditional -> LPAREN error RPAREN .

    LBRACE          reduce using rule 25 (conditional -> LPAREN error RPAREN .)
    SEMI            reduce using rule 25 (conditional -> LPAREN error RPAREN .)


state 142

    (24) conditional -> error expr RPAREN .

    LBRACE          reduce using rule 24 (conditional -> error expr RPAREN .)
    SEMI            reduce using rule 24 (conditional -> error expr RPAREN .)


state 143

    (20) while -> DO body_block WHILE conditional . SEMI

    SEMI            shift and go to state 158


state 144

    (3) body_block -> LBRACE scope RBRACE .

    WHILE           reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    BREAK           reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    CONTINUE        reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    GOTO            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    MINUS           reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    LNOT            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    NULL            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    LPAREN          reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    ID              reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    RETURN          reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    FUNCTION        reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    STRUCTURE       reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    DO              reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    IF              reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    INTEGER         reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    DOUBLE          reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    BOOL            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    STRING          reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    VOID            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    DATATYPE        reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    $end            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    RBRACE          reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    ELSE            reduce using rule 3 (body_block -> LBRACE scope RBRACE .)
    COMMA           reduce using rule 3 (body_block -> LBRACE scope RBRACE .)


state 145

    (22) if-else -> IF conditional body_block ELSE . body_block
    (3) body_block -> . LBRACE scope RBRACE

    LBRACE          shift and go to state 84

    body_block                     shift and go to state 159

state 146

    (42) var_declaration -> ID id EQUALS LBRACE args . RBRACE SEMI
    (39) args -> args . COMMA expr

    RBRACE          shift and go to state 160
    COMMA           shift and go to state 131


state 147

    (44) assign -> ID EQUALS LBRACE args RBRACE . SEMI

    SEMI            shift and go to state 161


state 148

    (45) assign -> ID DOT ID EQUALS expr . SEMI
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    SEMI            shift and go to state 162
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 149

    (39) args -> args COMMA expr .
    (48) expr -> expr . PLUS expr
    (49) expr -> expr . MINUS expr
    (50) expr -> expr . MUL expr
    (51) expr -> expr . DIVIDE expr
    (52) expr -> expr . INTDIVIDE expr
    (53) expr -> expr . MODULO expr
    (54) expr -> expr . POW expr
    (55) expr -> expr . LE expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LT expr
    (58) expr -> expr . GT expr
    (59) expr -> expr . EQ expr
    (60) expr -> expr . NE expr
    (62) expr -> expr . LAND expr
    (63) expr -> expr . LOR expr
    (65) expr -> expr . BAND expr
    (66) expr -> expr . BOR expr

    RPAREN          reduce using rule 39 (args -> args COMMA expr .)
    COMMA           reduce using rule 39 (args -> args COMMA expr .)
    RBRACE          reduce using rule 39 (args -> args COMMA expr .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MUL             shift and go to state 44
    DIVIDE          shift and go to state 45
    INTDIVIDE       shift and go to state 46
    MODULO          shift and go to state 47
    POW             shift and go to state 48
    LE              shift and go to state 49
    GE              shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LAND            shift and go to state 55
    LOR             shift and go to state 56
    BAND            shift and go to state 57
    BOR             shift and go to state 58


state 150

    (81) expr -> datatype LBRACKET RBRACKET id EQUALS . datatype LBRACKET INTEGER RBRACKET
    (84) datatype -> . DATATYPE

    DATATYPE        shift and go to state 39

    datatype                       shift and go to state 163

state 151

    (40) var_declaration -> datatype id EQUALS expr SEMI .

    BREAK           reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    CONTINUE        reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    GOTO            reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    MINUS           reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    LNOT            reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    NULL            reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    LPAREN          reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    ID              reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    RETURN          reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    FUNCTION        reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    WHILE           reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    DO              reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    IF              reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    INTEGER         reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    DOUBLE          reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    BOOL            reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRING          reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    VOID            reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    DATATYPE        reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    $end            reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)
    RBRACE          reduce using rule 40 (var_declaration -> datatype id EQUALS expr SEMI .)


state 152

    (4) func_declaration -> FUNCTION datatype id LPAREN params . RPAREN body_block
    (34) params -> params . COMMA param

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 165


state 153

    (33) params -> param .

    RPAREN          reduce using rule 33 (params -> param .)
    COMMA           reduce using rule 33 (params -> param .)


state 154

    (35) param -> DATATYPE . ID

    ID              shift and go to state 166


state 155

    (27) struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .

    BREAK           reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    CONTINUE        reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    GOTO            reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    MINUS           reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    LNOT            reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    NULL            reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    LPAREN          reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    ID              reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    RETURN          reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    FUNCTION        reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    STRUCTURE       reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    WHILE           reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DO              reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    IF              reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    INTEGER         reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DOUBLE          reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    BOOL            reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    STRING          reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    VOID            reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DATATYPE        reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    $end            reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    RBRACE          reduce using rule 27 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)


state 156

    (29) struct_params -> struct_params COMMA . struct_param
    (30) struct_param -> . DATATYPE ID
    (31) struct_param -> . func_declaration
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block

    DATATYPE        shift and go to state 137
    FUNCTION        shift and go to state 30

    struct_param                   shift and go to state 167
    func_declaration               shift and go to state 138

state 157

    (30) struct_param -> DATATYPE ID .

    RBRACE          reduce using rule 30 (struct_param -> DATATYPE ID .)
    COMMA           reduce using rule 30 (struct_param -> DATATYPE ID .)


state 158

    (20) while -> DO body_block WHILE conditional SEMI .

    BREAK           reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    CONTINUE        reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    GOTO            reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    MINUS           reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    LNOT            reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    NULL            reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    LPAREN          reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    ID              reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    RETURN          reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    FUNCTION        reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    STRUCTURE       reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    WHILE           reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    DO              reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    IF              reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    INTEGER         reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    DOUBLE          reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    BOOL            reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    STRING          reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    VOID            reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    DATATYPE        reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    $end            reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)
    RBRACE          reduce using rule 20 (while -> DO body_block WHILE conditional SEMI .)


state 159

    (22) if-else -> IF conditional body_block ELSE body_block .

    BREAK           reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    CONTINUE        reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    GOTO            reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    MINUS           reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    LNOT            reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    NULL            reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    LPAREN          reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    ID              reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    RETURN          reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    FUNCTION        reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    STRUCTURE       reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    WHILE           reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    DO              reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    IF              reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    INTEGER         reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    DOUBLE          reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    BOOL            reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    STRING          reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    VOID            reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    DATATYPE        reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    $end            reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)
    RBRACE          reduce using rule 22 (if-else -> IF conditional body_block ELSE body_block .)


state 160

    (42) var_declaration -> ID id EQUALS LBRACE args RBRACE . SEMI

    SEMI            shift and go to state 168


state 161

    (44) assign -> ID EQUALS LBRACE args RBRACE SEMI .

    BREAK           reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    CONTINUE        reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    GOTO            reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    MINUS           reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    LNOT            reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    NULL            reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    LPAREN          reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    ID              reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    RETURN          reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    FUNCTION        reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    STRUCTURE       reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    WHILE           reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DO              reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    IF              reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    INTEGER         reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DOUBLE          reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    BOOL            reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    STRING          reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    VOID            reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DATATYPE        reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    $end            reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    RBRACE          reduce using rule 44 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)


state 162

    (45) assign -> ID DOT ID EQUALS expr SEMI .

    BREAK           reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    CONTINUE        reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    GOTO            reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    MINUS           reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    LNOT            reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    NULL            reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    ID              reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    RETURN          reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    WHILE           reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    DO              reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    IF              reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    BOOL            reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    STRING          reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    VOID            reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    DATATYPE        reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    $end            reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 45 (assign -> ID DOT ID EQUALS expr SEMI .)


state 163

    (81) expr -> datatype LBRACKET RBRACKET id EQUALS datatype . LBRACKET INTEGER RBRACKET

    LBRACKET        shift and go to state 169


state 164

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN . body_block
    (3) body_block -> . LBRACE scope RBRACE

    LBRACE          shift and go to state 84

    body_block                     shift and go to state 170

state 165

    (34) params -> params COMMA . param
    (35) param -> . DATATYPE ID

    DATATYPE        shift and go to state 154

    param                          shift and go to state 171

state 166

    (35) param -> DATATYPE ID .

    RPAREN          reduce using rule 35 (param -> DATATYPE ID .)
    COMMA           reduce using rule 35 (param -> DATATYPE ID .)


state 167

    (29) struct_params -> struct_params COMMA struct_param .

    RBRACE          reduce using rule 29 (struct_params -> struct_params COMMA struct_param .)
    COMMA           reduce using rule 29 (struct_params -> struct_params COMMA struct_param .)


state 168

    (42) var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .

    BREAK           reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    CONTINUE        reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    GOTO            reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    MINUS           reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    LNOT            reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    NULL            reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    LPAREN          reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    ID              reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    RETURN          reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    FUNCTION        reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    STRUCTURE       reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    WHILE           reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DO              reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    IF              reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    INTEGER         reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DOUBLE          reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    BOOL            reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    STRING          reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    VOID            reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DATATYPE        reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    $end            reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    RBRACE          reduce using rule 42 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)


state 169

    (81) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET . INTEGER RBRACKET

    INTEGER         shift and go to state 172


state 170

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .

    BREAK           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    CONTINUE        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    GOTO            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    MINUS           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    LNOT            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    NULL            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    LPAREN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    ID              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    RETURN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    FUNCTION        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    STRUCTURE       reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    WHILE           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    DO              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    IF              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    INTEGER         reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    DOUBLE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    BOOL            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    STRING          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    VOID            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    DATATYPE        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    $end            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    RBRACE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    COMMA           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)


state 171

    (34) params -> params COMMA param .

    RPAREN          reduce using rule 34 (params -> params COMMA param .)
    COMMA           reduce using rule 34 (params -> params COMMA param .)


state 172

    (81) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 173


state 173

    (81) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .

    SEMI            reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    PLUS            reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    MINUS           reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    MUL             reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    DIVIDE          reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    INTDIVIDE       reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    MODULO          reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    POW             reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LE              reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    GE              reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LT              reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    GT              reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    EQ              reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    NE              reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LAND            reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LOR             reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    BAND            reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    BOR             reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    RPAREN          reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    RBRACKET        reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    COMMA           reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    error           reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    RBRACE          reduce using rule 81 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)

