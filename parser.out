Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ERROR
    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> basic_block
Rule 3     basic_block -> stmt_list
Rule 4     func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
Rule 5     stmt_list -> stmt_list statement
Rule 6     stmt_list -> statement
Rule 7     statement -> expr SEMI
Rule 8     statement -> var_declaration
Rule 9     statement -> return
Rule 10    statement -> assign
Rule 11    statement -> func_declaration
Rule 12    statement -> struct_declaration
Rule 13    statement -> while
Rule 14    statement -> BREAK SEMI
Rule 15    statement -> CONTINUE SEMI
Rule 16    statement -> GOTO ID SEMI
Rule 17    statement -> goto_mark
Rule 18    statement -> if-else
Rule 19    while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 20    while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
Rule 21    if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 22    if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 23    struct_declaration -> STRUCTURE id LBRACE params RBRACE
Rule 24    expr -> ID DOT ID
Rule 25    params -> <empty>
Rule 26    params -> param
Rule 27    params -> params COMMA param
Rule 28    param -> DATATYPE ID
Rule 29    expr -> ID LPAREN args RPAREN
Rule 30    args -> <empty>
Rule 31    args -> expr
Rule 32    args -> args COMMA expr
Rule 33    var_declaration -> datatype id EQUALS expr SEMI
Rule 34    assign -> ID EQUALS expr SEMI
Rule 35    return -> RETURN expr SEMI
Rule 36    return -> RETURN SEMI
Rule 37    expr -> expr PLUS expr
Rule 38    expr -> expr MINUS expr
Rule 39    expr -> expr MUL expr
Rule 40    expr -> expr DIVIDE expr
Rule 41    expr -> expr INTDIVIDE expr
Rule 42    expr -> expr MODULO expr
Rule 43    expr -> expr POW expr
Rule 44    expr -> expr LE expr
Rule 45    expr -> expr GE expr
Rule 46    expr -> expr LT expr
Rule 47    expr -> expr GT expr
Rule 48    expr -> expr EQ expr
Rule 49    expr -> expr NE expr
Rule 50    expr -> MINUS expr
Rule 51    expr -> expr LAND expr
Rule 52    expr -> expr LOR expr
Rule 53    expr -> LNOT expr
Rule 54    expr -> id
Rule 55    expr -> INTEGER
Rule 56    expr -> DOUBLE
Rule 57    expr -> BOOLEAN
Rule 58    expr -> STRING
Rule 59    expr -> NULL
Rule 60    expr -> LPAREN expr RPAREN
Rule 61    expr -> datatype LBRACKET expr RBRACKET
Rule 62    expr -> ID LBRACKET expr RBRACKET
Rule 63    goto_mark -> ID COLON
Rule 64    datatype -> DATATYPE
Rule 65    id -> ID

Terminals, with rules where they appear

BOOLEAN              : 57
BREAK                : 14
COLON                : 63
COMMA                : 27 32
COMMENT              : 
CONTINUE             : 15
DATATYPE             : 28 64
DIVIDE               : 40
DO                   : 20
DOT                  : 24
DOUBLE               : 56
ELSE                 : 22
EQ                   : 48
EQUALS               : 33 34
ERROR                : 
FUNCTION             : 4
GE                   : 45
GOTO                 : 16
GT                   : 47
ID                   : 16 24 24 28 29 34 62 63 65
IF                   : 21 22
INTDIVIDE            : 41
INTEGER              : 55
LAND                 : 51
LBRACE               : 4 19 20 21 22 22 23
LBRACKET             : 61 62
LE                   : 44
LNOT                 : 53
LOR                  : 52
LPAREN               : 4 19 20 21 22 29 60
LT                   : 46
MINUS                : 38 50
MODULO               : 42
MUL                  : 39
NE                   : 49
NEWLINE              : 
NULL                 : 59
PLUS                 : 37
POW                  : 43
RBRACE               : 4 19 20 21 22 22 23
RBRACKET             : 61 62
RETURN               : 35 36
RPAREN               : 4 19 20 21 22 29 60
SEMI                 : 7 14 15 16 20 33 34 35 36
STRING               : 58
STRUCTURE            : 23
WHILE                : 19 20
error                : 

Nonterminals, with rules where they appear

args                 : 29 32
assign               : 10
basic_block          : 2 4
datatype             : 4 33 61
expr                 : 7 19 20 21 22 31 32 33 34 35 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51 51 52 52 53 60 61 62
func_declaration     : 11
goto_mark            : 17
id                   : 4 23 33 54
if-else              : 18
param                : 26 27
params               : 4 23 27
program              : 0
return               : 9
statement            : 5 6
stmt_list            : 3 5 19 20 21 22 22
struct_declaration   : 12
var_declaration      : 8
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . basic_block
    (3) basic_block -> . stmt_list
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    $end            reduce using rule 1 (program -> .)
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    program                        shift and go to state 1
    basic_block                    shift and go to state 2
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (2) program -> basic_block .

    $end            reduce using rule 2 (program -> basic_block .)


state 3

    (3) basic_block -> stmt_list .
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    $end            reduce using rule 3 (basic_block -> stmt_list .)
    RBRACE          reduce using rule 3 (basic_block -> stmt_list .)
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    statement                      shift and go to state 35
    expr                           shift and go to state 5
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 4

    (6) stmt_list -> statement .

    BREAK           reduce using rule 6 (stmt_list -> statement .)
    CONTINUE        reduce using rule 6 (stmt_list -> statement .)
    GOTO            reduce using rule 6 (stmt_list -> statement .)
    ID              reduce using rule 6 (stmt_list -> statement .)
    MINUS           reduce using rule 6 (stmt_list -> statement .)
    LNOT            reduce using rule 6 (stmt_list -> statement .)
    INTEGER         reduce using rule 6 (stmt_list -> statement .)
    DOUBLE          reduce using rule 6 (stmt_list -> statement .)
    BOOLEAN         reduce using rule 6 (stmt_list -> statement .)
    STRING          reduce using rule 6 (stmt_list -> statement .)
    NULL            reduce using rule 6 (stmt_list -> statement .)
    LPAREN          reduce using rule 6 (stmt_list -> statement .)
    RETURN          reduce using rule 6 (stmt_list -> statement .)
    FUNCTION        reduce using rule 6 (stmt_list -> statement .)
    STRUCTURE       reduce using rule 6 (stmt_list -> statement .)
    WHILE           reduce using rule 6 (stmt_list -> statement .)
    DO              reduce using rule 6 (stmt_list -> statement .)
    IF              reduce using rule 6 (stmt_list -> statement .)
    DATATYPE        reduce using rule 6 (stmt_list -> statement .)
    $end            reduce using rule 6 (stmt_list -> statement .)
    RBRACE          reduce using rule 6 (stmt_list -> statement .)


state 5

    (7) statement -> expr . SEMI
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 6

    (8) statement -> var_declaration .

    BREAK           reduce using rule 8 (statement -> var_declaration .)
    CONTINUE        reduce using rule 8 (statement -> var_declaration .)
    GOTO            reduce using rule 8 (statement -> var_declaration .)
    ID              reduce using rule 8 (statement -> var_declaration .)
    MINUS           reduce using rule 8 (statement -> var_declaration .)
    LNOT            reduce using rule 8 (statement -> var_declaration .)
    INTEGER         reduce using rule 8 (statement -> var_declaration .)
    DOUBLE          reduce using rule 8 (statement -> var_declaration .)
    BOOLEAN         reduce using rule 8 (statement -> var_declaration .)
    STRING          reduce using rule 8 (statement -> var_declaration .)
    NULL            reduce using rule 8 (statement -> var_declaration .)
    LPAREN          reduce using rule 8 (statement -> var_declaration .)
    RETURN          reduce using rule 8 (statement -> var_declaration .)
    FUNCTION        reduce using rule 8 (statement -> var_declaration .)
    STRUCTURE       reduce using rule 8 (statement -> var_declaration .)
    WHILE           reduce using rule 8 (statement -> var_declaration .)
    DO              reduce using rule 8 (statement -> var_declaration .)
    IF              reduce using rule 8 (statement -> var_declaration .)
    DATATYPE        reduce using rule 8 (statement -> var_declaration .)
    $end            reduce using rule 8 (statement -> var_declaration .)
    RBRACE          reduce using rule 8 (statement -> var_declaration .)


state 7

    (9) statement -> return .

    BREAK           reduce using rule 9 (statement -> return .)
    CONTINUE        reduce using rule 9 (statement -> return .)
    GOTO            reduce using rule 9 (statement -> return .)
    ID              reduce using rule 9 (statement -> return .)
    MINUS           reduce using rule 9 (statement -> return .)
    LNOT            reduce using rule 9 (statement -> return .)
    INTEGER         reduce using rule 9 (statement -> return .)
    DOUBLE          reduce using rule 9 (statement -> return .)
    BOOLEAN         reduce using rule 9 (statement -> return .)
    STRING          reduce using rule 9 (statement -> return .)
    NULL            reduce using rule 9 (statement -> return .)
    LPAREN          reduce using rule 9 (statement -> return .)
    RETURN          reduce using rule 9 (statement -> return .)
    FUNCTION        reduce using rule 9 (statement -> return .)
    STRUCTURE       reduce using rule 9 (statement -> return .)
    WHILE           reduce using rule 9 (statement -> return .)
    DO              reduce using rule 9 (statement -> return .)
    IF              reduce using rule 9 (statement -> return .)
    DATATYPE        reduce using rule 9 (statement -> return .)
    $end            reduce using rule 9 (statement -> return .)
    RBRACE          reduce using rule 9 (statement -> return .)


state 8

    (10) statement -> assign .

    BREAK           reduce using rule 10 (statement -> assign .)
    CONTINUE        reduce using rule 10 (statement -> assign .)
    GOTO            reduce using rule 10 (statement -> assign .)
    ID              reduce using rule 10 (statement -> assign .)
    MINUS           reduce using rule 10 (statement -> assign .)
    LNOT            reduce using rule 10 (statement -> assign .)
    INTEGER         reduce using rule 10 (statement -> assign .)
    DOUBLE          reduce using rule 10 (statement -> assign .)
    BOOLEAN         reduce using rule 10 (statement -> assign .)
    STRING          reduce using rule 10 (statement -> assign .)
    NULL            reduce using rule 10 (statement -> assign .)
    LPAREN          reduce using rule 10 (statement -> assign .)
    RETURN          reduce using rule 10 (statement -> assign .)
    FUNCTION        reduce using rule 10 (statement -> assign .)
    STRUCTURE       reduce using rule 10 (statement -> assign .)
    WHILE           reduce using rule 10 (statement -> assign .)
    DO              reduce using rule 10 (statement -> assign .)
    IF              reduce using rule 10 (statement -> assign .)
    DATATYPE        reduce using rule 10 (statement -> assign .)
    $end            reduce using rule 10 (statement -> assign .)
    RBRACE          reduce using rule 10 (statement -> assign .)


state 9

    (11) statement -> func_declaration .

    BREAK           reduce using rule 11 (statement -> func_declaration .)
    CONTINUE        reduce using rule 11 (statement -> func_declaration .)
    GOTO            reduce using rule 11 (statement -> func_declaration .)
    ID              reduce using rule 11 (statement -> func_declaration .)
    MINUS           reduce using rule 11 (statement -> func_declaration .)
    LNOT            reduce using rule 11 (statement -> func_declaration .)
    INTEGER         reduce using rule 11 (statement -> func_declaration .)
    DOUBLE          reduce using rule 11 (statement -> func_declaration .)
    BOOLEAN         reduce using rule 11 (statement -> func_declaration .)
    STRING          reduce using rule 11 (statement -> func_declaration .)
    NULL            reduce using rule 11 (statement -> func_declaration .)
    LPAREN          reduce using rule 11 (statement -> func_declaration .)
    RETURN          reduce using rule 11 (statement -> func_declaration .)
    FUNCTION        reduce using rule 11 (statement -> func_declaration .)
    STRUCTURE       reduce using rule 11 (statement -> func_declaration .)
    WHILE           reduce using rule 11 (statement -> func_declaration .)
    DO              reduce using rule 11 (statement -> func_declaration .)
    IF              reduce using rule 11 (statement -> func_declaration .)
    DATATYPE        reduce using rule 11 (statement -> func_declaration .)
    $end            reduce using rule 11 (statement -> func_declaration .)
    RBRACE          reduce using rule 11 (statement -> func_declaration .)


state 10

    (12) statement -> struct_declaration .

    BREAK           reduce using rule 12 (statement -> struct_declaration .)
    CONTINUE        reduce using rule 12 (statement -> struct_declaration .)
    GOTO            reduce using rule 12 (statement -> struct_declaration .)
    ID              reduce using rule 12 (statement -> struct_declaration .)
    MINUS           reduce using rule 12 (statement -> struct_declaration .)
    LNOT            reduce using rule 12 (statement -> struct_declaration .)
    INTEGER         reduce using rule 12 (statement -> struct_declaration .)
    DOUBLE          reduce using rule 12 (statement -> struct_declaration .)
    BOOLEAN         reduce using rule 12 (statement -> struct_declaration .)
    STRING          reduce using rule 12 (statement -> struct_declaration .)
    NULL            reduce using rule 12 (statement -> struct_declaration .)
    LPAREN          reduce using rule 12 (statement -> struct_declaration .)
    RETURN          reduce using rule 12 (statement -> struct_declaration .)
    FUNCTION        reduce using rule 12 (statement -> struct_declaration .)
    STRUCTURE       reduce using rule 12 (statement -> struct_declaration .)
    WHILE           reduce using rule 12 (statement -> struct_declaration .)
    DO              reduce using rule 12 (statement -> struct_declaration .)
    IF              reduce using rule 12 (statement -> struct_declaration .)
    DATATYPE        reduce using rule 12 (statement -> struct_declaration .)
    $end            reduce using rule 12 (statement -> struct_declaration .)
    RBRACE          reduce using rule 12 (statement -> struct_declaration .)


state 11

    (13) statement -> while .

    BREAK           reduce using rule 13 (statement -> while .)
    CONTINUE        reduce using rule 13 (statement -> while .)
    GOTO            reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)
    MINUS           reduce using rule 13 (statement -> while .)
    LNOT            reduce using rule 13 (statement -> while .)
    INTEGER         reduce using rule 13 (statement -> while .)
    DOUBLE          reduce using rule 13 (statement -> while .)
    BOOLEAN         reduce using rule 13 (statement -> while .)
    STRING          reduce using rule 13 (statement -> while .)
    NULL            reduce using rule 13 (statement -> while .)
    LPAREN          reduce using rule 13 (statement -> while .)
    RETURN          reduce using rule 13 (statement -> while .)
    FUNCTION        reduce using rule 13 (statement -> while .)
    STRUCTURE       reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    DO              reduce using rule 13 (statement -> while .)
    IF              reduce using rule 13 (statement -> while .)
    DATATYPE        reduce using rule 13 (statement -> while .)
    $end            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)


state 12

    (14) statement -> BREAK . SEMI

    SEMI            shift and go to state 52


state 13

    (15) statement -> CONTINUE . SEMI

    SEMI            shift and go to state 53


state 14

    (16) statement -> GOTO . ID SEMI

    ID              shift and go to state 54


state 15

    (24) expr -> ID . DOT ID
    (29) expr -> ID . LPAREN args RPAREN
    (62) expr -> ID . LBRACKET expr RBRACKET
    (34) assign -> ID . EQUALS expr SEMI
    (63) goto_mark -> ID . COLON
    (65) id -> ID .

    DOT             shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57
    EQUALS          shift and go to state 58
    COLON           shift and go to state 59
    SEMI            reduce using rule 65 (id -> ID .)
    PLUS            reduce using rule 65 (id -> ID .)
    MINUS           reduce using rule 65 (id -> ID .)
    MUL             reduce using rule 65 (id -> ID .)
    DIVIDE          reduce using rule 65 (id -> ID .)
    INTDIVIDE       reduce using rule 65 (id -> ID .)
    MODULO          reduce using rule 65 (id -> ID .)
    POW             reduce using rule 65 (id -> ID .)
    LE              reduce using rule 65 (id -> ID .)
    GE              reduce using rule 65 (id -> ID .)
    LT              reduce using rule 65 (id -> ID .)
    GT              reduce using rule 65 (id -> ID .)
    EQ              reduce using rule 65 (id -> ID .)
    NE              reduce using rule 65 (id -> ID .)
    LAND            reduce using rule 65 (id -> ID .)
    LOR             reduce using rule 65 (id -> ID .)


state 16

    (17) statement -> goto_mark .

    BREAK           reduce using rule 17 (statement -> goto_mark .)
    CONTINUE        reduce using rule 17 (statement -> goto_mark .)
    GOTO            reduce using rule 17 (statement -> goto_mark .)
    ID              reduce using rule 17 (statement -> goto_mark .)
    MINUS           reduce using rule 17 (statement -> goto_mark .)
    LNOT            reduce using rule 17 (statement -> goto_mark .)
    INTEGER         reduce using rule 17 (statement -> goto_mark .)
    DOUBLE          reduce using rule 17 (statement -> goto_mark .)
    BOOLEAN         reduce using rule 17 (statement -> goto_mark .)
    STRING          reduce using rule 17 (statement -> goto_mark .)
    NULL            reduce using rule 17 (statement -> goto_mark .)
    LPAREN          reduce using rule 17 (statement -> goto_mark .)
    RETURN          reduce using rule 17 (statement -> goto_mark .)
    FUNCTION        reduce using rule 17 (statement -> goto_mark .)
    STRUCTURE       reduce using rule 17 (statement -> goto_mark .)
    WHILE           reduce using rule 17 (statement -> goto_mark .)
    DO              reduce using rule 17 (statement -> goto_mark .)
    IF              reduce using rule 17 (statement -> goto_mark .)
    DATATYPE        reduce using rule 17 (statement -> goto_mark .)
    $end            reduce using rule 17 (statement -> goto_mark .)
    RBRACE          reduce using rule 17 (statement -> goto_mark .)


state 17

    (18) statement -> if-else .

    BREAK           reduce using rule 18 (statement -> if-else .)
    CONTINUE        reduce using rule 18 (statement -> if-else .)
    GOTO            reduce using rule 18 (statement -> if-else .)
    ID              reduce using rule 18 (statement -> if-else .)
    MINUS           reduce using rule 18 (statement -> if-else .)
    LNOT            reduce using rule 18 (statement -> if-else .)
    INTEGER         reduce using rule 18 (statement -> if-else .)
    DOUBLE          reduce using rule 18 (statement -> if-else .)
    BOOLEAN         reduce using rule 18 (statement -> if-else .)
    STRING          reduce using rule 18 (statement -> if-else .)
    NULL            reduce using rule 18 (statement -> if-else .)
    LPAREN          reduce using rule 18 (statement -> if-else .)
    RETURN          reduce using rule 18 (statement -> if-else .)
    FUNCTION        reduce using rule 18 (statement -> if-else .)
    STRUCTURE       reduce using rule 18 (statement -> if-else .)
    WHILE           reduce using rule 18 (statement -> if-else .)
    DO              reduce using rule 18 (statement -> if-else .)
    IF              reduce using rule 18 (statement -> if-else .)
    DATATYPE        reduce using rule 18 (statement -> if-else .)
    $end            reduce using rule 18 (statement -> if-else .)
    RBRACE          reduce using rule 18 (statement -> if-else .)


state 18

    (60) expr -> LPAREN . expr RPAREN
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 60
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 19

    (50) expr -> MINUS . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 63
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 20

    (53) expr -> LNOT . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 64
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 21

    (54) expr -> id .

    SEMI            reduce using rule 54 (expr -> id .)
    PLUS            reduce using rule 54 (expr -> id .)
    MINUS           reduce using rule 54 (expr -> id .)
    MUL             reduce using rule 54 (expr -> id .)
    DIVIDE          reduce using rule 54 (expr -> id .)
    INTDIVIDE       reduce using rule 54 (expr -> id .)
    MODULO          reduce using rule 54 (expr -> id .)
    POW             reduce using rule 54 (expr -> id .)
    LE              reduce using rule 54 (expr -> id .)
    GE              reduce using rule 54 (expr -> id .)
    LT              reduce using rule 54 (expr -> id .)
    GT              reduce using rule 54 (expr -> id .)
    EQ              reduce using rule 54 (expr -> id .)
    NE              reduce using rule 54 (expr -> id .)
    LAND            reduce using rule 54 (expr -> id .)
    LOR             reduce using rule 54 (expr -> id .)
    RPAREN          reduce using rule 54 (expr -> id .)
    COMMA           reduce using rule 54 (expr -> id .)
    RBRACKET        reduce using rule 54 (expr -> id .)


state 22

    (55) expr -> INTEGER .

    SEMI            reduce using rule 55 (expr -> INTEGER .)
    PLUS            reduce using rule 55 (expr -> INTEGER .)
    MINUS           reduce using rule 55 (expr -> INTEGER .)
    MUL             reduce using rule 55 (expr -> INTEGER .)
    DIVIDE          reduce using rule 55 (expr -> INTEGER .)
    INTDIVIDE       reduce using rule 55 (expr -> INTEGER .)
    MODULO          reduce using rule 55 (expr -> INTEGER .)
    POW             reduce using rule 55 (expr -> INTEGER .)
    LE              reduce using rule 55 (expr -> INTEGER .)
    GE              reduce using rule 55 (expr -> INTEGER .)
    LT              reduce using rule 55 (expr -> INTEGER .)
    GT              reduce using rule 55 (expr -> INTEGER .)
    EQ              reduce using rule 55 (expr -> INTEGER .)
    NE              reduce using rule 55 (expr -> INTEGER .)
    LAND            reduce using rule 55 (expr -> INTEGER .)
    LOR             reduce using rule 55 (expr -> INTEGER .)
    RPAREN          reduce using rule 55 (expr -> INTEGER .)
    COMMA           reduce using rule 55 (expr -> INTEGER .)
    RBRACKET        reduce using rule 55 (expr -> INTEGER .)


state 23

    (56) expr -> DOUBLE .

    SEMI            reduce using rule 56 (expr -> DOUBLE .)
    PLUS            reduce using rule 56 (expr -> DOUBLE .)
    MINUS           reduce using rule 56 (expr -> DOUBLE .)
    MUL             reduce using rule 56 (expr -> DOUBLE .)
    DIVIDE          reduce using rule 56 (expr -> DOUBLE .)
    INTDIVIDE       reduce using rule 56 (expr -> DOUBLE .)
    MODULO          reduce using rule 56 (expr -> DOUBLE .)
    POW             reduce using rule 56 (expr -> DOUBLE .)
    LE              reduce using rule 56 (expr -> DOUBLE .)
    GE              reduce using rule 56 (expr -> DOUBLE .)
    LT              reduce using rule 56 (expr -> DOUBLE .)
    GT              reduce using rule 56 (expr -> DOUBLE .)
    EQ              reduce using rule 56 (expr -> DOUBLE .)
    NE              reduce using rule 56 (expr -> DOUBLE .)
    LAND            reduce using rule 56 (expr -> DOUBLE .)
    LOR             reduce using rule 56 (expr -> DOUBLE .)
    RPAREN          reduce using rule 56 (expr -> DOUBLE .)
    COMMA           reduce using rule 56 (expr -> DOUBLE .)
    RBRACKET        reduce using rule 56 (expr -> DOUBLE .)


state 24

    (57) expr -> BOOLEAN .

    SEMI            reduce using rule 57 (expr -> BOOLEAN .)
    PLUS            reduce using rule 57 (expr -> BOOLEAN .)
    MINUS           reduce using rule 57 (expr -> BOOLEAN .)
    MUL             reduce using rule 57 (expr -> BOOLEAN .)
    DIVIDE          reduce using rule 57 (expr -> BOOLEAN .)
    INTDIVIDE       reduce using rule 57 (expr -> BOOLEAN .)
    MODULO          reduce using rule 57 (expr -> BOOLEAN .)
    POW             reduce using rule 57 (expr -> BOOLEAN .)
    LE              reduce using rule 57 (expr -> BOOLEAN .)
    GE              reduce using rule 57 (expr -> BOOLEAN .)
    LT              reduce using rule 57 (expr -> BOOLEAN .)
    GT              reduce using rule 57 (expr -> BOOLEAN .)
    EQ              reduce using rule 57 (expr -> BOOLEAN .)
    NE              reduce using rule 57 (expr -> BOOLEAN .)
    LAND            reduce using rule 57 (expr -> BOOLEAN .)
    LOR             reduce using rule 57 (expr -> BOOLEAN .)
    RPAREN          reduce using rule 57 (expr -> BOOLEAN .)
    COMMA           reduce using rule 57 (expr -> BOOLEAN .)
    RBRACKET        reduce using rule 57 (expr -> BOOLEAN .)


state 25

    (58) expr -> STRING .

    SEMI            reduce using rule 58 (expr -> STRING .)
    PLUS            reduce using rule 58 (expr -> STRING .)
    MINUS           reduce using rule 58 (expr -> STRING .)
    MUL             reduce using rule 58 (expr -> STRING .)
    DIVIDE          reduce using rule 58 (expr -> STRING .)
    INTDIVIDE       reduce using rule 58 (expr -> STRING .)
    MODULO          reduce using rule 58 (expr -> STRING .)
    POW             reduce using rule 58 (expr -> STRING .)
    LE              reduce using rule 58 (expr -> STRING .)
    GE              reduce using rule 58 (expr -> STRING .)
    LT              reduce using rule 58 (expr -> STRING .)
    GT              reduce using rule 58 (expr -> STRING .)
    EQ              reduce using rule 58 (expr -> STRING .)
    NE              reduce using rule 58 (expr -> STRING .)
    LAND            reduce using rule 58 (expr -> STRING .)
    LOR             reduce using rule 58 (expr -> STRING .)
    RPAREN          reduce using rule 58 (expr -> STRING .)
    COMMA           reduce using rule 58 (expr -> STRING .)
    RBRACKET        reduce using rule 58 (expr -> STRING .)


state 26

    (59) expr -> NULL .

    SEMI            reduce using rule 59 (expr -> NULL .)
    PLUS            reduce using rule 59 (expr -> NULL .)
    MINUS           reduce using rule 59 (expr -> NULL .)
    MUL             reduce using rule 59 (expr -> NULL .)
    DIVIDE          reduce using rule 59 (expr -> NULL .)
    INTDIVIDE       reduce using rule 59 (expr -> NULL .)
    MODULO          reduce using rule 59 (expr -> NULL .)
    POW             reduce using rule 59 (expr -> NULL .)
    LE              reduce using rule 59 (expr -> NULL .)
    GE              reduce using rule 59 (expr -> NULL .)
    LT              reduce using rule 59 (expr -> NULL .)
    GT              reduce using rule 59 (expr -> NULL .)
    EQ              reduce using rule 59 (expr -> NULL .)
    NE              reduce using rule 59 (expr -> NULL .)
    LAND            reduce using rule 59 (expr -> NULL .)
    LOR             reduce using rule 59 (expr -> NULL .)
    RPAREN          reduce using rule 59 (expr -> NULL .)
    COMMA           reduce using rule 59 (expr -> NULL .)
    RBRACKET        reduce using rule 59 (expr -> NULL .)


state 27

    (61) expr -> datatype . LBRACKET expr RBRACKET
    (33) var_declaration -> datatype . id EQUALS expr SEMI
    (65) id -> . ID

    LBRACKET        shift and go to state 65
    ID              shift and go to state 67

    id                             shift and go to state 66

state 28

    (35) return -> RETURN . expr SEMI
    (36) return -> RETURN . SEMI
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    SEMI            shift and go to state 69
    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 68
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 29

    (4) func_declaration -> FUNCTION . datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (64) datatype -> . DATATYPE

    DATATYPE        shift and go to state 34

    datatype                       shift and go to state 70

state 30

    (23) struct_declaration -> STRUCTURE . id LBRACE params RBRACE
    (65) id -> . ID

    ID              shift and go to state 67

    id                             shift and go to state 71

state 31

    (19) while -> WHILE . LPAREN expr RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 72


state 32

    (20) while -> DO . LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI

    LBRACE          shift and go to state 73


state 33

    (21) if-else -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 74


state 34

    (64) datatype -> DATATYPE .

    LBRACKET        reduce using rule 64 (datatype -> DATATYPE .)
    ID              reduce using rule 64 (datatype -> DATATYPE .)


state 35

    (5) stmt_list -> stmt_list statement .

    BREAK           reduce using rule 5 (stmt_list -> stmt_list statement .)
    CONTINUE        reduce using rule 5 (stmt_list -> stmt_list statement .)
    GOTO            reduce using rule 5 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 5 (stmt_list -> stmt_list statement .)
    MINUS           reduce using rule 5 (stmt_list -> stmt_list statement .)
    LNOT            reduce using rule 5 (stmt_list -> stmt_list statement .)
    INTEGER         reduce using rule 5 (stmt_list -> stmt_list statement .)
    DOUBLE          reduce using rule 5 (stmt_list -> stmt_list statement .)
    BOOLEAN         reduce using rule 5 (stmt_list -> stmt_list statement .)
    STRING          reduce using rule 5 (stmt_list -> stmt_list statement .)
    NULL            reduce using rule 5 (stmt_list -> stmt_list statement .)
    LPAREN          reduce using rule 5 (stmt_list -> stmt_list statement .)
    RETURN          reduce using rule 5 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 5 (stmt_list -> stmt_list statement .)
    STRUCTURE       reduce using rule 5 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 5 (stmt_list -> stmt_list statement .)
    DO              reduce using rule 5 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 5 (stmt_list -> stmt_list statement .)
    DATATYPE        reduce using rule 5 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 5 (stmt_list -> stmt_list statement .)
    RBRACE          reduce using rule 5 (stmt_list -> stmt_list statement .)


state 36

    (7) statement -> expr SEMI .

    BREAK           reduce using rule 7 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 7 (statement -> expr SEMI .)
    GOTO            reduce using rule 7 (statement -> expr SEMI .)
    ID              reduce using rule 7 (statement -> expr SEMI .)
    MINUS           reduce using rule 7 (statement -> expr SEMI .)
    LNOT            reduce using rule 7 (statement -> expr SEMI .)
    INTEGER         reduce using rule 7 (statement -> expr SEMI .)
    DOUBLE          reduce using rule 7 (statement -> expr SEMI .)
    BOOLEAN         reduce using rule 7 (statement -> expr SEMI .)
    STRING          reduce using rule 7 (statement -> expr SEMI .)
    NULL            reduce using rule 7 (statement -> expr SEMI .)
    LPAREN          reduce using rule 7 (statement -> expr SEMI .)
    RETURN          reduce using rule 7 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 7 (statement -> expr SEMI .)
    STRUCTURE       reduce using rule 7 (statement -> expr SEMI .)
    WHILE           reduce using rule 7 (statement -> expr SEMI .)
    DO              reduce using rule 7 (statement -> expr SEMI .)
    IF              reduce using rule 7 (statement -> expr SEMI .)
    DATATYPE        reduce using rule 7 (statement -> expr SEMI .)
    $end            reduce using rule 7 (statement -> expr SEMI .)
    RBRACE          reduce using rule 7 (statement -> expr SEMI .)


state 37

    (37) expr -> expr PLUS . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 75
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 38

    (38) expr -> expr MINUS . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 76
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 39

    (39) expr -> expr MUL . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 77
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 40

    (40) expr -> expr DIVIDE . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 78
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 41

    (41) expr -> expr INTDIVIDE . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 79
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 42

    (42) expr -> expr MODULO . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 80
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 43

    (43) expr -> expr POW . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 81
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 44

    (44) expr -> expr LE . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 82
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 45

    (45) expr -> expr GE . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 83
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 46

    (46) expr -> expr LT . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 84
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 47

    (47) expr -> expr GT . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 85
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 48

    (48) expr -> expr EQ . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 86
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 49

    (49) expr -> expr NE . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 87
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 50

    (51) expr -> expr LAND . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 88
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 51

    (52) expr -> expr LOR . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 89
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 52

    (14) statement -> BREAK SEMI .

    BREAK           reduce using rule 14 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 14 (statement -> BREAK SEMI .)
    GOTO            reduce using rule 14 (statement -> BREAK SEMI .)
    ID              reduce using rule 14 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 14 (statement -> BREAK SEMI .)
    LNOT            reduce using rule 14 (statement -> BREAK SEMI .)
    INTEGER         reduce using rule 14 (statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 14 (statement -> BREAK SEMI .)
    BOOLEAN         reduce using rule 14 (statement -> BREAK SEMI .)
    STRING          reduce using rule 14 (statement -> BREAK SEMI .)
    NULL            reduce using rule 14 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 14 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 14 (statement -> BREAK SEMI .)
    FUNCTION        reduce using rule 14 (statement -> BREAK SEMI .)
    STRUCTURE       reduce using rule 14 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 14 (statement -> BREAK SEMI .)
    DO              reduce using rule 14 (statement -> BREAK SEMI .)
    IF              reduce using rule 14 (statement -> BREAK SEMI .)
    DATATYPE        reduce using rule 14 (statement -> BREAK SEMI .)
    $end            reduce using rule 14 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 14 (statement -> BREAK SEMI .)


state 53

    (15) statement -> CONTINUE SEMI .

    BREAK           reduce using rule 15 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 15 (statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 15 (statement -> CONTINUE SEMI .)
    ID              reduce using rule 15 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 15 (statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 15 (statement -> CONTINUE SEMI .)
    INTEGER         reduce using rule 15 (statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 15 (statement -> CONTINUE SEMI .)
    BOOLEAN         reduce using rule 15 (statement -> CONTINUE SEMI .)
    STRING          reduce using rule 15 (statement -> CONTINUE SEMI .)
    NULL            reduce using rule 15 (statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 15 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 15 (statement -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 15 (statement -> CONTINUE SEMI .)
    STRUCTURE       reduce using rule 15 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 15 (statement -> CONTINUE SEMI .)
    DO              reduce using rule 15 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 15 (statement -> CONTINUE SEMI .)
    DATATYPE        reduce using rule 15 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 15 (statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 15 (statement -> CONTINUE SEMI .)


state 54

    (16) statement -> GOTO ID . SEMI

    SEMI            shift and go to state 90


state 55

    (24) expr -> ID DOT . ID

    ID              shift and go to state 91


state 56

    (29) expr -> ID LPAREN . args RPAREN
    (30) args -> .
    (31) args -> . expr
    (32) args -> . args COMMA expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    RPAREN          reduce using rule 30 (args -> .)
    COMMA           reduce using rule 30 (args -> .)
    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    args                           shift and go to state 92
    expr                           shift and go to state 93
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 57

    (62) expr -> ID LBRACKET . expr RBRACKET
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 94
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 58

    (34) assign -> ID EQUALS . expr SEMI
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 95
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 59

    (63) goto_mark -> ID COLON .

    BREAK           reduce using rule 63 (goto_mark -> ID COLON .)
    CONTINUE        reduce using rule 63 (goto_mark -> ID COLON .)
    GOTO            reduce using rule 63 (goto_mark -> ID COLON .)
    ID              reduce using rule 63 (goto_mark -> ID COLON .)
    MINUS           reduce using rule 63 (goto_mark -> ID COLON .)
    LNOT            reduce using rule 63 (goto_mark -> ID COLON .)
    INTEGER         reduce using rule 63 (goto_mark -> ID COLON .)
    DOUBLE          reduce using rule 63 (goto_mark -> ID COLON .)
    BOOLEAN         reduce using rule 63 (goto_mark -> ID COLON .)
    STRING          reduce using rule 63 (goto_mark -> ID COLON .)
    NULL            reduce using rule 63 (goto_mark -> ID COLON .)
    LPAREN          reduce using rule 63 (goto_mark -> ID COLON .)
    RETURN          reduce using rule 63 (goto_mark -> ID COLON .)
    FUNCTION        reduce using rule 63 (goto_mark -> ID COLON .)
    STRUCTURE       reduce using rule 63 (goto_mark -> ID COLON .)
    WHILE           reduce using rule 63 (goto_mark -> ID COLON .)
    DO              reduce using rule 63 (goto_mark -> ID COLON .)
    IF              reduce using rule 63 (goto_mark -> ID COLON .)
    DATATYPE        reduce using rule 63 (goto_mark -> ID COLON .)
    $end            reduce using rule 63 (goto_mark -> ID COLON .)
    RBRACE          reduce using rule 63 (goto_mark -> ID COLON .)


state 60

    (60) expr -> LPAREN expr . RPAREN
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RPAREN          shift and go to state 96
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 61

    (24) expr -> ID . DOT ID
    (29) expr -> ID . LPAREN args RPAREN
    (62) expr -> ID . LBRACKET expr RBRACKET
    (65) id -> ID .

    DOT             shift and go to state 55
    LPAREN          shift and go to state 56
    LBRACKET        shift and go to state 57
    RPAREN          reduce using rule 65 (id -> ID .)
    PLUS            reduce using rule 65 (id -> ID .)
    MINUS           reduce using rule 65 (id -> ID .)
    MUL             reduce using rule 65 (id -> ID .)
    DIVIDE          reduce using rule 65 (id -> ID .)
    INTDIVIDE       reduce using rule 65 (id -> ID .)
    MODULO          reduce using rule 65 (id -> ID .)
    POW             reduce using rule 65 (id -> ID .)
    LE              reduce using rule 65 (id -> ID .)
    GE              reduce using rule 65 (id -> ID .)
    LT              reduce using rule 65 (id -> ID .)
    GT              reduce using rule 65 (id -> ID .)
    EQ              reduce using rule 65 (id -> ID .)
    NE              reduce using rule 65 (id -> ID .)
    LAND            reduce using rule 65 (id -> ID .)
    LOR             reduce using rule 65 (id -> ID .)
    SEMI            reduce using rule 65 (id -> ID .)
    COMMA           reduce using rule 65 (id -> ID .)
    RBRACKET        reduce using rule 65 (id -> ID .)


state 62

    (61) expr -> datatype . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 65


state 63

    (50) expr -> MINUS expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 50 (expr -> MINUS expr .)
    PLUS            reduce using rule 50 (expr -> MINUS expr .)
    MINUS           reduce using rule 50 (expr -> MINUS expr .)
    MUL             reduce using rule 50 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 50 (expr -> MINUS expr .)
    INTDIVIDE       reduce using rule 50 (expr -> MINUS expr .)
    MODULO          reduce using rule 50 (expr -> MINUS expr .)
    POW             reduce using rule 50 (expr -> MINUS expr .)
    LE              reduce using rule 50 (expr -> MINUS expr .)
    GE              reduce using rule 50 (expr -> MINUS expr .)
    LT              reduce using rule 50 (expr -> MINUS expr .)
    GT              reduce using rule 50 (expr -> MINUS expr .)
    EQ              reduce using rule 50 (expr -> MINUS expr .)
    NE              reduce using rule 50 (expr -> MINUS expr .)
    LAND            reduce using rule 50 (expr -> MINUS expr .)
    LOR             reduce using rule 50 (expr -> MINUS expr .)
    RPAREN          reduce using rule 50 (expr -> MINUS expr .)
    COMMA           reduce using rule 50 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 50 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! POW             [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 64

    (53) expr -> LNOT expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 53 (expr -> LNOT expr .)
    PLUS            reduce using rule 53 (expr -> LNOT expr .)
    MINUS           reduce using rule 53 (expr -> LNOT expr .)
    MUL             reduce using rule 53 (expr -> LNOT expr .)
    DIVIDE          reduce using rule 53 (expr -> LNOT expr .)
    INTDIVIDE       reduce using rule 53 (expr -> LNOT expr .)
    MODULO          reduce using rule 53 (expr -> LNOT expr .)
    POW             reduce using rule 53 (expr -> LNOT expr .)
    LE              reduce using rule 53 (expr -> LNOT expr .)
    GE              reduce using rule 53 (expr -> LNOT expr .)
    LT              reduce using rule 53 (expr -> LNOT expr .)
    GT              reduce using rule 53 (expr -> LNOT expr .)
    EQ              reduce using rule 53 (expr -> LNOT expr .)
    NE              reduce using rule 53 (expr -> LNOT expr .)
    LAND            reduce using rule 53 (expr -> LNOT expr .)
    LOR             reduce using rule 53 (expr -> LNOT expr .)
    RPAREN          reduce using rule 53 (expr -> LNOT expr .)
    COMMA           reduce using rule 53 (expr -> LNOT expr .)
    RBRACKET        reduce using rule 53 (expr -> LNOT expr .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! POW             [ shift and go to state 43 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 65

    (61) expr -> datatype LBRACKET . expr RBRACKET
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    datatype                       shift and go to state 62
    expr                           shift and go to state 97
    id                             shift and go to state 21

state 66

    (33) var_declaration -> datatype id . EQUALS expr SEMI

    EQUALS          shift and go to state 98


state 67

    (65) id -> ID .

    EQUALS          reduce using rule 65 (id -> ID .)
    LBRACE          reduce using rule 65 (id -> ID .)
    LPAREN          reduce using rule 65 (id -> ID .)


state 68

    (35) return -> RETURN expr . SEMI
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            shift and go to state 99
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 69

    (36) return -> RETURN SEMI .

    BREAK           reduce using rule 36 (return -> RETURN SEMI .)
    CONTINUE        reduce using rule 36 (return -> RETURN SEMI .)
    GOTO            reduce using rule 36 (return -> RETURN SEMI .)
    ID              reduce using rule 36 (return -> RETURN SEMI .)
    MINUS           reduce using rule 36 (return -> RETURN SEMI .)
    LNOT            reduce using rule 36 (return -> RETURN SEMI .)
    INTEGER         reduce using rule 36 (return -> RETURN SEMI .)
    DOUBLE          reduce using rule 36 (return -> RETURN SEMI .)
    BOOLEAN         reduce using rule 36 (return -> RETURN SEMI .)
    STRING          reduce using rule 36 (return -> RETURN SEMI .)
    NULL            reduce using rule 36 (return -> RETURN SEMI .)
    LPAREN          reduce using rule 36 (return -> RETURN SEMI .)
    RETURN          reduce using rule 36 (return -> RETURN SEMI .)
    FUNCTION        reduce using rule 36 (return -> RETURN SEMI .)
    STRUCTURE       reduce using rule 36 (return -> RETURN SEMI .)
    WHILE           reduce using rule 36 (return -> RETURN SEMI .)
    DO              reduce using rule 36 (return -> RETURN SEMI .)
    IF              reduce using rule 36 (return -> RETURN SEMI .)
    DATATYPE        reduce using rule 36 (return -> RETURN SEMI .)
    $end            reduce using rule 36 (return -> RETURN SEMI .)
    RBRACE          reduce using rule 36 (return -> RETURN SEMI .)


state 70

    (4) func_declaration -> FUNCTION datatype . id LPAREN params RPAREN LBRACE basic_block RBRACE
    (65) id -> . ID

    ID              shift and go to state 67

    id                             shift and go to state 100

state 71

    (23) struct_declaration -> STRUCTURE id . LBRACE params RBRACE

    LBRACE          shift and go to state 101


state 72

    (19) while -> WHILE LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 102
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 73

    (20) while -> DO LBRACE . stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    stmt_list                      shift and go to state 103
    expr                           shift and go to state 5
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 74

    (21) if-else -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 104
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 75

    (37) expr -> expr PLUS expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 37 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 37 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 37 (expr -> expr PLUS expr .)
    LE              reduce using rule 37 (expr -> expr PLUS expr .)
    GE              reduce using rule 37 (expr -> expr PLUS expr .)
    LT              reduce using rule 37 (expr -> expr PLUS expr .)
    GT              reduce using rule 37 (expr -> expr PLUS expr .)
    EQ              reduce using rule 37 (expr -> expr PLUS expr .)
    NE              reduce using rule 37 (expr -> expr PLUS expr .)
    LAND            reduce using rule 37 (expr -> expr PLUS expr .)
    LOR             reduce using rule 37 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 37 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 37 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 37 (expr -> expr PLUS expr .)
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43

  ! MUL             [ reduce using rule 37 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> expr PLUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 37 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 37 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 37 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 76

    (38) expr -> expr MINUS expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 38 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 38 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 38 (expr -> expr MINUS expr .)
    LE              reduce using rule 38 (expr -> expr MINUS expr .)
    GE              reduce using rule 38 (expr -> expr MINUS expr .)
    LT              reduce using rule 38 (expr -> expr MINUS expr .)
    GT              reduce using rule 38 (expr -> expr MINUS expr .)
    EQ              reduce using rule 38 (expr -> expr MINUS expr .)
    NE              reduce using rule 38 (expr -> expr MINUS expr .)
    LAND            reduce using rule 38 (expr -> expr MINUS expr .)
    LOR             reduce using rule 38 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 38 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 38 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 38 (expr -> expr MINUS expr .)
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43

  ! MUL             [ reduce using rule 38 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> expr MINUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 38 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 38 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 38 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 77

    (39) expr -> expr MUL expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 39 (expr -> expr MUL expr .)
    PLUS            reduce using rule 39 (expr -> expr MUL expr .)
    MINUS           reduce using rule 39 (expr -> expr MUL expr .)
    MUL             reduce using rule 39 (expr -> expr MUL expr .)
    DIVIDE          reduce using rule 39 (expr -> expr MUL expr .)
    INTDIVIDE       reduce using rule 39 (expr -> expr MUL expr .)
    MODULO          reduce using rule 39 (expr -> expr MUL expr .)
    LE              reduce using rule 39 (expr -> expr MUL expr .)
    GE              reduce using rule 39 (expr -> expr MUL expr .)
    LT              reduce using rule 39 (expr -> expr MUL expr .)
    GT              reduce using rule 39 (expr -> expr MUL expr .)
    EQ              reduce using rule 39 (expr -> expr MUL expr .)
    NE              reduce using rule 39 (expr -> expr MUL expr .)
    LAND            reduce using rule 39 (expr -> expr MUL expr .)
    LOR             reduce using rule 39 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 39 (expr -> expr MUL expr .)
    COMMA           reduce using rule 39 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 39 (expr -> expr MUL expr .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 39 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 78

    (40) expr -> expr DIVIDE expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 40 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 40 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 40 (expr -> expr DIVIDE expr .)
    MUL             reduce using rule 40 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 40 (expr -> expr DIVIDE expr .)
    INTDIVIDE       reduce using rule 40 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 40 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 40 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 40 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 40 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 40 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 40 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 40 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 40 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 40 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 40 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 40 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 40 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 40 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 79

    (41) expr -> expr INTDIVIDE expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    PLUS            reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    MINUS           reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    MUL             reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    DIVIDE          reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    INTDIVIDE       reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    MODULO          reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    LE              reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    GE              reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    LT              reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    GT              reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    EQ              reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    NE              reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    LAND            reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    LOR             reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    RPAREN          reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    COMMA           reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    RBRACKET        reduce using rule 41 (expr -> expr INTDIVIDE expr .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 41 (expr -> expr INTDIVIDE expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 80

    (42) expr -> expr MODULO expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 42 (expr -> expr MODULO expr .)
    PLUS            reduce using rule 42 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 42 (expr -> expr MODULO expr .)
    MUL             reduce using rule 42 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 42 (expr -> expr MODULO expr .)
    INTDIVIDE       reduce using rule 42 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 42 (expr -> expr MODULO expr .)
    LE              reduce using rule 42 (expr -> expr MODULO expr .)
    GE              reduce using rule 42 (expr -> expr MODULO expr .)
    LT              reduce using rule 42 (expr -> expr MODULO expr .)
    GT              reduce using rule 42 (expr -> expr MODULO expr .)
    EQ              reduce using rule 42 (expr -> expr MODULO expr .)
    NE              reduce using rule 42 (expr -> expr MODULO expr .)
    LAND            reduce using rule 42 (expr -> expr MODULO expr .)
    LOR             reduce using rule 42 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 42 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 42 (expr -> expr MODULO expr .)
    RBRACKET        reduce using rule 42 (expr -> expr MODULO expr .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 42 (expr -> expr MODULO expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 81

    (43) expr -> expr POW expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 43 (expr -> expr POW expr .)
    PLUS            reduce using rule 43 (expr -> expr POW expr .)
    MINUS           reduce using rule 43 (expr -> expr POW expr .)
    MUL             reduce using rule 43 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 43 (expr -> expr POW expr .)
    INTDIVIDE       reduce using rule 43 (expr -> expr POW expr .)
    MODULO          reduce using rule 43 (expr -> expr POW expr .)
    LE              reduce using rule 43 (expr -> expr POW expr .)
    GE              reduce using rule 43 (expr -> expr POW expr .)
    LT              reduce using rule 43 (expr -> expr POW expr .)
    GT              reduce using rule 43 (expr -> expr POW expr .)
    EQ              reduce using rule 43 (expr -> expr POW expr .)
    NE              reduce using rule 43 (expr -> expr POW expr .)
    LAND            reduce using rule 43 (expr -> expr POW expr .)
    LOR             reduce using rule 43 (expr -> expr POW expr .)
    RPAREN          reduce using rule 43 (expr -> expr POW expr .)
    COMMA           reduce using rule 43 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 43 (expr -> expr POW expr .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 43 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MUL             [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! INTDIVIDE       [ shift and go to state 41 ]
  ! MODULO          [ shift and go to state 42 ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 82

    (44) expr -> expr LE expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 44 (expr -> expr LE expr .)
    LE              reduce using rule 44 (expr -> expr LE expr .)
    GE              reduce using rule 44 (expr -> expr LE expr .)
    LT              reduce using rule 44 (expr -> expr LE expr .)
    GT              reduce using rule 44 (expr -> expr LE expr .)
    EQ              reduce using rule 44 (expr -> expr LE expr .)
    NE              reduce using rule 44 (expr -> expr LE expr .)
    LAND            reduce using rule 44 (expr -> expr LE expr .)
    LOR             reduce using rule 44 (expr -> expr LE expr .)
    RPAREN          reduce using rule 44 (expr -> expr LE expr .)
    COMMA           reduce using rule 44 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 44 (expr -> expr LE expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! INTDIVIDE       [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 44 (expr -> expr LE expr .) ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 83

    (45) expr -> expr GE expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 45 (expr -> expr GE expr .)
    LE              reduce using rule 45 (expr -> expr GE expr .)
    GE              reduce using rule 45 (expr -> expr GE expr .)
    LT              reduce using rule 45 (expr -> expr GE expr .)
    GT              reduce using rule 45 (expr -> expr GE expr .)
    EQ              reduce using rule 45 (expr -> expr GE expr .)
    NE              reduce using rule 45 (expr -> expr GE expr .)
    LAND            reduce using rule 45 (expr -> expr GE expr .)
    LOR             reduce using rule 45 (expr -> expr GE expr .)
    RPAREN          reduce using rule 45 (expr -> expr GE expr .)
    COMMA           reduce using rule 45 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 45 (expr -> expr GE expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! INTDIVIDE       [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 45 (expr -> expr GE expr .) ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 84

    (46) expr -> expr LT expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 46 (expr -> expr LT expr .)
    LE              reduce using rule 46 (expr -> expr LT expr .)
    GE              reduce using rule 46 (expr -> expr LT expr .)
    LT              reduce using rule 46 (expr -> expr LT expr .)
    GT              reduce using rule 46 (expr -> expr LT expr .)
    EQ              reduce using rule 46 (expr -> expr LT expr .)
    NE              reduce using rule 46 (expr -> expr LT expr .)
    LAND            reduce using rule 46 (expr -> expr LT expr .)
    LOR             reduce using rule 46 (expr -> expr LT expr .)
    RPAREN          reduce using rule 46 (expr -> expr LT expr .)
    COMMA           reduce using rule 46 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 46 (expr -> expr LT expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! INTDIVIDE       [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 46 (expr -> expr LT expr .) ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 85

    (47) expr -> expr GT expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 47 (expr -> expr GT expr .)
    LE              reduce using rule 47 (expr -> expr GT expr .)
    GE              reduce using rule 47 (expr -> expr GT expr .)
    LT              reduce using rule 47 (expr -> expr GT expr .)
    GT              reduce using rule 47 (expr -> expr GT expr .)
    EQ              reduce using rule 47 (expr -> expr GT expr .)
    NE              reduce using rule 47 (expr -> expr GT expr .)
    LAND            reduce using rule 47 (expr -> expr GT expr .)
    LOR             reduce using rule 47 (expr -> expr GT expr .)
    RPAREN          reduce using rule 47 (expr -> expr GT expr .)
    COMMA           reduce using rule 47 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 47 (expr -> expr GT expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! INTDIVIDE       [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! LE              [ shift and go to state 44 ]
  ! GE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GT              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 86

    (48) expr -> expr EQ expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 48 (expr -> expr EQ expr .)
    EQ              reduce using rule 48 (expr -> expr EQ expr .)
    NE              reduce using rule 48 (expr -> expr EQ expr .)
    LAND            reduce using rule 48 (expr -> expr EQ expr .)
    LOR             reduce using rule 48 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 48 (expr -> expr EQ expr .)
    COMMA           reduce using rule 48 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 48 (expr -> expr EQ expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47

  ! PLUS            [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! INTDIVIDE       [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 48 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 87

    (49) expr -> expr NE expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 49 (expr -> expr NE expr .)
    EQ              reduce using rule 49 (expr -> expr NE expr .)
    NE              reduce using rule 49 (expr -> expr NE expr .)
    LAND            reduce using rule 49 (expr -> expr NE expr .)
    LOR             reduce using rule 49 (expr -> expr NE expr .)
    RPAREN          reduce using rule 49 (expr -> expr NE expr .)
    COMMA           reduce using rule 49 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 49 (expr -> expr NE expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47

  ! PLUS            [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! INTDIVIDE       [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 49 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 88

    (51) expr -> expr LAND expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 51 (expr -> expr LAND expr .)
    LAND            reduce using rule 51 (expr -> expr LAND expr .)
    LOR             reduce using rule 51 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 51 (expr -> expr LAND expr .)
    COMMA           reduce using rule 51 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 51 (expr -> expr LAND expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49

  ! PLUS            [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! MUL             [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! MODULO          [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! POW             [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! LE              [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! GE              [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! LT              [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! GT              [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! EQ              [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! NE              [ reduce using rule 51 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 50 ]
  ! LOR             [ shift and go to state 51 ]


state 89

    (52) expr -> expr LOR expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            reduce using rule 52 (expr -> expr LOR expr .)
    LOR             reduce using rule 52 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 52 (expr -> expr LOR expr .)
    COMMA           reduce using rule 52 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 52 (expr -> expr LOR expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50

  ! PLUS            [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! MUL             [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! MODULO          [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! POW             [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! LE              [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! GE              [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! LT              [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! GT              [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! EQ              [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! NE              [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! LAND            [ reduce using rule 52 (expr -> expr LOR expr .) ]
  ! LOR             [ shift and go to state 51 ]


state 90

    (16) statement -> GOTO ID SEMI .

    BREAK           reduce using rule 16 (statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 16 (statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 16 (statement -> GOTO ID SEMI .)
    ID              reduce using rule 16 (statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 16 (statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 16 (statement -> GOTO ID SEMI .)
    INTEGER         reduce using rule 16 (statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 16 (statement -> GOTO ID SEMI .)
    BOOLEAN         reduce using rule 16 (statement -> GOTO ID SEMI .)
    STRING          reduce using rule 16 (statement -> GOTO ID SEMI .)
    NULL            reduce using rule 16 (statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 16 (statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 16 (statement -> GOTO ID SEMI .)
    FUNCTION        reduce using rule 16 (statement -> GOTO ID SEMI .)
    STRUCTURE       reduce using rule 16 (statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 16 (statement -> GOTO ID SEMI .)
    DO              reduce using rule 16 (statement -> GOTO ID SEMI .)
    IF              reduce using rule 16 (statement -> GOTO ID SEMI .)
    DATATYPE        reduce using rule 16 (statement -> GOTO ID SEMI .)
    $end            reduce using rule 16 (statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 16 (statement -> GOTO ID SEMI .)


state 91

    (24) expr -> ID DOT ID .

    SEMI            reduce using rule 24 (expr -> ID DOT ID .)
    PLUS            reduce using rule 24 (expr -> ID DOT ID .)
    MINUS           reduce using rule 24 (expr -> ID DOT ID .)
    MUL             reduce using rule 24 (expr -> ID DOT ID .)
    DIVIDE          reduce using rule 24 (expr -> ID DOT ID .)
    INTDIVIDE       reduce using rule 24 (expr -> ID DOT ID .)
    MODULO          reduce using rule 24 (expr -> ID DOT ID .)
    POW             reduce using rule 24 (expr -> ID DOT ID .)
    LE              reduce using rule 24 (expr -> ID DOT ID .)
    GE              reduce using rule 24 (expr -> ID DOT ID .)
    LT              reduce using rule 24 (expr -> ID DOT ID .)
    GT              reduce using rule 24 (expr -> ID DOT ID .)
    EQ              reduce using rule 24 (expr -> ID DOT ID .)
    NE              reduce using rule 24 (expr -> ID DOT ID .)
    LAND            reduce using rule 24 (expr -> ID DOT ID .)
    LOR             reduce using rule 24 (expr -> ID DOT ID .)
    RPAREN          reduce using rule 24 (expr -> ID DOT ID .)
    COMMA           reduce using rule 24 (expr -> ID DOT ID .)
    RBRACKET        reduce using rule 24 (expr -> ID DOT ID .)


state 92

    (29) expr -> ID LPAREN args . RPAREN
    (32) args -> args . COMMA expr

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 106


state 93

    (31) args -> expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RPAREN          reduce using rule 31 (args -> expr .)
    COMMA           reduce using rule 31 (args -> expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 94

    (62) expr -> ID LBRACKET expr . RBRACKET
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RBRACKET        shift and go to state 107
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 95

    (34) assign -> ID EQUALS expr . SEMI
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            shift and go to state 108
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 96

    (60) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    INTDIVIDE       reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 60 (expr -> LPAREN expr RPAREN .)


state 97

    (61) expr -> datatype LBRACKET expr . RBRACKET
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RBRACKET        shift and go to state 109
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 98

    (33) var_declaration -> datatype id EQUALS . expr SEMI
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    datatype                       shift and go to state 62
    id                             shift and go to state 21
    expr                           shift and go to state 110

state 99

    (35) return -> RETURN expr SEMI .

    BREAK           reduce using rule 35 (return -> RETURN expr SEMI .)
    CONTINUE        reduce using rule 35 (return -> RETURN expr SEMI .)
    GOTO            reduce using rule 35 (return -> RETURN expr SEMI .)
    ID              reduce using rule 35 (return -> RETURN expr SEMI .)
    MINUS           reduce using rule 35 (return -> RETURN expr SEMI .)
    LNOT            reduce using rule 35 (return -> RETURN expr SEMI .)
    INTEGER         reduce using rule 35 (return -> RETURN expr SEMI .)
    DOUBLE          reduce using rule 35 (return -> RETURN expr SEMI .)
    BOOLEAN         reduce using rule 35 (return -> RETURN expr SEMI .)
    STRING          reduce using rule 35 (return -> RETURN expr SEMI .)
    NULL            reduce using rule 35 (return -> RETURN expr SEMI .)
    LPAREN          reduce using rule 35 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 35 (return -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 35 (return -> RETURN expr SEMI .)
    STRUCTURE       reduce using rule 35 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 35 (return -> RETURN expr SEMI .)
    DO              reduce using rule 35 (return -> RETURN expr SEMI .)
    IF              reduce using rule 35 (return -> RETURN expr SEMI .)
    DATATYPE        reduce using rule 35 (return -> RETURN expr SEMI .)
    $end            reduce using rule 35 (return -> RETURN expr SEMI .)
    RBRACE          reduce using rule 35 (return -> RETURN expr SEMI .)


state 100

    (4) func_declaration -> FUNCTION datatype id . LPAREN params RPAREN LBRACE basic_block RBRACE

    LPAREN          shift and go to state 111


state 101

    (23) struct_declaration -> STRUCTURE id LBRACE . params RBRACE
    (25) params -> .
    (26) params -> . param
    (27) params -> . params COMMA param
    (28) param -> . DATATYPE ID

    RBRACE          reduce using rule 25 (params -> .)
    COMMA           reduce using rule 25 (params -> .)
    DATATYPE        shift and go to state 114

    params                         shift and go to state 112
    param                          shift and go to state 113

state 102

    (19) while -> WHILE LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RPAREN          shift and go to state 115
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 103

    (20) while -> DO LBRACE stmt_list . RBRACE WHILE LPAREN expr RPAREN SEMI
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    RBRACE          shift and go to state 116
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    statement                      shift and go to state 35
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 104

    (21) if-else -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 105

    (29) expr -> ID LPAREN args RPAREN .

    SEMI            reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    MUL             reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    INTDIVIDE       reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    MODULO          reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    POW             reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    LE              reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    GE              reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    LT              reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    GT              reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    NE              reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    LAND            reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    LOR             reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 29 (expr -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 29 (expr -> ID LPAREN args RPAREN .)


state 106

    (32) args -> args COMMA . expr
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 118
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 107

    (62) expr -> ID LBRACKET expr RBRACKET .

    SEMI            reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    MUL             reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    INTDIVIDE       reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    POW             reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    LE              reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    GE              reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    LT              reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    GT              reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    EQ              reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    NE              reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    LAND            reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    LOR             reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 62 (expr -> ID LBRACKET expr RBRACKET .)


state 108

    (34) assign -> ID EQUALS expr SEMI .

    BREAK           reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    CONTINUE        reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    GOTO            reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    ID              reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    MINUS           reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    LNOT            reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    BOOLEAN         reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    STRING          reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    NULL            reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    RETURN          reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    WHILE           reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    DO              reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    IF              reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    DATATYPE        reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    $end            reduce using rule 34 (assign -> ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 34 (assign -> ID EQUALS expr SEMI .)


state 109

    (61) expr -> datatype LBRACKET expr RBRACKET .

    SEMI            reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    MUL             reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    INTDIVIDE       reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    POW             reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    LE              reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    GE              reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    LT              reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    GT              reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    EQ              reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    NE              reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    LAND            reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    LOR             reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 61 (expr -> datatype LBRACKET expr RBRACKET .)


state 110

    (33) var_declaration -> datatype id EQUALS expr . SEMI
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    SEMI            shift and go to state 119
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 111

    (4) func_declaration -> FUNCTION datatype id LPAREN . params RPAREN LBRACE basic_block RBRACE
    (25) params -> .
    (26) params -> . param
    (27) params -> . params COMMA param
    (28) param -> . DATATYPE ID

    RPAREN          reduce using rule 25 (params -> .)
    COMMA           reduce using rule 25 (params -> .)
    DATATYPE        shift and go to state 114

    params                         shift and go to state 120
    param                          shift and go to state 113

state 112

    (23) struct_declaration -> STRUCTURE id LBRACE params . RBRACE
    (27) params -> params . COMMA param

    RBRACE          shift and go to state 121
    COMMA           shift and go to state 122


state 113

    (26) params -> param .

    RBRACE          reduce using rule 26 (params -> param .)
    COMMA           reduce using rule 26 (params -> param .)
    RPAREN          reduce using rule 26 (params -> param .)


state 114

    (28) param -> DATATYPE . ID

    ID              shift and go to state 123


state 115

    (19) while -> WHILE LPAREN expr RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 124


state 116

    (20) while -> DO LBRACE stmt_list RBRACE . WHILE LPAREN expr RPAREN SEMI

    WHILE           shift and go to state 125


state 117

    (21) if-else -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE
    (22) if-else -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 126


state 118

    (32) args -> args COMMA expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RPAREN          reduce using rule 32 (args -> args COMMA expr .)
    COMMA           reduce using rule 32 (args -> args COMMA expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 119

    (33) var_declaration -> datatype id EQUALS expr SEMI .

    BREAK           reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    CONTINUE        reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    GOTO            reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    ID              reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    MINUS           reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    LNOT            reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    INTEGER         reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    DOUBLE          reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    BOOLEAN         reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRING          reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    NULL            reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    LPAREN          reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    RETURN          reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    FUNCTION        reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    WHILE           reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    DO              reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    IF              reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    DATATYPE        reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    $end            reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)
    RBRACE          reduce using rule 33 (var_declaration -> datatype id EQUALS expr SEMI .)


state 120

    (4) func_declaration -> FUNCTION datatype id LPAREN params . RPAREN LBRACE basic_block RBRACE
    (27) params -> params . COMMA param

    RPAREN          shift and go to state 127
    COMMA           shift and go to state 122


state 121

    (23) struct_declaration -> STRUCTURE id LBRACE params RBRACE .

    BREAK           reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    CONTINUE        reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    GOTO            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    ID              reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    MINUS           reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    LNOT            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    INTEGER         reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    DOUBLE          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    BOOLEAN         reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    STRING          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    NULL            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    LPAREN          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    RETURN          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    FUNCTION        reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    STRUCTURE       reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    WHILE           reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    DO              reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    IF              reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    DATATYPE        reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    $end            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    RBRACE          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)


state 122

    (27) params -> params COMMA . param
    (28) param -> . DATATYPE ID

    DATATYPE        shift and go to state 114

    param                          shift and go to state 128

state 123

    (28) param -> DATATYPE ID .

    RBRACE          reduce using rule 28 (param -> DATATYPE ID .)
    COMMA           reduce using rule 28 (param -> DATATYPE ID .)
    RPAREN          reduce using rule 28 (param -> DATATYPE ID .)


state 124

    (19) while -> WHILE LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    stmt_list                      shift and go to state 129
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 125

    (20) while -> DO LBRACE stmt_list RBRACE WHILE . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 130


state 126

    (21) if-else -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (22) if-else -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    stmt_list                      shift and go to state 131
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 127

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 132


state 128

    (27) params -> params COMMA param .

    RBRACE          reduce using rule 27 (params -> params COMMA param .)
    COMMA           reduce using rule 27 (params -> params COMMA param .)
    RPAREN          reduce using rule 27 (params -> params COMMA param .)


state 129

    (19) while -> WHILE LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    RBRACE          shift and go to state 133
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    statement                      shift and go to state 35
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 130

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN . expr RPAREN SEMI
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    ID              shift and go to state 61
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 134
    id                             shift and go to state 21
    datatype                       shift and go to state 62

state 131

    (21) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    RBRACE          shift and go to state 135
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    statement                      shift and go to state 35
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 132

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE . basic_block RBRACE
    (3) basic_block -> . stmt_list
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    datatype                       shift and go to state 27
    id                             shift and go to state 21
    basic_block                    shift and go to state 136
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17

state 133

    (19) while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .

    BREAK           reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DO              reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)


state 134

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr . RPAREN SEMI
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . MUL expr
    (40) expr -> expr . DIVIDE expr
    (41) expr -> expr . INTDIVIDE expr
    (42) expr -> expr . MODULO expr
    (43) expr -> expr . POW expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . GE expr
    (46) expr -> expr . LT expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . EQ expr
    (49) expr -> expr . NE expr
    (51) expr -> expr . LAND expr
    (52) expr -> expr . LOR expr

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIVIDE          shift and go to state 40
    INTDIVIDE       shift and go to state 41
    MODULO          shift and go to state 42
    POW             shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LAND            shift and go to state 50
    LOR             shift and go to state 51


state 135

    (21) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .
    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    BREAK           reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DO              reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 138


state 136

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block . RBRACE

    RBRACE          shift and go to state 139


state 137

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 140


state 138

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 141


state 139

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .

    BREAK           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    CONTINUE        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    GOTO            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    ID              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    MINUS           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    LNOT            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    INTEGER         reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DOUBLE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    BOOLEAN         reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    STRING          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    NULL            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    LPAREN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    FUNCTION        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    STRUCTURE       reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    WHILE           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DO              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    IF              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DATATYPE        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    $end            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)


state 140

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .

    BREAK           reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    CONTINUE        reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    GOTO            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    ID              reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    MINUS           reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    LNOT            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    INTEGER         reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    DOUBLE          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    BOOLEAN         reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    STRING          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    NULL            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    FUNCTION        reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    STRUCTURE       reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    DO              reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    DATATYPE        reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    $end            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    RBRACE          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)


state 141

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    stmt_list                      shift and go to state 142
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 142

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (24) expr -> . ID DOT ID
    (29) expr -> . ID LPAREN args RPAREN
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr MUL expr
    (40) expr -> . expr DIVIDE expr
    (41) expr -> . expr INTDIVIDE expr
    (42) expr -> . expr MODULO expr
    (43) expr -> . expr POW expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr GE expr
    (46) expr -> . expr LT expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr EQ expr
    (49) expr -> . expr NE expr
    (50) expr -> . MINUS expr
    (51) expr -> . expr LAND expr
    (52) expr -> . expr LOR expr
    (53) expr -> . LNOT expr
    (54) expr -> . id
    (55) expr -> . INTEGER
    (56) expr -> . DOUBLE
    (57) expr -> . BOOLEAN
    (58) expr -> . STRING
    (59) expr -> . NULL
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . datatype LBRACKET expr RBRACKET
    (62) expr -> . ID LBRACKET expr RBRACKET
    (33) var_declaration -> . datatype id EQUALS expr SEMI
    (35) return -> . RETURN expr SEMI
    (36) return -> . RETURN SEMI
    (34) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (63) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (65) id -> . ID
    (64) datatype -> . DATATYPE

    RBRACE          shift and go to state 143
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    INTEGER         shift and go to state 22
    DOUBLE          shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    NULL            shift and go to state 26
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 28
    FUNCTION        shift and go to state 29
    STRUCTURE       shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    IF              shift and go to state 33
    DATATYPE        shift and go to state 34

    expr                           shift and go to state 5
    statement                      shift and go to state 35
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    datatype                       shift and go to state 27

state 143

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    BREAK           reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    ID              reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DO              reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    $end            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)

