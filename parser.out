Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ERROR
    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> body_block
Rule 3     body_block -> stmt_list
Rule 4     body_block -> LBRACE stmt_list RBRACE
Rule 5     func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block
Rule 6     stmt_list -> stmt_list statement
Rule 7     stmt_list -> statement
Rule 8     statement -> expr SEMI
Rule 9     statement -> var_declaration
Rule 10    statement -> return
Rule 11    statement -> assign
Rule 12    statement -> func_declaration
Rule 13    statement -> struct_declaration
Rule 14    statement -> while
Rule 15    statement -> BREAK SEMI
Rule 16    statement -> CONTINUE SEMI
Rule 17    statement -> GOTO ID SEMI
Rule 18    statement -> goto_mark
Rule 19    statement -> if-else
Rule 20    while -> WHILE conditional body_block
Rule 21    while -> DO body_block WHILE conditional SEMI
Rule 22    if-else -> IF conditional body_block
Rule 23    if-else -> IF conditional body_block ELSE body_block
Rule 24    conditional -> LPAREN expr RPAREN
Rule 25    struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE
Rule 26    struct_params -> struct_param
Rule 27    struct_params -> struct_params COMMA struct_param
Rule 28    struct_param -> DATATYPE ID
Rule 29    struct_param -> func_declaration
Rule 30    params -> <empty>
Rule 31    params -> param
Rule 32    params -> params COMMA param
Rule 33    param -> DATATYPE ID
Rule 34    expr -> id LPAREN args RPAREN
Rule 35    args -> <empty>
Rule 36    args -> expr
Rule 37    args -> args COMMA expr
Rule 38    var_declaration -> datatype id EQUALS expr SEMI
Rule 39    var_declaration -> datatype id SEMI
Rule 40    var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI
Rule 41    assign -> ID EQUALS expr SEMI
Rule 42    assign -> ID EQUALS LBRACE args RBRACE SEMI
Rule 43    assign -> ID DOT ID EQUALS expr SEMI
Rule 44    return -> RETURN expr SEMI
Rule 45    return -> RETURN SEMI
Rule 46    expr -> expr PLUS expr
Rule 47    expr -> expr MINUS expr
Rule 48    expr -> expr MUL expr
Rule 49    expr -> expr DIVIDE expr
Rule 50    expr -> expr INTDIVIDE expr
Rule 51    expr -> expr MODULO expr
Rule 52    expr -> expr POW expr
Rule 53    expr -> expr LE expr
Rule 54    expr -> expr GE expr
Rule 55    expr -> expr LT expr
Rule 56    expr -> expr GT expr
Rule 57    expr -> expr EQ expr
Rule 58    expr -> expr NE expr
Rule 59    expr -> MINUS expr
Rule 60    expr -> expr LAND expr
Rule 61    expr -> expr LOR expr
Rule 62    expr -> LNOT expr
Rule 63    expr -> expr BAND expr
Rule 64    expr -> expr BOR expr
Rule 65    expr -> id
Rule 66    expr -> int
Rule 67    expr -> double
Rule 68    expr -> bool
Rule 69    expr -> str
Rule 70    expr -> void
Rule 71    expr -> NULL
Rule 72    expr -> LPAREN expr RPAREN
Rule 73    int -> INTEGER
Rule 74    double -> DOUBLE
Rule 75    bool -> BOOL
Rule 76    str -> STRING
Rule 77    void -> VOID
Rule 78    expr -> datatype LBRACKET RBRACKET id
Rule 79    expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
Rule 80    expr -> ID LBRACKET expr RBRACKET
Rule 81    goto_mark -> ID COLON
Rule 82    datatype -> DATATYPE
Rule 83    id -> ID

Terminals, with rules where they appear

BAND                 : 63
BOOL                 : 75
BOR                  : 64
BREAK                : 15
COLON                : 81
COMMA                : 27 32 37
COMMENT              : 
CONTINUE             : 16
DATATYPE             : 28 33 82
DIVIDE               : 49
DO                   : 21
DOT                  : 43
DOUBLE               : 74
ELSE                 : 23
EQ                   : 57
EQUALS               : 38 40 41 42 43 79
ERROR                : 
FUNCTION             : 5
GE                   : 54
GOTO                 : 17
GT                   : 56
ID                   : 17 28 33 40 41 42 43 43 80 81 83
IF                   : 22 23
INTDIVIDE            : 50
INTEGER              : 73 79
LAND                 : 60
LBRACE               : 4 25 40 42
LBRACKET             : 78 79 79 80
LE                   : 53
LNOT                 : 62
LOR                  : 61
LPAREN               : 5 24 34 72
LT                   : 55
MINUS                : 47 59
MODULO               : 51
MUL                  : 48
NE                   : 58
NEWLINE              : 
NULL                 : 71
PLUS                 : 46
POW                  : 52
RBRACE               : 4 25 40 42
RBRACKET             : 78 79 79 80
RETURN               : 44 45
RPAREN               : 5 24 34 72
SEMI                 : 8 15 16 17 21 38 39 40 41 42 43 44 45
STRING               : 76
STRUCTURE            : 25
VOID                 : 77
WHILE                : 20 21
error                : 

Nonterminals, with rules where they appear

args                 : 34 37 40 42
assign               : 11
body_block           : 2 5 20 21 22 23 23
bool                 : 68
conditional          : 20 21 22 23
datatype             : 5 38 39 78 79 79
double               : 67
expr                 : 8 24 36 37 38 41 43 44 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 60 61 61 62 63 63 64 64 72 80
func_declaration     : 12 29
goto_mark            : 18
id                   : 5 25 34 38 39 40 65 78 79
if-else              : 19
int                  : 66
param                : 31 32
params               : 5 32
program              : 0
return               : 10
statement            : 6 7
stmt_list            : 3 4 6
str                  : 69
struct_declaration   : 13
struct_param         : 26 27
struct_params        : 25 27
var_declaration      : 9
void                 : 70
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . body_block
    (3) body_block -> . stmt_list
    (4) body_block -> . LBRACE stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    $end            reduce using rule 1 (program -> .)
    LBRACE          shift and go to state 4
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    program                        shift and go to state 1
    body_block                     shift and go to state 2
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 1

    (0) S' -> program .



state 2

    (2) program -> body_block .

    $end            reduce using rule 2 (program -> body_block .)


state 3

    (3) body_block -> stmt_list .
    (6) stmt_list -> stmt_list . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LNOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for STRUCTURE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for DATATYPE resolved as shift
    $end            reduce using rule 3 (body_block -> stmt_list .)
    RBRACE          reduce using rule 3 (body_block -> stmt_list .)
    ELSE            reduce using rule 3 (body_block -> stmt_list .)
    COMMA           reduce using rule 3 (body_block -> stmt_list .)
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

  ! WHILE           [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! BREAK           [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! CONTINUE        [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! GOTO            [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! MINUS           [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! LNOT            [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! NULL            [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! LPAREN          [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! ID              [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! RETURN          [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! FUNCTION        [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! STRUCTURE       [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! DO              [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! IF              [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! INTEGER         [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! DOUBLE          [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! BOOL            [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! STRING          [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! VOID            [ reduce using rule 3 (body_block -> stmt_list .) ]
  ! DATATYPE        [ reduce using rule 3 (body_block -> stmt_list .) ]

    statement                      shift and go to state 42
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 4

    (4) body_block -> LBRACE . stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    stmt_list                      shift and go to state 43
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 5

    (7) stmt_list -> statement .

    BREAK           reduce using rule 7 (stmt_list -> statement .)
    CONTINUE        reduce using rule 7 (stmt_list -> statement .)
    GOTO            reduce using rule 7 (stmt_list -> statement .)
    MINUS           reduce using rule 7 (stmt_list -> statement .)
    LNOT            reduce using rule 7 (stmt_list -> statement .)
    NULL            reduce using rule 7 (stmt_list -> statement .)
    LPAREN          reduce using rule 7 (stmt_list -> statement .)
    ID              reduce using rule 7 (stmt_list -> statement .)
    RETURN          reduce using rule 7 (stmt_list -> statement .)
    FUNCTION        reduce using rule 7 (stmt_list -> statement .)
    STRUCTURE       reduce using rule 7 (stmt_list -> statement .)
    WHILE           reduce using rule 7 (stmt_list -> statement .)
    DO              reduce using rule 7 (stmt_list -> statement .)
    IF              reduce using rule 7 (stmt_list -> statement .)
    INTEGER         reduce using rule 7 (stmt_list -> statement .)
    DOUBLE          reduce using rule 7 (stmt_list -> statement .)
    BOOL            reduce using rule 7 (stmt_list -> statement .)
    STRING          reduce using rule 7 (stmt_list -> statement .)
    VOID            reduce using rule 7 (stmt_list -> statement .)
    DATATYPE        reduce using rule 7 (stmt_list -> statement .)
    $end            reduce using rule 7 (stmt_list -> statement .)
    RBRACE          reduce using rule 7 (stmt_list -> statement .)
    ELSE            reduce using rule 7 (stmt_list -> statement .)
    COMMA           reduce using rule 7 (stmt_list -> statement .)


state 6

    (8) statement -> expr . SEMI
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 7

    (9) statement -> var_declaration .

    BREAK           reduce using rule 9 (statement -> var_declaration .)
    CONTINUE        reduce using rule 9 (statement -> var_declaration .)
    GOTO            reduce using rule 9 (statement -> var_declaration .)
    MINUS           reduce using rule 9 (statement -> var_declaration .)
    LNOT            reduce using rule 9 (statement -> var_declaration .)
    NULL            reduce using rule 9 (statement -> var_declaration .)
    LPAREN          reduce using rule 9 (statement -> var_declaration .)
    ID              reduce using rule 9 (statement -> var_declaration .)
    RETURN          reduce using rule 9 (statement -> var_declaration .)
    FUNCTION        reduce using rule 9 (statement -> var_declaration .)
    STRUCTURE       reduce using rule 9 (statement -> var_declaration .)
    WHILE           reduce using rule 9 (statement -> var_declaration .)
    DO              reduce using rule 9 (statement -> var_declaration .)
    IF              reduce using rule 9 (statement -> var_declaration .)
    INTEGER         reduce using rule 9 (statement -> var_declaration .)
    DOUBLE          reduce using rule 9 (statement -> var_declaration .)
    BOOL            reduce using rule 9 (statement -> var_declaration .)
    STRING          reduce using rule 9 (statement -> var_declaration .)
    VOID            reduce using rule 9 (statement -> var_declaration .)
    DATATYPE        reduce using rule 9 (statement -> var_declaration .)
    $end            reduce using rule 9 (statement -> var_declaration .)
    RBRACE          reduce using rule 9 (statement -> var_declaration .)
    ELSE            reduce using rule 9 (statement -> var_declaration .)
    COMMA           reduce using rule 9 (statement -> var_declaration .)


state 8

    (10) statement -> return .

    BREAK           reduce using rule 10 (statement -> return .)
    CONTINUE        reduce using rule 10 (statement -> return .)
    GOTO            reduce using rule 10 (statement -> return .)
    MINUS           reduce using rule 10 (statement -> return .)
    LNOT            reduce using rule 10 (statement -> return .)
    NULL            reduce using rule 10 (statement -> return .)
    LPAREN          reduce using rule 10 (statement -> return .)
    ID              reduce using rule 10 (statement -> return .)
    RETURN          reduce using rule 10 (statement -> return .)
    FUNCTION        reduce using rule 10 (statement -> return .)
    STRUCTURE       reduce using rule 10 (statement -> return .)
    WHILE           reduce using rule 10 (statement -> return .)
    DO              reduce using rule 10 (statement -> return .)
    IF              reduce using rule 10 (statement -> return .)
    INTEGER         reduce using rule 10 (statement -> return .)
    DOUBLE          reduce using rule 10 (statement -> return .)
    BOOL            reduce using rule 10 (statement -> return .)
    STRING          reduce using rule 10 (statement -> return .)
    VOID            reduce using rule 10 (statement -> return .)
    DATATYPE        reduce using rule 10 (statement -> return .)
    $end            reduce using rule 10 (statement -> return .)
    RBRACE          reduce using rule 10 (statement -> return .)
    ELSE            reduce using rule 10 (statement -> return .)
    COMMA           reduce using rule 10 (statement -> return .)


state 9

    (11) statement -> assign .

    BREAK           reduce using rule 11 (statement -> assign .)
    CONTINUE        reduce using rule 11 (statement -> assign .)
    GOTO            reduce using rule 11 (statement -> assign .)
    MINUS           reduce using rule 11 (statement -> assign .)
    LNOT            reduce using rule 11 (statement -> assign .)
    NULL            reduce using rule 11 (statement -> assign .)
    LPAREN          reduce using rule 11 (statement -> assign .)
    ID              reduce using rule 11 (statement -> assign .)
    RETURN          reduce using rule 11 (statement -> assign .)
    FUNCTION        reduce using rule 11 (statement -> assign .)
    STRUCTURE       reduce using rule 11 (statement -> assign .)
    WHILE           reduce using rule 11 (statement -> assign .)
    DO              reduce using rule 11 (statement -> assign .)
    IF              reduce using rule 11 (statement -> assign .)
    INTEGER         reduce using rule 11 (statement -> assign .)
    DOUBLE          reduce using rule 11 (statement -> assign .)
    BOOL            reduce using rule 11 (statement -> assign .)
    STRING          reduce using rule 11 (statement -> assign .)
    VOID            reduce using rule 11 (statement -> assign .)
    DATATYPE        reduce using rule 11 (statement -> assign .)
    $end            reduce using rule 11 (statement -> assign .)
    RBRACE          reduce using rule 11 (statement -> assign .)
    ELSE            reduce using rule 11 (statement -> assign .)
    COMMA           reduce using rule 11 (statement -> assign .)


state 10

    (12) statement -> func_declaration .

    BREAK           reduce using rule 12 (statement -> func_declaration .)
    CONTINUE        reduce using rule 12 (statement -> func_declaration .)
    GOTO            reduce using rule 12 (statement -> func_declaration .)
    MINUS           reduce using rule 12 (statement -> func_declaration .)
    LNOT            reduce using rule 12 (statement -> func_declaration .)
    NULL            reduce using rule 12 (statement -> func_declaration .)
    LPAREN          reduce using rule 12 (statement -> func_declaration .)
    ID              reduce using rule 12 (statement -> func_declaration .)
    RETURN          reduce using rule 12 (statement -> func_declaration .)
    FUNCTION        reduce using rule 12 (statement -> func_declaration .)
    STRUCTURE       reduce using rule 12 (statement -> func_declaration .)
    WHILE           reduce using rule 12 (statement -> func_declaration .)
    DO              reduce using rule 12 (statement -> func_declaration .)
    IF              reduce using rule 12 (statement -> func_declaration .)
    INTEGER         reduce using rule 12 (statement -> func_declaration .)
    DOUBLE          reduce using rule 12 (statement -> func_declaration .)
    BOOL            reduce using rule 12 (statement -> func_declaration .)
    STRING          reduce using rule 12 (statement -> func_declaration .)
    VOID            reduce using rule 12 (statement -> func_declaration .)
    DATATYPE        reduce using rule 12 (statement -> func_declaration .)
    $end            reduce using rule 12 (statement -> func_declaration .)
    RBRACE          reduce using rule 12 (statement -> func_declaration .)
    ELSE            reduce using rule 12 (statement -> func_declaration .)
    COMMA           reduce using rule 12 (statement -> func_declaration .)


state 11

    (13) statement -> struct_declaration .

    BREAK           reduce using rule 13 (statement -> struct_declaration .)
    CONTINUE        reduce using rule 13 (statement -> struct_declaration .)
    GOTO            reduce using rule 13 (statement -> struct_declaration .)
    MINUS           reduce using rule 13 (statement -> struct_declaration .)
    LNOT            reduce using rule 13 (statement -> struct_declaration .)
    NULL            reduce using rule 13 (statement -> struct_declaration .)
    LPAREN          reduce using rule 13 (statement -> struct_declaration .)
    ID              reduce using rule 13 (statement -> struct_declaration .)
    RETURN          reduce using rule 13 (statement -> struct_declaration .)
    FUNCTION        reduce using rule 13 (statement -> struct_declaration .)
    STRUCTURE       reduce using rule 13 (statement -> struct_declaration .)
    WHILE           reduce using rule 13 (statement -> struct_declaration .)
    DO              reduce using rule 13 (statement -> struct_declaration .)
    IF              reduce using rule 13 (statement -> struct_declaration .)
    INTEGER         reduce using rule 13 (statement -> struct_declaration .)
    DOUBLE          reduce using rule 13 (statement -> struct_declaration .)
    BOOL            reduce using rule 13 (statement -> struct_declaration .)
    STRING          reduce using rule 13 (statement -> struct_declaration .)
    VOID            reduce using rule 13 (statement -> struct_declaration .)
    DATATYPE        reduce using rule 13 (statement -> struct_declaration .)
    $end            reduce using rule 13 (statement -> struct_declaration .)
    RBRACE          reduce using rule 13 (statement -> struct_declaration .)
    ELSE            reduce using rule 13 (statement -> struct_declaration .)
    COMMA           reduce using rule 13 (statement -> struct_declaration .)


state 12

    (14) statement -> while .

    BREAK           reduce using rule 14 (statement -> while .)
    CONTINUE        reduce using rule 14 (statement -> while .)
    GOTO            reduce using rule 14 (statement -> while .)
    MINUS           reduce using rule 14 (statement -> while .)
    LNOT            reduce using rule 14 (statement -> while .)
    NULL            reduce using rule 14 (statement -> while .)
    LPAREN          reduce using rule 14 (statement -> while .)
    ID              reduce using rule 14 (statement -> while .)
    RETURN          reduce using rule 14 (statement -> while .)
    FUNCTION        reduce using rule 14 (statement -> while .)
    STRUCTURE       reduce using rule 14 (statement -> while .)
    WHILE           reduce using rule 14 (statement -> while .)
    DO              reduce using rule 14 (statement -> while .)
    IF              reduce using rule 14 (statement -> while .)
    INTEGER         reduce using rule 14 (statement -> while .)
    DOUBLE          reduce using rule 14 (statement -> while .)
    BOOL            reduce using rule 14 (statement -> while .)
    STRING          reduce using rule 14 (statement -> while .)
    VOID            reduce using rule 14 (statement -> while .)
    DATATYPE        reduce using rule 14 (statement -> while .)
    $end            reduce using rule 14 (statement -> while .)
    RBRACE          reduce using rule 14 (statement -> while .)
    ELSE            reduce using rule 14 (statement -> while .)
    COMMA           reduce using rule 14 (statement -> while .)


state 13

    (15) statement -> BREAK . SEMI

    SEMI            shift and go to state 62


state 14

    (16) statement -> CONTINUE . SEMI

    SEMI            shift and go to state 63


state 15

    (17) statement -> GOTO . ID SEMI

    ID              shift and go to state 64


state 16

    (80) expr -> ID . LBRACKET expr RBRACKET
    (40) var_declaration -> ID . id EQUALS LBRACE args RBRACE SEMI
    (41) assign -> ID . EQUALS expr SEMI
    (42) assign -> ID . EQUALS LBRACE args RBRACE SEMI
    (43) assign -> ID . DOT ID EQUALS expr SEMI
    (81) goto_mark -> ID . COLON
    (83) id -> ID .
    (83) id -> . ID

    LBRACKET        shift and go to state 66
    EQUALS          shift and go to state 68
    DOT             shift and go to state 69
    COLON           shift and go to state 70
    LPAREN          reduce using rule 83 (id -> ID .)
    SEMI            reduce using rule 83 (id -> ID .)
    PLUS            reduce using rule 83 (id -> ID .)
    MINUS           reduce using rule 83 (id -> ID .)
    MUL             reduce using rule 83 (id -> ID .)
    DIVIDE          reduce using rule 83 (id -> ID .)
    INTDIVIDE       reduce using rule 83 (id -> ID .)
    MODULO          reduce using rule 83 (id -> ID .)
    POW             reduce using rule 83 (id -> ID .)
    LE              reduce using rule 83 (id -> ID .)
    GE              reduce using rule 83 (id -> ID .)
    LT              reduce using rule 83 (id -> ID .)
    GT              reduce using rule 83 (id -> ID .)
    EQ              reduce using rule 83 (id -> ID .)
    NE              reduce using rule 83 (id -> ID .)
    LAND            reduce using rule 83 (id -> ID .)
    LOR             reduce using rule 83 (id -> ID .)
    BAND            reduce using rule 83 (id -> ID .)
    BOR             reduce using rule 83 (id -> ID .)
    ID              shift and go to state 65

    id                             shift and go to state 67

state 17

    (18) statement -> goto_mark .

    BREAK           reduce using rule 18 (statement -> goto_mark .)
    CONTINUE        reduce using rule 18 (statement -> goto_mark .)
    GOTO            reduce using rule 18 (statement -> goto_mark .)
    MINUS           reduce using rule 18 (statement -> goto_mark .)
    LNOT            reduce using rule 18 (statement -> goto_mark .)
    NULL            reduce using rule 18 (statement -> goto_mark .)
    LPAREN          reduce using rule 18 (statement -> goto_mark .)
    ID              reduce using rule 18 (statement -> goto_mark .)
    RETURN          reduce using rule 18 (statement -> goto_mark .)
    FUNCTION        reduce using rule 18 (statement -> goto_mark .)
    STRUCTURE       reduce using rule 18 (statement -> goto_mark .)
    WHILE           reduce using rule 18 (statement -> goto_mark .)
    DO              reduce using rule 18 (statement -> goto_mark .)
    IF              reduce using rule 18 (statement -> goto_mark .)
    INTEGER         reduce using rule 18 (statement -> goto_mark .)
    DOUBLE          reduce using rule 18 (statement -> goto_mark .)
    BOOL            reduce using rule 18 (statement -> goto_mark .)
    STRING          reduce using rule 18 (statement -> goto_mark .)
    VOID            reduce using rule 18 (statement -> goto_mark .)
    DATATYPE        reduce using rule 18 (statement -> goto_mark .)
    $end            reduce using rule 18 (statement -> goto_mark .)
    RBRACE          reduce using rule 18 (statement -> goto_mark .)
    ELSE            reduce using rule 18 (statement -> goto_mark .)
    COMMA           reduce using rule 18 (statement -> goto_mark .)


state 18

    (19) statement -> if-else .

    BREAK           reduce using rule 19 (statement -> if-else .)
    CONTINUE        reduce using rule 19 (statement -> if-else .)
    GOTO            reduce using rule 19 (statement -> if-else .)
    MINUS           reduce using rule 19 (statement -> if-else .)
    LNOT            reduce using rule 19 (statement -> if-else .)
    NULL            reduce using rule 19 (statement -> if-else .)
    LPAREN          reduce using rule 19 (statement -> if-else .)
    ID              reduce using rule 19 (statement -> if-else .)
    RETURN          reduce using rule 19 (statement -> if-else .)
    FUNCTION        reduce using rule 19 (statement -> if-else .)
    STRUCTURE       reduce using rule 19 (statement -> if-else .)
    WHILE           reduce using rule 19 (statement -> if-else .)
    DO              reduce using rule 19 (statement -> if-else .)
    IF              reduce using rule 19 (statement -> if-else .)
    INTEGER         reduce using rule 19 (statement -> if-else .)
    DOUBLE          reduce using rule 19 (statement -> if-else .)
    BOOL            reduce using rule 19 (statement -> if-else .)
    STRING          reduce using rule 19 (statement -> if-else .)
    VOID            reduce using rule 19 (statement -> if-else .)
    DATATYPE        reduce using rule 19 (statement -> if-else .)
    $end            reduce using rule 19 (statement -> if-else .)
    RBRACE          reduce using rule 19 (statement -> if-else .)
    ELSE            reduce using rule 19 (statement -> if-else .)
    COMMA           reduce using rule 19 (statement -> if-else .)


state 19

    (34) expr -> id . LPAREN args RPAREN
    (65) expr -> id .

    LPAREN          shift and go to state 71
    SEMI            reduce using rule 65 (expr -> id .)
    PLUS            reduce using rule 65 (expr -> id .)
    MINUS           reduce using rule 65 (expr -> id .)
    MUL             reduce using rule 65 (expr -> id .)
    DIVIDE          reduce using rule 65 (expr -> id .)
    INTDIVIDE       reduce using rule 65 (expr -> id .)
    MODULO          reduce using rule 65 (expr -> id .)
    POW             reduce using rule 65 (expr -> id .)
    LE              reduce using rule 65 (expr -> id .)
    GE              reduce using rule 65 (expr -> id .)
    LT              reduce using rule 65 (expr -> id .)
    GT              reduce using rule 65 (expr -> id .)
    EQ              reduce using rule 65 (expr -> id .)
    NE              reduce using rule 65 (expr -> id .)
    LAND            reduce using rule 65 (expr -> id .)
    LOR             reduce using rule 65 (expr -> id .)
    BAND            reduce using rule 65 (expr -> id .)
    BOR             reduce using rule 65 (expr -> id .)
    RPAREN          reduce using rule 65 (expr -> id .)
    RBRACKET        reduce using rule 65 (expr -> id .)
    COMMA           reduce using rule 65 (expr -> id .)
    RBRACE          reduce using rule 65 (expr -> id .)


state 20

    (72) expr -> LPAREN . expr RPAREN
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 72
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 21

    (59) expr -> MINUS . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 75
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 22

    (62) expr -> LNOT . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 76
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 23

    (66) expr -> int .

    SEMI            reduce using rule 66 (expr -> int .)
    PLUS            reduce using rule 66 (expr -> int .)
    MINUS           reduce using rule 66 (expr -> int .)
    MUL             reduce using rule 66 (expr -> int .)
    DIVIDE          reduce using rule 66 (expr -> int .)
    INTDIVIDE       reduce using rule 66 (expr -> int .)
    MODULO          reduce using rule 66 (expr -> int .)
    POW             reduce using rule 66 (expr -> int .)
    LE              reduce using rule 66 (expr -> int .)
    GE              reduce using rule 66 (expr -> int .)
    LT              reduce using rule 66 (expr -> int .)
    GT              reduce using rule 66 (expr -> int .)
    EQ              reduce using rule 66 (expr -> int .)
    NE              reduce using rule 66 (expr -> int .)
    LAND            reduce using rule 66 (expr -> int .)
    LOR             reduce using rule 66 (expr -> int .)
    BAND            reduce using rule 66 (expr -> int .)
    BOR             reduce using rule 66 (expr -> int .)
    RPAREN          reduce using rule 66 (expr -> int .)
    RBRACKET        reduce using rule 66 (expr -> int .)
    COMMA           reduce using rule 66 (expr -> int .)
    RBRACE          reduce using rule 66 (expr -> int .)


state 24

    (67) expr -> double .

    SEMI            reduce using rule 67 (expr -> double .)
    PLUS            reduce using rule 67 (expr -> double .)
    MINUS           reduce using rule 67 (expr -> double .)
    MUL             reduce using rule 67 (expr -> double .)
    DIVIDE          reduce using rule 67 (expr -> double .)
    INTDIVIDE       reduce using rule 67 (expr -> double .)
    MODULO          reduce using rule 67 (expr -> double .)
    POW             reduce using rule 67 (expr -> double .)
    LE              reduce using rule 67 (expr -> double .)
    GE              reduce using rule 67 (expr -> double .)
    LT              reduce using rule 67 (expr -> double .)
    GT              reduce using rule 67 (expr -> double .)
    EQ              reduce using rule 67 (expr -> double .)
    NE              reduce using rule 67 (expr -> double .)
    LAND            reduce using rule 67 (expr -> double .)
    LOR             reduce using rule 67 (expr -> double .)
    BAND            reduce using rule 67 (expr -> double .)
    BOR             reduce using rule 67 (expr -> double .)
    RPAREN          reduce using rule 67 (expr -> double .)
    RBRACKET        reduce using rule 67 (expr -> double .)
    COMMA           reduce using rule 67 (expr -> double .)
    RBRACE          reduce using rule 67 (expr -> double .)


state 25

    (68) expr -> bool .

    SEMI            reduce using rule 68 (expr -> bool .)
    PLUS            reduce using rule 68 (expr -> bool .)
    MINUS           reduce using rule 68 (expr -> bool .)
    MUL             reduce using rule 68 (expr -> bool .)
    DIVIDE          reduce using rule 68 (expr -> bool .)
    INTDIVIDE       reduce using rule 68 (expr -> bool .)
    MODULO          reduce using rule 68 (expr -> bool .)
    POW             reduce using rule 68 (expr -> bool .)
    LE              reduce using rule 68 (expr -> bool .)
    GE              reduce using rule 68 (expr -> bool .)
    LT              reduce using rule 68 (expr -> bool .)
    GT              reduce using rule 68 (expr -> bool .)
    EQ              reduce using rule 68 (expr -> bool .)
    NE              reduce using rule 68 (expr -> bool .)
    LAND            reduce using rule 68 (expr -> bool .)
    LOR             reduce using rule 68 (expr -> bool .)
    BAND            reduce using rule 68 (expr -> bool .)
    BOR             reduce using rule 68 (expr -> bool .)
    RPAREN          reduce using rule 68 (expr -> bool .)
    RBRACKET        reduce using rule 68 (expr -> bool .)
    COMMA           reduce using rule 68 (expr -> bool .)
    RBRACE          reduce using rule 68 (expr -> bool .)


state 26

    (69) expr -> str .

    SEMI            reduce using rule 69 (expr -> str .)
    PLUS            reduce using rule 69 (expr -> str .)
    MINUS           reduce using rule 69 (expr -> str .)
    MUL             reduce using rule 69 (expr -> str .)
    DIVIDE          reduce using rule 69 (expr -> str .)
    INTDIVIDE       reduce using rule 69 (expr -> str .)
    MODULO          reduce using rule 69 (expr -> str .)
    POW             reduce using rule 69 (expr -> str .)
    LE              reduce using rule 69 (expr -> str .)
    GE              reduce using rule 69 (expr -> str .)
    LT              reduce using rule 69 (expr -> str .)
    GT              reduce using rule 69 (expr -> str .)
    EQ              reduce using rule 69 (expr -> str .)
    NE              reduce using rule 69 (expr -> str .)
    LAND            reduce using rule 69 (expr -> str .)
    LOR             reduce using rule 69 (expr -> str .)
    BAND            reduce using rule 69 (expr -> str .)
    BOR             reduce using rule 69 (expr -> str .)
    RPAREN          reduce using rule 69 (expr -> str .)
    RBRACKET        reduce using rule 69 (expr -> str .)
    COMMA           reduce using rule 69 (expr -> str .)
    RBRACE          reduce using rule 69 (expr -> str .)


state 27

    (70) expr -> void .

    SEMI            reduce using rule 70 (expr -> void .)
    PLUS            reduce using rule 70 (expr -> void .)
    MINUS           reduce using rule 70 (expr -> void .)
    MUL             reduce using rule 70 (expr -> void .)
    DIVIDE          reduce using rule 70 (expr -> void .)
    INTDIVIDE       reduce using rule 70 (expr -> void .)
    MODULO          reduce using rule 70 (expr -> void .)
    POW             reduce using rule 70 (expr -> void .)
    LE              reduce using rule 70 (expr -> void .)
    GE              reduce using rule 70 (expr -> void .)
    LT              reduce using rule 70 (expr -> void .)
    GT              reduce using rule 70 (expr -> void .)
    EQ              reduce using rule 70 (expr -> void .)
    NE              reduce using rule 70 (expr -> void .)
    LAND            reduce using rule 70 (expr -> void .)
    LOR             reduce using rule 70 (expr -> void .)
    BAND            reduce using rule 70 (expr -> void .)
    BOR             reduce using rule 70 (expr -> void .)
    RPAREN          reduce using rule 70 (expr -> void .)
    RBRACKET        reduce using rule 70 (expr -> void .)
    COMMA           reduce using rule 70 (expr -> void .)
    RBRACE          reduce using rule 70 (expr -> void .)


state 28

    (71) expr -> NULL .

    SEMI            reduce using rule 71 (expr -> NULL .)
    PLUS            reduce using rule 71 (expr -> NULL .)
    MINUS           reduce using rule 71 (expr -> NULL .)
    MUL             reduce using rule 71 (expr -> NULL .)
    DIVIDE          reduce using rule 71 (expr -> NULL .)
    INTDIVIDE       reduce using rule 71 (expr -> NULL .)
    MODULO          reduce using rule 71 (expr -> NULL .)
    POW             reduce using rule 71 (expr -> NULL .)
    LE              reduce using rule 71 (expr -> NULL .)
    GE              reduce using rule 71 (expr -> NULL .)
    LT              reduce using rule 71 (expr -> NULL .)
    GT              reduce using rule 71 (expr -> NULL .)
    EQ              reduce using rule 71 (expr -> NULL .)
    NE              reduce using rule 71 (expr -> NULL .)
    LAND            reduce using rule 71 (expr -> NULL .)
    LOR             reduce using rule 71 (expr -> NULL .)
    BAND            reduce using rule 71 (expr -> NULL .)
    BOR             reduce using rule 71 (expr -> NULL .)
    RPAREN          reduce using rule 71 (expr -> NULL .)
    RBRACKET        reduce using rule 71 (expr -> NULL .)
    COMMA           reduce using rule 71 (expr -> NULL .)
    RBRACE          reduce using rule 71 (expr -> NULL .)


state 29

    (78) expr -> datatype . LBRACKET RBRACKET id
    (79) expr -> datatype . LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (38) var_declaration -> datatype . id EQUALS expr SEMI
    (39) var_declaration -> datatype . id SEMI
    (83) id -> . ID

    LBRACKET        shift and go to state 77
    ID              shift and go to state 65

    id                             shift and go to state 78

state 30

    (73) int -> INTEGER .

    SEMI            reduce using rule 73 (int -> INTEGER .)
    PLUS            reduce using rule 73 (int -> INTEGER .)
    MINUS           reduce using rule 73 (int -> INTEGER .)
    MUL             reduce using rule 73 (int -> INTEGER .)
    DIVIDE          reduce using rule 73 (int -> INTEGER .)
    INTDIVIDE       reduce using rule 73 (int -> INTEGER .)
    MODULO          reduce using rule 73 (int -> INTEGER .)
    POW             reduce using rule 73 (int -> INTEGER .)
    LE              reduce using rule 73 (int -> INTEGER .)
    GE              reduce using rule 73 (int -> INTEGER .)
    LT              reduce using rule 73 (int -> INTEGER .)
    GT              reduce using rule 73 (int -> INTEGER .)
    EQ              reduce using rule 73 (int -> INTEGER .)
    NE              reduce using rule 73 (int -> INTEGER .)
    LAND            reduce using rule 73 (int -> INTEGER .)
    LOR             reduce using rule 73 (int -> INTEGER .)
    BAND            reduce using rule 73 (int -> INTEGER .)
    BOR             reduce using rule 73 (int -> INTEGER .)
    RPAREN          reduce using rule 73 (int -> INTEGER .)
    RBRACKET        reduce using rule 73 (int -> INTEGER .)
    COMMA           reduce using rule 73 (int -> INTEGER .)
    RBRACE          reduce using rule 73 (int -> INTEGER .)


state 31

    (44) return -> RETURN . expr SEMI
    (45) return -> RETURN . SEMI
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    SEMI            shift and go to state 80
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 79
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 32

    (5) func_declaration -> FUNCTION . datatype id LPAREN params RPAREN body_block
    (82) datatype -> . DATATYPE

    DATATYPE        shift and go to state 41

    datatype                       shift and go to state 81

state 33

    (25) struct_declaration -> STRUCTURE . id LBRACE struct_params RBRACE
    (83) id -> . ID

    ID              shift and go to state 65

    id                             shift and go to state 82

state 34

    (20) while -> WHILE . conditional body_block
    (24) conditional -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    conditional                    shift and go to state 83

state 35

    (21) while -> DO . body_block WHILE conditional SEMI
    (3) body_block -> . stmt_list
    (4) body_block -> . LBRACE stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    LBRACE          shift and go to state 4
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    body_block                     shift and go to state 85
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 36

    (22) if-else -> IF . conditional body_block
    (23) if-else -> IF . conditional body_block ELSE body_block
    (24) conditional -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    conditional                    shift and go to state 86

state 37

    (74) double -> DOUBLE .

    SEMI            reduce using rule 74 (double -> DOUBLE .)
    PLUS            reduce using rule 74 (double -> DOUBLE .)
    MINUS           reduce using rule 74 (double -> DOUBLE .)
    MUL             reduce using rule 74 (double -> DOUBLE .)
    DIVIDE          reduce using rule 74 (double -> DOUBLE .)
    INTDIVIDE       reduce using rule 74 (double -> DOUBLE .)
    MODULO          reduce using rule 74 (double -> DOUBLE .)
    POW             reduce using rule 74 (double -> DOUBLE .)
    LE              reduce using rule 74 (double -> DOUBLE .)
    GE              reduce using rule 74 (double -> DOUBLE .)
    LT              reduce using rule 74 (double -> DOUBLE .)
    GT              reduce using rule 74 (double -> DOUBLE .)
    EQ              reduce using rule 74 (double -> DOUBLE .)
    NE              reduce using rule 74 (double -> DOUBLE .)
    LAND            reduce using rule 74 (double -> DOUBLE .)
    LOR             reduce using rule 74 (double -> DOUBLE .)
    BAND            reduce using rule 74 (double -> DOUBLE .)
    BOR             reduce using rule 74 (double -> DOUBLE .)
    RPAREN          reduce using rule 74 (double -> DOUBLE .)
    RBRACKET        reduce using rule 74 (double -> DOUBLE .)
    COMMA           reduce using rule 74 (double -> DOUBLE .)
    RBRACE          reduce using rule 74 (double -> DOUBLE .)


state 38

    (75) bool -> BOOL .

    SEMI            reduce using rule 75 (bool -> BOOL .)
    PLUS            reduce using rule 75 (bool -> BOOL .)
    MINUS           reduce using rule 75 (bool -> BOOL .)
    MUL             reduce using rule 75 (bool -> BOOL .)
    DIVIDE          reduce using rule 75 (bool -> BOOL .)
    INTDIVIDE       reduce using rule 75 (bool -> BOOL .)
    MODULO          reduce using rule 75 (bool -> BOOL .)
    POW             reduce using rule 75 (bool -> BOOL .)
    LE              reduce using rule 75 (bool -> BOOL .)
    GE              reduce using rule 75 (bool -> BOOL .)
    LT              reduce using rule 75 (bool -> BOOL .)
    GT              reduce using rule 75 (bool -> BOOL .)
    EQ              reduce using rule 75 (bool -> BOOL .)
    NE              reduce using rule 75 (bool -> BOOL .)
    LAND            reduce using rule 75 (bool -> BOOL .)
    LOR             reduce using rule 75 (bool -> BOOL .)
    BAND            reduce using rule 75 (bool -> BOOL .)
    BOR             reduce using rule 75 (bool -> BOOL .)
    RPAREN          reduce using rule 75 (bool -> BOOL .)
    RBRACKET        reduce using rule 75 (bool -> BOOL .)
    COMMA           reduce using rule 75 (bool -> BOOL .)
    RBRACE          reduce using rule 75 (bool -> BOOL .)


state 39

    (76) str -> STRING .

    SEMI            reduce using rule 76 (str -> STRING .)
    PLUS            reduce using rule 76 (str -> STRING .)
    MINUS           reduce using rule 76 (str -> STRING .)
    MUL             reduce using rule 76 (str -> STRING .)
    DIVIDE          reduce using rule 76 (str -> STRING .)
    INTDIVIDE       reduce using rule 76 (str -> STRING .)
    MODULO          reduce using rule 76 (str -> STRING .)
    POW             reduce using rule 76 (str -> STRING .)
    LE              reduce using rule 76 (str -> STRING .)
    GE              reduce using rule 76 (str -> STRING .)
    LT              reduce using rule 76 (str -> STRING .)
    GT              reduce using rule 76 (str -> STRING .)
    EQ              reduce using rule 76 (str -> STRING .)
    NE              reduce using rule 76 (str -> STRING .)
    LAND            reduce using rule 76 (str -> STRING .)
    LOR             reduce using rule 76 (str -> STRING .)
    BAND            reduce using rule 76 (str -> STRING .)
    BOR             reduce using rule 76 (str -> STRING .)
    RPAREN          reduce using rule 76 (str -> STRING .)
    RBRACKET        reduce using rule 76 (str -> STRING .)
    COMMA           reduce using rule 76 (str -> STRING .)
    RBRACE          reduce using rule 76 (str -> STRING .)


state 40

    (77) void -> VOID .

    SEMI            reduce using rule 77 (void -> VOID .)
    PLUS            reduce using rule 77 (void -> VOID .)
    MINUS           reduce using rule 77 (void -> VOID .)
    MUL             reduce using rule 77 (void -> VOID .)
    DIVIDE          reduce using rule 77 (void -> VOID .)
    INTDIVIDE       reduce using rule 77 (void -> VOID .)
    MODULO          reduce using rule 77 (void -> VOID .)
    POW             reduce using rule 77 (void -> VOID .)
    LE              reduce using rule 77 (void -> VOID .)
    GE              reduce using rule 77 (void -> VOID .)
    LT              reduce using rule 77 (void -> VOID .)
    GT              reduce using rule 77 (void -> VOID .)
    EQ              reduce using rule 77 (void -> VOID .)
    NE              reduce using rule 77 (void -> VOID .)
    LAND            reduce using rule 77 (void -> VOID .)
    LOR             reduce using rule 77 (void -> VOID .)
    BAND            reduce using rule 77 (void -> VOID .)
    BOR             reduce using rule 77 (void -> VOID .)
    RPAREN          reduce using rule 77 (void -> VOID .)
    RBRACKET        reduce using rule 77 (void -> VOID .)
    COMMA           reduce using rule 77 (void -> VOID .)
    RBRACE          reduce using rule 77 (void -> VOID .)


state 41

    (82) datatype -> DATATYPE .

    LBRACKET        reduce using rule 82 (datatype -> DATATYPE .)
    ID              reduce using rule 82 (datatype -> DATATYPE .)


state 42

    (6) stmt_list -> stmt_list statement .

    BREAK           reduce using rule 6 (stmt_list -> stmt_list statement .)
    CONTINUE        reduce using rule 6 (stmt_list -> stmt_list statement .)
    GOTO            reduce using rule 6 (stmt_list -> stmt_list statement .)
    MINUS           reduce using rule 6 (stmt_list -> stmt_list statement .)
    LNOT            reduce using rule 6 (stmt_list -> stmt_list statement .)
    NULL            reduce using rule 6 (stmt_list -> stmt_list statement .)
    LPAREN          reduce using rule 6 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 6 (stmt_list -> stmt_list statement .)
    RETURN          reduce using rule 6 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 6 (stmt_list -> stmt_list statement .)
    STRUCTURE       reduce using rule 6 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 6 (stmt_list -> stmt_list statement .)
    DO              reduce using rule 6 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 6 (stmt_list -> stmt_list statement .)
    INTEGER         reduce using rule 6 (stmt_list -> stmt_list statement .)
    DOUBLE          reduce using rule 6 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 6 (stmt_list -> stmt_list statement .)
    STRING          reduce using rule 6 (stmt_list -> stmt_list statement .)
    VOID            reduce using rule 6 (stmt_list -> stmt_list statement .)
    DATATYPE        reduce using rule 6 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 6 (stmt_list -> stmt_list statement .)
    RBRACE          reduce using rule 6 (stmt_list -> stmt_list statement .)
    ELSE            reduce using rule 6 (stmt_list -> stmt_list statement .)
    COMMA           reduce using rule 6 (stmt_list -> stmt_list statement .)


state 43

    (4) body_block -> LBRACE stmt_list . RBRACE
    (6) stmt_list -> stmt_list . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    RBRACE          shift and go to state 87
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    statement                      shift and go to state 42
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 44

    (8) statement -> expr SEMI .

    BREAK           reduce using rule 8 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 8 (statement -> expr SEMI .)
    GOTO            reduce using rule 8 (statement -> expr SEMI .)
    MINUS           reduce using rule 8 (statement -> expr SEMI .)
    LNOT            reduce using rule 8 (statement -> expr SEMI .)
    NULL            reduce using rule 8 (statement -> expr SEMI .)
    LPAREN          reduce using rule 8 (statement -> expr SEMI .)
    ID              reduce using rule 8 (statement -> expr SEMI .)
    RETURN          reduce using rule 8 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 8 (statement -> expr SEMI .)
    STRUCTURE       reduce using rule 8 (statement -> expr SEMI .)
    WHILE           reduce using rule 8 (statement -> expr SEMI .)
    DO              reduce using rule 8 (statement -> expr SEMI .)
    IF              reduce using rule 8 (statement -> expr SEMI .)
    INTEGER         reduce using rule 8 (statement -> expr SEMI .)
    DOUBLE          reduce using rule 8 (statement -> expr SEMI .)
    BOOL            reduce using rule 8 (statement -> expr SEMI .)
    STRING          reduce using rule 8 (statement -> expr SEMI .)
    VOID            reduce using rule 8 (statement -> expr SEMI .)
    DATATYPE        reduce using rule 8 (statement -> expr SEMI .)
    $end            reduce using rule 8 (statement -> expr SEMI .)
    RBRACE          reduce using rule 8 (statement -> expr SEMI .)
    ELSE            reduce using rule 8 (statement -> expr SEMI .)
    COMMA           reduce using rule 8 (statement -> expr SEMI .)


state 45

    (46) expr -> expr PLUS . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 88
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 46

    (47) expr -> expr MINUS . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 89
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 47

    (48) expr -> expr MUL . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 90
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 48

    (49) expr -> expr DIVIDE . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 91
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 49

    (50) expr -> expr INTDIVIDE . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 92
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 50

    (51) expr -> expr MODULO . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 93
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 51

    (52) expr -> expr POW . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 94
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 52

    (53) expr -> expr LE . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 95
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 53

    (54) expr -> expr GE . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 96
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 54

    (55) expr -> expr LT . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 97
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 55

    (56) expr -> expr GT . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 98
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 56

    (57) expr -> expr EQ . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 99
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 57

    (58) expr -> expr NE . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 100
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 58

    (60) expr -> expr LAND . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 101
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 59

    (61) expr -> expr LOR . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 102
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 60

    (63) expr -> expr BAND . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 103
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 61

    (64) expr -> expr BOR . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 104
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 62

    (15) statement -> BREAK SEMI .

    BREAK           reduce using rule 15 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 15 (statement -> BREAK SEMI .)
    GOTO            reduce using rule 15 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 15 (statement -> BREAK SEMI .)
    LNOT            reduce using rule 15 (statement -> BREAK SEMI .)
    NULL            reduce using rule 15 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 15 (statement -> BREAK SEMI .)
    ID              reduce using rule 15 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 15 (statement -> BREAK SEMI .)
    FUNCTION        reduce using rule 15 (statement -> BREAK SEMI .)
    STRUCTURE       reduce using rule 15 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 15 (statement -> BREAK SEMI .)
    DO              reduce using rule 15 (statement -> BREAK SEMI .)
    IF              reduce using rule 15 (statement -> BREAK SEMI .)
    INTEGER         reduce using rule 15 (statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 15 (statement -> BREAK SEMI .)
    BOOL            reduce using rule 15 (statement -> BREAK SEMI .)
    STRING          reduce using rule 15 (statement -> BREAK SEMI .)
    VOID            reduce using rule 15 (statement -> BREAK SEMI .)
    DATATYPE        reduce using rule 15 (statement -> BREAK SEMI .)
    $end            reduce using rule 15 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 15 (statement -> BREAK SEMI .)
    ELSE            reduce using rule 15 (statement -> BREAK SEMI .)
    COMMA           reduce using rule 15 (statement -> BREAK SEMI .)


state 63

    (16) statement -> CONTINUE SEMI .

    BREAK           reduce using rule 16 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 16 (statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 16 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 16 (statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 16 (statement -> CONTINUE SEMI .)
    NULL            reduce using rule 16 (statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 16 (statement -> CONTINUE SEMI .)
    ID              reduce using rule 16 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 16 (statement -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 16 (statement -> CONTINUE SEMI .)
    STRUCTURE       reduce using rule 16 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 16 (statement -> CONTINUE SEMI .)
    DO              reduce using rule 16 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 16 (statement -> CONTINUE SEMI .)
    INTEGER         reduce using rule 16 (statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 16 (statement -> CONTINUE SEMI .)
    BOOL            reduce using rule 16 (statement -> CONTINUE SEMI .)
    STRING          reduce using rule 16 (statement -> CONTINUE SEMI .)
    VOID            reduce using rule 16 (statement -> CONTINUE SEMI .)
    DATATYPE        reduce using rule 16 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 16 (statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 16 (statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 16 (statement -> CONTINUE SEMI .)
    COMMA           reduce using rule 16 (statement -> CONTINUE SEMI .)


state 64

    (17) statement -> GOTO ID . SEMI

    SEMI            shift and go to state 105


state 65

    (83) id -> ID .

    EQUALS          reduce using rule 83 (id -> ID .)
    SEMI            reduce using rule 83 (id -> ID .)
    LBRACE          reduce using rule 83 (id -> ID .)
    LPAREN          reduce using rule 83 (id -> ID .)
    PLUS            reduce using rule 83 (id -> ID .)
    MINUS           reduce using rule 83 (id -> ID .)
    MUL             reduce using rule 83 (id -> ID .)
    DIVIDE          reduce using rule 83 (id -> ID .)
    INTDIVIDE       reduce using rule 83 (id -> ID .)
    MODULO          reduce using rule 83 (id -> ID .)
    POW             reduce using rule 83 (id -> ID .)
    LE              reduce using rule 83 (id -> ID .)
    GE              reduce using rule 83 (id -> ID .)
    LT              reduce using rule 83 (id -> ID .)
    GT              reduce using rule 83 (id -> ID .)
    EQ              reduce using rule 83 (id -> ID .)
    NE              reduce using rule 83 (id -> ID .)
    LAND            reduce using rule 83 (id -> ID .)
    LOR             reduce using rule 83 (id -> ID .)
    BAND            reduce using rule 83 (id -> ID .)
    BOR             reduce using rule 83 (id -> ID .)
    RPAREN          reduce using rule 83 (id -> ID .)
    RBRACKET        reduce using rule 83 (id -> ID .)
    COMMA           reduce using rule 83 (id -> ID .)
    RBRACE          reduce using rule 83 (id -> ID .)


state 66

    (80) expr -> ID LBRACKET . expr RBRACKET
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 106
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 67

    (40) var_declaration -> ID id . EQUALS LBRACE args RBRACE SEMI

    EQUALS          shift and go to state 107


state 68

    (41) assign -> ID EQUALS . expr SEMI
    (42) assign -> ID EQUALS . LBRACE args RBRACE SEMI
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    LBRACE          shift and go to state 109
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 108
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 69

    (43) assign -> ID DOT . ID EQUALS expr SEMI

    ID              shift and go to state 110


state 70

    (81) goto_mark -> ID COLON .

    BREAK           reduce using rule 81 (goto_mark -> ID COLON .)
    CONTINUE        reduce using rule 81 (goto_mark -> ID COLON .)
    GOTO            reduce using rule 81 (goto_mark -> ID COLON .)
    MINUS           reduce using rule 81 (goto_mark -> ID COLON .)
    LNOT            reduce using rule 81 (goto_mark -> ID COLON .)
    NULL            reduce using rule 81 (goto_mark -> ID COLON .)
    LPAREN          reduce using rule 81 (goto_mark -> ID COLON .)
    ID              reduce using rule 81 (goto_mark -> ID COLON .)
    RETURN          reduce using rule 81 (goto_mark -> ID COLON .)
    FUNCTION        reduce using rule 81 (goto_mark -> ID COLON .)
    STRUCTURE       reduce using rule 81 (goto_mark -> ID COLON .)
    WHILE           reduce using rule 81 (goto_mark -> ID COLON .)
    DO              reduce using rule 81 (goto_mark -> ID COLON .)
    IF              reduce using rule 81 (goto_mark -> ID COLON .)
    INTEGER         reduce using rule 81 (goto_mark -> ID COLON .)
    DOUBLE          reduce using rule 81 (goto_mark -> ID COLON .)
    BOOL            reduce using rule 81 (goto_mark -> ID COLON .)
    STRING          reduce using rule 81 (goto_mark -> ID COLON .)
    VOID            reduce using rule 81 (goto_mark -> ID COLON .)
    DATATYPE        reduce using rule 81 (goto_mark -> ID COLON .)
    $end            reduce using rule 81 (goto_mark -> ID COLON .)
    RBRACE          reduce using rule 81 (goto_mark -> ID COLON .)
    ELSE            reduce using rule 81 (goto_mark -> ID COLON .)
    COMMA           reduce using rule 81 (goto_mark -> ID COLON .)


state 71

    (34) expr -> id LPAREN . args RPAREN
    (35) args -> .
    (36) args -> . expr
    (37) args -> . args COMMA expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    RPAREN          reduce using rule 35 (args -> .)
    COMMA           reduce using rule 35 (args -> .)
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    id                             shift and go to state 19
    args                           shift and go to state 111
    expr                           shift and go to state 112
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 72

    (72) expr -> LPAREN expr . RPAREN
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 73

    (78) expr -> datatype . LBRACKET RBRACKET id
    (79) expr -> datatype . LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET

    LBRACKET        shift and go to state 77


state 74

    (80) expr -> ID . LBRACKET expr RBRACKET
    (83) id -> ID .

    LBRACKET        shift and go to state 66
    LPAREN          reduce using rule 83 (id -> ID .)
    RPAREN          reduce using rule 83 (id -> ID .)
    PLUS            reduce using rule 83 (id -> ID .)
    MINUS           reduce using rule 83 (id -> ID .)
    MUL             reduce using rule 83 (id -> ID .)
    DIVIDE          reduce using rule 83 (id -> ID .)
    INTDIVIDE       reduce using rule 83 (id -> ID .)
    MODULO          reduce using rule 83 (id -> ID .)
    POW             reduce using rule 83 (id -> ID .)
    LE              reduce using rule 83 (id -> ID .)
    GE              reduce using rule 83 (id -> ID .)
    LT              reduce using rule 83 (id -> ID .)
    GT              reduce using rule 83 (id -> ID .)
    EQ              reduce using rule 83 (id -> ID .)
    NE              reduce using rule 83 (id -> ID .)
    LAND            reduce using rule 83 (id -> ID .)
    LOR             reduce using rule 83 (id -> ID .)
    BAND            reduce using rule 83 (id -> ID .)
    BOR             reduce using rule 83 (id -> ID .)
    SEMI            reduce using rule 83 (id -> ID .)
    RBRACKET        reduce using rule 83 (id -> ID .)
    COMMA           reduce using rule 83 (id -> ID .)
    RBRACE          reduce using rule 83 (id -> ID .)


state 75

    (59) expr -> MINUS expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 59 (expr -> MINUS expr .)
    PLUS            reduce using rule 59 (expr -> MINUS expr .)
    MINUS           reduce using rule 59 (expr -> MINUS expr .)
    MUL             reduce using rule 59 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 59 (expr -> MINUS expr .)
    INTDIVIDE       reduce using rule 59 (expr -> MINUS expr .)
    MODULO          reduce using rule 59 (expr -> MINUS expr .)
    POW             reduce using rule 59 (expr -> MINUS expr .)
    LE              reduce using rule 59 (expr -> MINUS expr .)
    GE              reduce using rule 59 (expr -> MINUS expr .)
    LT              reduce using rule 59 (expr -> MINUS expr .)
    GT              reduce using rule 59 (expr -> MINUS expr .)
    EQ              reduce using rule 59 (expr -> MINUS expr .)
    NE              reduce using rule 59 (expr -> MINUS expr .)
    LAND            reduce using rule 59 (expr -> MINUS expr .)
    LOR             reduce using rule 59 (expr -> MINUS expr .)
    BAND            reduce using rule 59 (expr -> MINUS expr .)
    BOR             reduce using rule 59 (expr -> MINUS expr .)
    RPAREN          reduce using rule 59 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 59 (expr -> MINUS expr .)
    COMMA           reduce using rule 59 (expr -> MINUS expr .)
    RBRACE          reduce using rule 59 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! POW             [ shift and go to state 51 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 76

    (62) expr -> LNOT expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 62 (expr -> LNOT expr .)
    PLUS            reduce using rule 62 (expr -> LNOT expr .)
    MINUS           reduce using rule 62 (expr -> LNOT expr .)
    MUL             reduce using rule 62 (expr -> LNOT expr .)
    DIVIDE          reduce using rule 62 (expr -> LNOT expr .)
    INTDIVIDE       reduce using rule 62 (expr -> LNOT expr .)
    MODULO          reduce using rule 62 (expr -> LNOT expr .)
    POW             reduce using rule 62 (expr -> LNOT expr .)
    LE              reduce using rule 62 (expr -> LNOT expr .)
    GE              reduce using rule 62 (expr -> LNOT expr .)
    LT              reduce using rule 62 (expr -> LNOT expr .)
    GT              reduce using rule 62 (expr -> LNOT expr .)
    EQ              reduce using rule 62 (expr -> LNOT expr .)
    NE              reduce using rule 62 (expr -> LNOT expr .)
    LAND            reduce using rule 62 (expr -> LNOT expr .)
    LOR             reduce using rule 62 (expr -> LNOT expr .)
    BAND            reduce using rule 62 (expr -> LNOT expr .)
    BOR             reduce using rule 62 (expr -> LNOT expr .)
    RPAREN          reduce using rule 62 (expr -> LNOT expr .)
    RBRACKET        reduce using rule 62 (expr -> LNOT expr .)
    COMMA           reduce using rule 62 (expr -> LNOT expr .)
    RBRACE          reduce using rule 62 (expr -> LNOT expr .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! POW             [ shift and go to state 51 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 77

    (78) expr -> datatype LBRACKET . RBRACKET id
    (79) expr -> datatype LBRACKET . RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET

    RBRACKET        shift and go to state 114


state 78

    (38) var_declaration -> datatype id . EQUALS expr SEMI
    (39) var_declaration -> datatype id . SEMI

    EQUALS          shift and go to state 115
    SEMI            shift and go to state 116


state 79

    (44) return -> RETURN expr . SEMI
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            shift and go to state 117
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 80

    (45) return -> RETURN SEMI .

    BREAK           reduce using rule 45 (return -> RETURN SEMI .)
    CONTINUE        reduce using rule 45 (return -> RETURN SEMI .)
    GOTO            reduce using rule 45 (return -> RETURN SEMI .)
    MINUS           reduce using rule 45 (return -> RETURN SEMI .)
    LNOT            reduce using rule 45 (return -> RETURN SEMI .)
    NULL            reduce using rule 45 (return -> RETURN SEMI .)
    LPAREN          reduce using rule 45 (return -> RETURN SEMI .)
    ID              reduce using rule 45 (return -> RETURN SEMI .)
    RETURN          reduce using rule 45 (return -> RETURN SEMI .)
    FUNCTION        reduce using rule 45 (return -> RETURN SEMI .)
    STRUCTURE       reduce using rule 45 (return -> RETURN SEMI .)
    WHILE           reduce using rule 45 (return -> RETURN SEMI .)
    DO              reduce using rule 45 (return -> RETURN SEMI .)
    IF              reduce using rule 45 (return -> RETURN SEMI .)
    INTEGER         reduce using rule 45 (return -> RETURN SEMI .)
    DOUBLE          reduce using rule 45 (return -> RETURN SEMI .)
    BOOL            reduce using rule 45 (return -> RETURN SEMI .)
    STRING          reduce using rule 45 (return -> RETURN SEMI .)
    VOID            reduce using rule 45 (return -> RETURN SEMI .)
    DATATYPE        reduce using rule 45 (return -> RETURN SEMI .)
    $end            reduce using rule 45 (return -> RETURN SEMI .)
    RBRACE          reduce using rule 45 (return -> RETURN SEMI .)
    ELSE            reduce using rule 45 (return -> RETURN SEMI .)
    COMMA           reduce using rule 45 (return -> RETURN SEMI .)


state 81

    (5) func_declaration -> FUNCTION datatype . id LPAREN params RPAREN body_block
    (83) id -> . ID

    ID              shift and go to state 65

    id                             shift and go to state 118

state 82

    (25) struct_declaration -> STRUCTURE id . LBRACE struct_params RBRACE

    LBRACE          shift and go to state 119


state 83

    (20) while -> WHILE conditional . body_block
    (3) body_block -> . stmt_list
    (4) body_block -> . LBRACE stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    LBRACE          shift and go to state 4
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    body_block                     shift and go to state 120
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 84

    (24) conditional -> LPAREN . expr RPAREN
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 121
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 85

    (21) while -> DO body_block . WHILE conditional SEMI

    WHILE           shift and go to state 122


state 86

    (22) if-else -> IF conditional . body_block
    (23) if-else -> IF conditional . body_block ELSE body_block
    (3) body_block -> . stmt_list
    (4) body_block -> . LBRACE stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    LBRACE          shift and go to state 4
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    body_block                     shift and go to state 123
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 87

    (4) body_block -> LBRACE stmt_list RBRACE .

    $end            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    ID              reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    DO              reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    IF              reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    ELSE            reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)
    COMMA           reduce using rule 4 (body_block -> LBRACE stmt_list RBRACE .)


state 88

    (46) expr -> expr PLUS expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 46 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 46 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 46 (expr -> expr PLUS expr .)
    LE              reduce using rule 46 (expr -> expr PLUS expr .)
    GE              reduce using rule 46 (expr -> expr PLUS expr .)
    LT              reduce using rule 46 (expr -> expr PLUS expr .)
    GT              reduce using rule 46 (expr -> expr PLUS expr .)
    EQ              reduce using rule 46 (expr -> expr PLUS expr .)
    NE              reduce using rule 46 (expr -> expr PLUS expr .)
    LAND            reduce using rule 46 (expr -> expr PLUS expr .)
    LOR             reduce using rule 46 (expr -> expr PLUS expr .)
    BAND            reduce using rule 46 (expr -> expr PLUS expr .)
    BOR             reduce using rule 46 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 46 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 46 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 46 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 46 (expr -> expr PLUS expr .)
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51

  ! MUL             [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 89

    (47) expr -> expr MINUS expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 47 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 47 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 47 (expr -> expr MINUS expr .)
    LE              reduce using rule 47 (expr -> expr MINUS expr .)
    GE              reduce using rule 47 (expr -> expr MINUS expr .)
    LT              reduce using rule 47 (expr -> expr MINUS expr .)
    GT              reduce using rule 47 (expr -> expr MINUS expr .)
    EQ              reduce using rule 47 (expr -> expr MINUS expr .)
    NE              reduce using rule 47 (expr -> expr MINUS expr .)
    LAND            reduce using rule 47 (expr -> expr MINUS expr .)
    LOR             reduce using rule 47 (expr -> expr MINUS expr .)
    BAND            reduce using rule 47 (expr -> expr MINUS expr .)
    BOR             reduce using rule 47 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 47 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 47 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 47 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 47 (expr -> expr MINUS expr .)
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51

  ! MUL             [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 90

    (48) expr -> expr MUL expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 48 (expr -> expr MUL expr .)
    PLUS            reduce using rule 48 (expr -> expr MUL expr .)
    MINUS           reduce using rule 48 (expr -> expr MUL expr .)
    MUL             reduce using rule 48 (expr -> expr MUL expr .)
    DIVIDE          reduce using rule 48 (expr -> expr MUL expr .)
    INTDIVIDE       reduce using rule 48 (expr -> expr MUL expr .)
    MODULO          reduce using rule 48 (expr -> expr MUL expr .)
    LE              reduce using rule 48 (expr -> expr MUL expr .)
    GE              reduce using rule 48 (expr -> expr MUL expr .)
    LT              reduce using rule 48 (expr -> expr MUL expr .)
    GT              reduce using rule 48 (expr -> expr MUL expr .)
    EQ              reduce using rule 48 (expr -> expr MUL expr .)
    NE              reduce using rule 48 (expr -> expr MUL expr .)
    LAND            reduce using rule 48 (expr -> expr MUL expr .)
    LOR             reduce using rule 48 (expr -> expr MUL expr .)
    BAND            reduce using rule 48 (expr -> expr MUL expr .)
    BOR             reduce using rule 48 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 48 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 48 (expr -> expr MUL expr .)
    COMMA           reduce using rule 48 (expr -> expr MUL expr .)
    RBRACE          reduce using rule 48 (expr -> expr MUL expr .)
    POW             shift and go to state 51

  ! POW             [ reduce using rule 48 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 91

    (49) expr -> expr DIVIDE expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 49 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 49 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 49 (expr -> expr DIVIDE expr .)
    MUL             reduce using rule 49 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 49 (expr -> expr DIVIDE expr .)
    INTDIVIDE       reduce using rule 49 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 49 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 49 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 49 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 49 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 49 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 49 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 49 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 49 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 49 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 49 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 49 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 49 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 49 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 49 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 49 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 51

  ! POW             [ reduce using rule 49 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 92

    (50) expr -> expr INTDIVIDE expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    PLUS            reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    MINUS           reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    MUL             reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    DIVIDE          reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    INTDIVIDE       reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    MODULO          reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    LE              reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    GE              reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    LT              reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    GT              reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    EQ              reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    NE              reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    LAND            reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    LOR             reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    BAND            reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    BOR             reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    RPAREN          reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    RBRACKET        reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    COMMA           reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    RBRACE          reduce using rule 50 (expr -> expr INTDIVIDE expr .)
    POW             shift and go to state 51

  ! POW             [ reduce using rule 50 (expr -> expr INTDIVIDE expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 93

    (51) expr -> expr MODULO expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 51 (expr -> expr MODULO expr .)
    PLUS            reduce using rule 51 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 51 (expr -> expr MODULO expr .)
    MUL             reduce using rule 51 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 51 (expr -> expr MODULO expr .)
    INTDIVIDE       reduce using rule 51 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 51 (expr -> expr MODULO expr .)
    LE              reduce using rule 51 (expr -> expr MODULO expr .)
    GE              reduce using rule 51 (expr -> expr MODULO expr .)
    LT              reduce using rule 51 (expr -> expr MODULO expr .)
    GT              reduce using rule 51 (expr -> expr MODULO expr .)
    EQ              reduce using rule 51 (expr -> expr MODULO expr .)
    NE              reduce using rule 51 (expr -> expr MODULO expr .)
    LAND            reduce using rule 51 (expr -> expr MODULO expr .)
    LOR             reduce using rule 51 (expr -> expr MODULO expr .)
    BAND            reduce using rule 51 (expr -> expr MODULO expr .)
    BOR             reduce using rule 51 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 51 (expr -> expr MODULO expr .)
    RBRACKET        reduce using rule 51 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 51 (expr -> expr MODULO expr .)
    RBRACE          reduce using rule 51 (expr -> expr MODULO expr .)
    POW             shift and go to state 51

  ! POW             [ reduce using rule 51 (expr -> expr MODULO expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 94

    (52) expr -> expr POW expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 52 (expr -> expr POW expr .)
    PLUS            reduce using rule 52 (expr -> expr POW expr .)
    MINUS           reduce using rule 52 (expr -> expr POW expr .)
    MUL             reduce using rule 52 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 52 (expr -> expr POW expr .)
    INTDIVIDE       reduce using rule 52 (expr -> expr POW expr .)
    MODULO          reduce using rule 52 (expr -> expr POW expr .)
    LE              reduce using rule 52 (expr -> expr POW expr .)
    GE              reduce using rule 52 (expr -> expr POW expr .)
    LT              reduce using rule 52 (expr -> expr POW expr .)
    GT              reduce using rule 52 (expr -> expr POW expr .)
    EQ              reduce using rule 52 (expr -> expr POW expr .)
    NE              reduce using rule 52 (expr -> expr POW expr .)
    LAND            reduce using rule 52 (expr -> expr POW expr .)
    LOR             reduce using rule 52 (expr -> expr POW expr .)
    BAND            reduce using rule 52 (expr -> expr POW expr .)
    BOR             reduce using rule 52 (expr -> expr POW expr .)
    RPAREN          reduce using rule 52 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 52 (expr -> expr POW expr .)
    COMMA           reduce using rule 52 (expr -> expr POW expr .)
    RBRACE          reduce using rule 52 (expr -> expr POW expr .)
    POW             shift and go to state 51

  ! POW             [ reduce using rule 52 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! INTDIVIDE       [ shift and go to state 49 ]
  ! MODULO          [ shift and go to state 50 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 95

    (53) expr -> expr LE expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 53 (expr -> expr LE expr .)
    LE              reduce using rule 53 (expr -> expr LE expr .)
    GE              reduce using rule 53 (expr -> expr LE expr .)
    LT              reduce using rule 53 (expr -> expr LE expr .)
    GT              reduce using rule 53 (expr -> expr LE expr .)
    EQ              reduce using rule 53 (expr -> expr LE expr .)
    NE              reduce using rule 53 (expr -> expr LE expr .)
    LAND            reduce using rule 53 (expr -> expr LE expr .)
    LOR             reduce using rule 53 (expr -> expr LE expr .)
    BAND            reduce using rule 53 (expr -> expr LE expr .)
    BOR             reduce using rule 53 (expr -> expr LE expr .)
    RPAREN          reduce using rule 53 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 53 (expr -> expr LE expr .)
    COMMA           reduce using rule 53 (expr -> expr LE expr .)
    RBRACE          reduce using rule 53 (expr -> expr LE expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51

  ! PLUS            [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! INTDIVIDE       [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 53 (expr -> expr LE expr .) ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 96

    (54) expr -> expr GE expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 54 (expr -> expr GE expr .)
    LE              reduce using rule 54 (expr -> expr GE expr .)
    GE              reduce using rule 54 (expr -> expr GE expr .)
    LT              reduce using rule 54 (expr -> expr GE expr .)
    GT              reduce using rule 54 (expr -> expr GE expr .)
    EQ              reduce using rule 54 (expr -> expr GE expr .)
    NE              reduce using rule 54 (expr -> expr GE expr .)
    LAND            reduce using rule 54 (expr -> expr GE expr .)
    LOR             reduce using rule 54 (expr -> expr GE expr .)
    BAND            reduce using rule 54 (expr -> expr GE expr .)
    BOR             reduce using rule 54 (expr -> expr GE expr .)
    RPAREN          reduce using rule 54 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 54 (expr -> expr GE expr .)
    COMMA           reduce using rule 54 (expr -> expr GE expr .)
    RBRACE          reduce using rule 54 (expr -> expr GE expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51

  ! PLUS            [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! INTDIVIDE       [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 54 (expr -> expr GE expr .) ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 97

    (55) expr -> expr LT expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 55 (expr -> expr LT expr .)
    LE              reduce using rule 55 (expr -> expr LT expr .)
    GE              reduce using rule 55 (expr -> expr LT expr .)
    LT              reduce using rule 55 (expr -> expr LT expr .)
    GT              reduce using rule 55 (expr -> expr LT expr .)
    EQ              reduce using rule 55 (expr -> expr LT expr .)
    NE              reduce using rule 55 (expr -> expr LT expr .)
    LAND            reduce using rule 55 (expr -> expr LT expr .)
    LOR             reduce using rule 55 (expr -> expr LT expr .)
    BAND            reduce using rule 55 (expr -> expr LT expr .)
    BOR             reduce using rule 55 (expr -> expr LT expr .)
    RPAREN          reduce using rule 55 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 55 (expr -> expr LT expr .)
    COMMA           reduce using rule 55 (expr -> expr LT expr .)
    RBRACE          reduce using rule 55 (expr -> expr LT expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51

  ! PLUS            [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! INTDIVIDE       [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 98

    (56) expr -> expr GT expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 56 (expr -> expr GT expr .)
    LE              reduce using rule 56 (expr -> expr GT expr .)
    GE              reduce using rule 56 (expr -> expr GT expr .)
    LT              reduce using rule 56 (expr -> expr GT expr .)
    GT              reduce using rule 56 (expr -> expr GT expr .)
    EQ              reduce using rule 56 (expr -> expr GT expr .)
    NE              reduce using rule 56 (expr -> expr GT expr .)
    LAND            reduce using rule 56 (expr -> expr GT expr .)
    LOR             reduce using rule 56 (expr -> expr GT expr .)
    BAND            reduce using rule 56 (expr -> expr GT expr .)
    BOR             reduce using rule 56 (expr -> expr GT expr .)
    RPAREN          reduce using rule 56 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 56 (expr -> expr GT expr .)
    COMMA           reduce using rule 56 (expr -> expr GT expr .)
    RBRACE          reduce using rule 56 (expr -> expr GT expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51

  ! PLUS            [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! INTDIVIDE       [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 56 (expr -> expr GT expr .) ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 99

    (57) expr -> expr EQ expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 57 (expr -> expr EQ expr .)
    EQ              reduce using rule 57 (expr -> expr EQ expr .)
    NE              reduce using rule 57 (expr -> expr EQ expr .)
    LAND            reduce using rule 57 (expr -> expr EQ expr .)
    LOR             reduce using rule 57 (expr -> expr EQ expr .)
    BAND            reduce using rule 57 (expr -> expr EQ expr .)
    BOR             reduce using rule 57 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 57 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 57 (expr -> expr EQ expr .)
    COMMA           reduce using rule 57 (expr -> expr EQ expr .)
    RBRACE          reduce using rule 57 (expr -> expr EQ expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55

  ! PLUS            [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! INTDIVIDE       [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 57 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 100

    (58) expr -> expr NE expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 58 (expr -> expr NE expr .)
    EQ              reduce using rule 58 (expr -> expr NE expr .)
    NE              reduce using rule 58 (expr -> expr NE expr .)
    LAND            reduce using rule 58 (expr -> expr NE expr .)
    LOR             reduce using rule 58 (expr -> expr NE expr .)
    BAND            reduce using rule 58 (expr -> expr NE expr .)
    BOR             reduce using rule 58 (expr -> expr NE expr .)
    RPAREN          reduce using rule 58 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 58 (expr -> expr NE expr .)
    COMMA           reduce using rule 58 (expr -> expr NE expr .)
    RBRACE          reduce using rule 58 (expr -> expr NE expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55

  ! PLUS            [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! INTDIVIDE       [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 101

    (60) expr -> expr LAND expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 60 (expr -> expr LAND expr .)
    LAND            reduce using rule 60 (expr -> expr LAND expr .)
    LOR             reduce using rule 60 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 60 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 60 (expr -> expr LAND expr .)
    COMMA           reduce using rule 60 (expr -> expr LAND expr .)
    RBRACE          reduce using rule 60 (expr -> expr LAND expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    BAND            shift and go to state 60
    BOR             shift and go to state 61

  ! PLUS            [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! MUL             [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! MODULO          [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! POW             [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! LE              [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! GE              [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! LT              [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! GT              [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! EQ              [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! NE              [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! BAND            [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! BOR             [ reduce using rule 60 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]


state 102

    (61) expr -> expr LOR expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 61 (expr -> expr LOR expr .)
    LOR             reduce using rule 61 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 61 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 61 (expr -> expr LOR expr .)
    COMMA           reduce using rule 61 (expr -> expr LOR expr .)
    RBRACE          reduce using rule 61 (expr -> expr LOR expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    BAND            shift and go to state 60
    BOR             shift and go to state 61

  ! PLUS            [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! MUL             [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! MODULO          [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! POW             [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! LE              [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! GE              [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! LT              [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! GT              [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! EQ              [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! NE              [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! LAND            [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! BAND            [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! BOR             [ reduce using rule 61 (expr -> expr LOR expr .) ]
  ! LOR             [ shift and go to state 59 ]


state 103

    (63) expr -> expr BAND expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 63 (expr -> expr BAND expr .)
    LAND            reduce using rule 63 (expr -> expr BAND expr .)
    LOR             reduce using rule 63 (expr -> expr BAND expr .)
    BAND            reduce using rule 63 (expr -> expr BAND expr .)
    BOR             reduce using rule 63 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 63 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 63 (expr -> expr BAND expr .)
    COMMA           reduce using rule 63 (expr -> expr BAND expr .)
    RBRACE          reduce using rule 63 (expr -> expr BAND expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57

  ! PLUS            [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! MUL             [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! MODULO          [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! POW             [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! LE              [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! GE              [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! LT              [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! GT              [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! EQ              [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! NE              [ reduce using rule 63 (expr -> expr BAND expr .) ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BAND            [ shift and go to state 60 ]
  ! BOR             [ shift and go to state 61 ]


state 104

    (64) expr -> expr BOR expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            reduce using rule 64 (expr -> expr BOR expr .)
    LAND            reduce using rule 64 (expr -> expr BOR expr .)
    LOR             reduce using rule 64 (expr -> expr BOR expr .)
    BOR             reduce using rule 64 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 64 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 64 (expr -> expr BOR expr .)
    COMMA           reduce using rule 64 (expr -> expr BOR expr .)
    RBRACE          reduce using rule 64 (expr -> expr BOR expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    BAND            shift and go to state 60

  ! PLUS            [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! MUL             [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! MODULO          [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! POW             [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! LE              [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! GE              [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! LT              [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! GT              [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! EQ              [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! NE              [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! BAND            [ reduce using rule 64 (expr -> expr BOR expr .) ]
  ! LAND            [ shift and go to state 58 ]
  ! LOR             [ shift and go to state 59 ]
  ! BOR             [ shift and go to state 61 ]


state 105

    (17) statement -> GOTO ID SEMI .

    BREAK           reduce using rule 17 (statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 17 (statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 17 (statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 17 (statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 17 (statement -> GOTO ID SEMI .)
    NULL            reduce using rule 17 (statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 17 (statement -> GOTO ID SEMI .)
    ID              reduce using rule 17 (statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 17 (statement -> GOTO ID SEMI .)
    FUNCTION        reduce using rule 17 (statement -> GOTO ID SEMI .)
    STRUCTURE       reduce using rule 17 (statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 17 (statement -> GOTO ID SEMI .)
    DO              reduce using rule 17 (statement -> GOTO ID SEMI .)
    IF              reduce using rule 17 (statement -> GOTO ID SEMI .)
    INTEGER         reduce using rule 17 (statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 17 (statement -> GOTO ID SEMI .)
    BOOL            reduce using rule 17 (statement -> GOTO ID SEMI .)
    STRING          reduce using rule 17 (statement -> GOTO ID SEMI .)
    VOID            reduce using rule 17 (statement -> GOTO ID SEMI .)
    DATATYPE        reduce using rule 17 (statement -> GOTO ID SEMI .)
    $end            reduce using rule 17 (statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 17 (statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 17 (statement -> GOTO ID SEMI .)
    COMMA           reduce using rule 17 (statement -> GOTO ID SEMI .)


state 106

    (80) expr -> ID LBRACKET expr . RBRACKET
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    RBRACKET        shift and go to state 124
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 107

    (40) var_declaration -> ID id EQUALS . LBRACE args RBRACE SEMI

    LBRACE          shift and go to state 125


state 108

    (41) assign -> ID EQUALS expr . SEMI
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            shift and go to state 126
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 109

    (42) assign -> ID EQUALS LBRACE . args RBRACE SEMI
    (35) args -> .
    (36) args -> . expr
    (37) args -> . args COMMA expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    RBRACE          reduce using rule 35 (args -> .)
    COMMA           reduce using rule 35 (args -> .)
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    args                           shift and go to state 127
    expr                           shift and go to state 112
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 110

    (43) assign -> ID DOT ID . EQUALS expr SEMI

    EQUALS          shift and go to state 128


state 111

    (34) expr -> id LPAREN args . RPAREN
    (37) args -> args . COMMA expr

    RPAREN          shift and go to state 129
    COMMA           shift and go to state 130


state 112

    (36) args -> expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    RPAREN          reduce using rule 36 (args -> expr .)
    COMMA           reduce using rule 36 (args -> expr .)
    RBRACE          reduce using rule 36 (args -> expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 113

    (72) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    INTDIVIDE       reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    BAND            reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    BOR             reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 72 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 72 (expr -> LPAREN expr RPAREN .)


state 114

    (78) expr -> datatype LBRACKET RBRACKET . id
    (79) expr -> datatype LBRACKET RBRACKET . id EQUALS datatype LBRACKET INTEGER RBRACKET
    (83) id -> . ID

    ID              shift and go to state 65

    id                             shift and go to state 131

state 115

    (38) var_declaration -> datatype id EQUALS . expr SEMI
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    datatype                       shift and go to state 73
    id                             shift and go to state 19
    expr                           shift and go to state 132
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27

state 116

    (39) var_declaration -> datatype id SEMI .

    BREAK           reduce using rule 39 (var_declaration -> datatype id SEMI .)
    CONTINUE        reduce using rule 39 (var_declaration -> datatype id SEMI .)
    GOTO            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    MINUS           reduce using rule 39 (var_declaration -> datatype id SEMI .)
    LNOT            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    NULL            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    LPAREN          reduce using rule 39 (var_declaration -> datatype id SEMI .)
    ID              reduce using rule 39 (var_declaration -> datatype id SEMI .)
    RETURN          reduce using rule 39 (var_declaration -> datatype id SEMI .)
    FUNCTION        reduce using rule 39 (var_declaration -> datatype id SEMI .)
    STRUCTURE       reduce using rule 39 (var_declaration -> datatype id SEMI .)
    WHILE           reduce using rule 39 (var_declaration -> datatype id SEMI .)
    DO              reduce using rule 39 (var_declaration -> datatype id SEMI .)
    IF              reduce using rule 39 (var_declaration -> datatype id SEMI .)
    INTEGER         reduce using rule 39 (var_declaration -> datatype id SEMI .)
    DOUBLE          reduce using rule 39 (var_declaration -> datatype id SEMI .)
    BOOL            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    STRING          reduce using rule 39 (var_declaration -> datatype id SEMI .)
    VOID            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    DATATYPE        reduce using rule 39 (var_declaration -> datatype id SEMI .)
    $end            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    RBRACE          reduce using rule 39 (var_declaration -> datatype id SEMI .)
    ELSE            reduce using rule 39 (var_declaration -> datatype id SEMI .)
    COMMA           reduce using rule 39 (var_declaration -> datatype id SEMI .)


state 117

    (44) return -> RETURN expr SEMI .

    BREAK           reduce using rule 44 (return -> RETURN expr SEMI .)
    CONTINUE        reduce using rule 44 (return -> RETURN expr SEMI .)
    GOTO            reduce using rule 44 (return -> RETURN expr SEMI .)
    MINUS           reduce using rule 44 (return -> RETURN expr SEMI .)
    LNOT            reduce using rule 44 (return -> RETURN expr SEMI .)
    NULL            reduce using rule 44 (return -> RETURN expr SEMI .)
    LPAREN          reduce using rule 44 (return -> RETURN expr SEMI .)
    ID              reduce using rule 44 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 44 (return -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 44 (return -> RETURN expr SEMI .)
    STRUCTURE       reduce using rule 44 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 44 (return -> RETURN expr SEMI .)
    DO              reduce using rule 44 (return -> RETURN expr SEMI .)
    IF              reduce using rule 44 (return -> RETURN expr SEMI .)
    INTEGER         reduce using rule 44 (return -> RETURN expr SEMI .)
    DOUBLE          reduce using rule 44 (return -> RETURN expr SEMI .)
    BOOL            reduce using rule 44 (return -> RETURN expr SEMI .)
    STRING          reduce using rule 44 (return -> RETURN expr SEMI .)
    VOID            reduce using rule 44 (return -> RETURN expr SEMI .)
    DATATYPE        reduce using rule 44 (return -> RETURN expr SEMI .)
    $end            reduce using rule 44 (return -> RETURN expr SEMI .)
    RBRACE          reduce using rule 44 (return -> RETURN expr SEMI .)
    ELSE            reduce using rule 44 (return -> RETURN expr SEMI .)
    COMMA           reduce using rule 44 (return -> RETURN expr SEMI .)


state 118

    (5) func_declaration -> FUNCTION datatype id . LPAREN params RPAREN body_block

    LPAREN          shift and go to state 133


state 119

    (25) struct_declaration -> STRUCTURE id LBRACE . struct_params RBRACE
    (26) struct_params -> . struct_param
    (27) struct_params -> . struct_params COMMA struct_param
    (28) struct_param -> . DATATYPE ID
    (29) struct_param -> . func_declaration
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block

    DATATYPE        shift and go to state 136
    FUNCTION        shift and go to state 32

    struct_params                  shift and go to state 134
    struct_param                   shift and go to state 135
    func_declaration               shift and go to state 137

state 120

    (20) while -> WHILE conditional body_block .

    BREAK           reduce using rule 20 (while -> WHILE conditional body_block .)
    CONTINUE        reduce using rule 20 (while -> WHILE conditional body_block .)
    GOTO            reduce using rule 20 (while -> WHILE conditional body_block .)
    MINUS           reduce using rule 20 (while -> WHILE conditional body_block .)
    LNOT            reduce using rule 20 (while -> WHILE conditional body_block .)
    NULL            reduce using rule 20 (while -> WHILE conditional body_block .)
    LPAREN          reduce using rule 20 (while -> WHILE conditional body_block .)
    ID              reduce using rule 20 (while -> WHILE conditional body_block .)
    RETURN          reduce using rule 20 (while -> WHILE conditional body_block .)
    FUNCTION        reduce using rule 20 (while -> WHILE conditional body_block .)
    STRUCTURE       reduce using rule 20 (while -> WHILE conditional body_block .)
    WHILE           reduce using rule 20 (while -> WHILE conditional body_block .)
    DO              reduce using rule 20 (while -> WHILE conditional body_block .)
    IF              reduce using rule 20 (while -> WHILE conditional body_block .)
    INTEGER         reduce using rule 20 (while -> WHILE conditional body_block .)
    DOUBLE          reduce using rule 20 (while -> WHILE conditional body_block .)
    BOOL            reduce using rule 20 (while -> WHILE conditional body_block .)
    STRING          reduce using rule 20 (while -> WHILE conditional body_block .)
    VOID            reduce using rule 20 (while -> WHILE conditional body_block .)
    DATATYPE        reduce using rule 20 (while -> WHILE conditional body_block .)
    $end            reduce using rule 20 (while -> WHILE conditional body_block .)
    RBRACE          reduce using rule 20 (while -> WHILE conditional body_block .)
    ELSE            reduce using rule 20 (while -> WHILE conditional body_block .)
    COMMA           reduce using rule 20 (while -> WHILE conditional body_block .)


state 121

    (24) conditional -> LPAREN expr . RPAREN
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    RPAREN          shift and go to state 138
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 122

    (21) while -> DO body_block WHILE . conditional SEMI
    (24) conditional -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    conditional                    shift and go to state 139

state 123

    (22) if-else -> IF conditional body_block .
    (23) if-else -> IF conditional body_block . ELSE body_block

  ! shift/reduce conflict for ELSE resolved as shift
    BREAK           reduce using rule 22 (if-else -> IF conditional body_block .)
    CONTINUE        reduce using rule 22 (if-else -> IF conditional body_block .)
    GOTO            reduce using rule 22 (if-else -> IF conditional body_block .)
    MINUS           reduce using rule 22 (if-else -> IF conditional body_block .)
    LNOT            reduce using rule 22 (if-else -> IF conditional body_block .)
    NULL            reduce using rule 22 (if-else -> IF conditional body_block .)
    LPAREN          reduce using rule 22 (if-else -> IF conditional body_block .)
    ID              reduce using rule 22 (if-else -> IF conditional body_block .)
    RETURN          reduce using rule 22 (if-else -> IF conditional body_block .)
    FUNCTION        reduce using rule 22 (if-else -> IF conditional body_block .)
    STRUCTURE       reduce using rule 22 (if-else -> IF conditional body_block .)
    WHILE           reduce using rule 22 (if-else -> IF conditional body_block .)
    DO              reduce using rule 22 (if-else -> IF conditional body_block .)
    IF              reduce using rule 22 (if-else -> IF conditional body_block .)
    INTEGER         reduce using rule 22 (if-else -> IF conditional body_block .)
    DOUBLE          reduce using rule 22 (if-else -> IF conditional body_block .)
    BOOL            reduce using rule 22 (if-else -> IF conditional body_block .)
    STRING          reduce using rule 22 (if-else -> IF conditional body_block .)
    VOID            reduce using rule 22 (if-else -> IF conditional body_block .)
    DATATYPE        reduce using rule 22 (if-else -> IF conditional body_block .)
    $end            reduce using rule 22 (if-else -> IF conditional body_block .)
    RBRACE          reduce using rule 22 (if-else -> IF conditional body_block .)
    COMMA           reduce using rule 22 (if-else -> IF conditional body_block .)
    ELSE            shift and go to state 140

  ! ELSE            [ reduce using rule 22 (if-else -> IF conditional body_block .) ]


state 124

    (80) expr -> ID LBRACKET expr RBRACKET .

    SEMI            reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    MUL             reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    INTDIVIDE       reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    POW             reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    LE              reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    GE              reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    LT              reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    GT              reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    EQ              reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    NE              reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    LAND            reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    LOR             reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    BAND            reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    BOR             reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 80 (expr -> ID LBRACKET expr RBRACKET .)


state 125

    (40) var_declaration -> ID id EQUALS LBRACE . args RBRACE SEMI
    (35) args -> .
    (36) args -> . expr
    (37) args -> . args COMMA expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    RBRACE          reduce using rule 35 (args -> .)
    COMMA           reduce using rule 35 (args -> .)
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    id                             shift and go to state 19
    args                           shift and go to state 141
    expr                           shift and go to state 112
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 126

    (41) assign -> ID EQUALS expr SEMI .

    BREAK           reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    CONTINUE        reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    GOTO            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    MINUS           reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    LNOT            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    NULL            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    ID              reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    RETURN          reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    WHILE           reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    DO              reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    IF              reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    BOOL            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    STRING          reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    VOID            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    DATATYPE        reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    $end            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    ELSE            reduce using rule 41 (assign -> ID EQUALS expr SEMI .)
    COMMA           reduce using rule 41 (assign -> ID EQUALS expr SEMI .)


state 127

    (42) assign -> ID EQUALS LBRACE args . RBRACE SEMI
    (37) args -> args . COMMA expr

    RBRACE          shift and go to state 142
    COMMA           shift and go to state 130


state 128

    (43) assign -> ID DOT ID EQUALS . expr SEMI
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 143
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 129

    (34) expr -> id LPAREN args RPAREN .

    SEMI            reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    PLUS            reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    MINUS           reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    MUL             reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    DIVIDE          reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    INTDIVIDE       reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    MODULO          reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    POW             reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    LE              reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    GE              reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    LT              reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    GT              reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    EQ              reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    NE              reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    LAND            reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    LOR             reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    BAND            reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    BOR             reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    RPAREN          reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    RBRACKET        reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    COMMA           reduce using rule 34 (expr -> id LPAREN args RPAREN .)
    RBRACE          reduce using rule 34 (expr -> id LPAREN args RPAREN .)


state 130

    (37) args -> args COMMA . expr
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 74
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    expr                           shift and go to state 144
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 73

state 131

    (78) expr -> datatype LBRACKET RBRACKET id .
    (79) expr -> datatype LBRACKET RBRACKET id . EQUALS datatype LBRACKET INTEGER RBRACKET

    SEMI            reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    PLUS            reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    MINUS           reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    MUL             reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    DIVIDE          reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    INTDIVIDE       reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    MODULO          reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    POW             reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    LE              reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    GE              reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    LT              reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    GT              reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    EQ              reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    NE              reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    LAND            reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    LOR             reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    BAND            reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    BOR             reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    RPAREN          reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    RBRACKET        reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    COMMA           reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    RBRACE          reduce using rule 78 (expr -> datatype LBRACKET RBRACKET id .)
    EQUALS          shift and go to state 145


state 132

    (38) var_declaration -> datatype id EQUALS expr . SEMI
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            shift and go to state 146
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 133

    (5) func_declaration -> FUNCTION datatype id LPAREN . params RPAREN body_block
    (30) params -> .
    (31) params -> . param
    (32) params -> . params COMMA param
    (33) param -> . DATATYPE ID

    RPAREN          reduce using rule 30 (params -> .)
    COMMA           reduce using rule 30 (params -> .)
    DATATYPE        shift and go to state 149

    params                         shift and go to state 147
    param                          shift and go to state 148

state 134

    (25) struct_declaration -> STRUCTURE id LBRACE struct_params . RBRACE
    (27) struct_params -> struct_params . COMMA struct_param

    RBRACE          shift and go to state 150
    COMMA           shift and go to state 151


state 135

    (26) struct_params -> struct_param .

    RBRACE          reduce using rule 26 (struct_params -> struct_param .)
    COMMA           reduce using rule 26 (struct_params -> struct_param .)


state 136

    (28) struct_param -> DATATYPE . ID

    ID              shift and go to state 152


state 137

    (29) struct_param -> func_declaration .

    RBRACE          reduce using rule 29 (struct_param -> func_declaration .)
    COMMA           reduce using rule 29 (struct_param -> func_declaration .)


state 138

    (24) conditional -> LPAREN expr RPAREN .

    LBRACE          reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    GOTO            reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    LNOT            reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    NULL            reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    ID              reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    FUNCTION        reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    STRUCTURE       reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    DO              reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    IF              reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    INTEGER         reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    DOUBLE          reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    BOOL            reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    STRING          reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    VOID            reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    DATATYPE        reduce using rule 24 (conditional -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 24 (conditional -> LPAREN expr RPAREN .)


state 139

    (21) while -> DO body_block WHILE conditional . SEMI

    SEMI            shift and go to state 153


state 140

    (23) if-else -> IF conditional body_block ELSE . body_block
    (3) body_block -> . stmt_list
    (4) body_block -> . LBRACE stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    LBRACE          shift and go to state 4
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    body_block                     shift and go to state 154
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    id                             shift and go to state 19
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27
    datatype                       shift and go to state 29

state 141

    (40) var_declaration -> ID id EQUALS LBRACE args . RBRACE SEMI
    (37) args -> args . COMMA expr

    RBRACE          shift and go to state 155
    COMMA           shift and go to state 130


state 142

    (42) assign -> ID EQUALS LBRACE args RBRACE . SEMI

    SEMI            shift and go to state 156


state 143

    (43) assign -> ID DOT ID EQUALS expr . SEMI
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    SEMI            shift and go to state 157
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 144

    (37) args -> args COMMA expr .
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . MUL expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . INTDIVIDE expr
    (51) expr -> expr . MODULO expr
    (52) expr -> expr . POW expr
    (53) expr -> expr . LE expr
    (54) expr -> expr . GE expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GT expr
    (57) expr -> expr . EQ expr
    (58) expr -> expr . NE expr
    (60) expr -> expr . LAND expr
    (61) expr -> expr . LOR expr
    (63) expr -> expr . BAND expr
    (64) expr -> expr . BOR expr

    RPAREN          reduce using rule 37 (args -> args COMMA expr .)
    COMMA           reduce using rule 37 (args -> args COMMA expr .)
    RBRACE          reduce using rule 37 (args -> args COMMA expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIVIDE          shift and go to state 48
    INTDIVIDE       shift and go to state 49
    MODULO          shift and go to state 50
    POW             shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    LT              shift and go to state 54
    GT              shift and go to state 55
    EQ              shift and go to state 56
    NE              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    BAND            shift and go to state 60
    BOR             shift and go to state 61


state 145

    (79) expr -> datatype LBRACKET RBRACKET id EQUALS . datatype LBRACKET INTEGER RBRACKET
    (82) datatype -> . DATATYPE

    DATATYPE        shift and go to state 41

    datatype                       shift and go to state 158

state 146

    (38) var_declaration -> datatype id EQUALS expr SEMI .

    BREAK           reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    CONTINUE        reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    GOTO            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    MINUS           reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    LNOT            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    NULL            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    LPAREN          reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    ID              reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    RETURN          reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    FUNCTION        reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    WHILE           reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    DO              reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    IF              reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    INTEGER         reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    DOUBLE          reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    BOOL            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRING          reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    VOID            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    DATATYPE        reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    $end            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    RBRACE          reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    ELSE            reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)
    COMMA           reduce using rule 38 (var_declaration -> datatype id EQUALS expr SEMI .)


state 147

    (5) func_declaration -> FUNCTION datatype id LPAREN params . RPAREN body_block
    (32) params -> params . COMMA param

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 148

    (31) params -> param .

    RPAREN          reduce using rule 31 (params -> param .)
    COMMA           reduce using rule 31 (params -> param .)


state 149

    (33) param -> DATATYPE . ID

    ID              shift and go to state 161


state 150

    (25) struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .

    BREAK           reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    CONTINUE        reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    GOTO            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    MINUS           reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    LNOT            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    NULL            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    LPAREN          reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    ID              reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    RETURN          reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    FUNCTION        reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    STRUCTURE       reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    WHILE           reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DO              reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    IF              reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    INTEGER         reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DOUBLE          reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    BOOL            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    STRING          reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    VOID            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DATATYPE        reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    $end            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    RBRACE          reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    ELSE            reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    COMMA           reduce using rule 25 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)


state 151

    (27) struct_params -> struct_params COMMA . struct_param
    (28) struct_param -> . DATATYPE ID
    (29) struct_param -> . func_declaration
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block

    DATATYPE        shift and go to state 136
    FUNCTION        shift and go to state 32

    struct_param                   shift and go to state 162
    func_declaration               shift and go to state 137

state 152

    (28) struct_param -> DATATYPE ID .

    RBRACE          reduce using rule 28 (struct_param -> DATATYPE ID .)
    COMMA           reduce using rule 28 (struct_param -> DATATYPE ID .)


state 153

    (21) while -> DO body_block WHILE conditional SEMI .

    BREAK           reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    CONTINUE        reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    GOTO            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    MINUS           reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    LNOT            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    NULL            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    LPAREN          reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    ID              reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    RETURN          reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    FUNCTION        reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    STRUCTURE       reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    WHILE           reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    DO              reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    IF              reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    INTEGER         reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    DOUBLE          reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    BOOL            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    STRING          reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    VOID            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    DATATYPE        reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    $end            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    RBRACE          reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    ELSE            reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)
    COMMA           reduce using rule 21 (while -> DO body_block WHILE conditional SEMI .)


state 154

    (23) if-else -> IF conditional body_block ELSE body_block .

    BREAK           reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    CONTINUE        reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    GOTO            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    MINUS           reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    LNOT            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    NULL            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    LPAREN          reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    ID              reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    RETURN          reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    FUNCTION        reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    STRUCTURE       reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    WHILE           reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    DO              reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    IF              reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    INTEGER         reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    DOUBLE          reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    BOOL            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    STRING          reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    VOID            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    DATATYPE        reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    $end            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    RBRACE          reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    ELSE            reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)
    COMMA           reduce using rule 23 (if-else -> IF conditional body_block ELSE body_block .)


state 155

    (40) var_declaration -> ID id EQUALS LBRACE args RBRACE . SEMI

    SEMI            shift and go to state 163


state 156

    (42) assign -> ID EQUALS LBRACE args RBRACE SEMI .

    BREAK           reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    CONTINUE        reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    GOTO            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    MINUS           reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    LNOT            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    NULL            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    LPAREN          reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    ID              reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    RETURN          reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    FUNCTION        reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    STRUCTURE       reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    WHILE           reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DO              reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    IF              reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    INTEGER         reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DOUBLE          reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    BOOL            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    STRING          reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    VOID            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DATATYPE        reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    $end            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    RBRACE          reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    ELSE            reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    COMMA           reduce using rule 42 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)


state 157

    (43) assign -> ID DOT ID EQUALS expr SEMI .

    BREAK           reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    CONTINUE        reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    GOTO            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    MINUS           reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    LNOT            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    NULL            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    ID              reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    RETURN          reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    WHILE           reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    DO              reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    IF              reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    BOOL            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    STRING          reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    VOID            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    DATATYPE        reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    $end            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    ELSE            reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)
    COMMA           reduce using rule 43 (assign -> ID DOT ID EQUALS expr SEMI .)


state 158

    (79) expr -> datatype LBRACKET RBRACKET id EQUALS datatype . LBRACKET INTEGER RBRACKET

    LBRACKET        shift and go to state 164


state 159

    (5) func_declaration -> FUNCTION datatype id LPAREN params RPAREN . body_block
    (3) body_block -> . stmt_list
    (4) body_block -> . LBRACE stmt_list RBRACE
    (6) stmt_list -> . stmt_list statement
    (7) stmt_list -> . statement
    (8) statement -> . expr SEMI
    (9) statement -> . var_declaration
    (10) statement -> . return
    (11) statement -> . assign
    (12) statement -> . func_declaration
    (13) statement -> . struct_declaration
    (14) statement -> . while
    (15) statement -> . BREAK SEMI
    (16) statement -> . CONTINUE SEMI
    (17) statement -> . GOTO ID SEMI
    (18) statement -> . goto_mark
    (19) statement -> . if-else
    (34) expr -> . id LPAREN args RPAREN
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr MUL expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr INTDIVIDE expr
    (51) expr -> . expr MODULO expr
    (52) expr -> . expr POW expr
    (53) expr -> . expr LE expr
    (54) expr -> . expr GE expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GT expr
    (57) expr -> . expr EQ expr
    (58) expr -> . expr NE expr
    (59) expr -> . MINUS expr
    (60) expr -> . expr LAND expr
    (61) expr -> . expr LOR expr
    (62) expr -> . LNOT expr
    (63) expr -> . expr BAND expr
    (64) expr -> . expr BOR expr
    (65) expr -> . id
    (66) expr -> . int
    (67) expr -> . double
    (68) expr -> . bool
    (69) expr -> . str
    (70) expr -> . void
    (71) expr -> . NULL
    (72) expr -> . LPAREN expr RPAREN
    (78) expr -> . datatype LBRACKET RBRACKET id
    (79) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET
    (80) expr -> . ID LBRACKET expr RBRACKET
    (38) var_declaration -> . datatype id EQUALS expr SEMI
    (39) var_declaration -> . datatype id SEMI
    (40) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (44) return -> . RETURN expr SEMI
    (45) return -> . RETURN SEMI
    (41) assign -> . ID EQUALS expr SEMI
    (42) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (43) assign -> . ID DOT ID EQUALS expr SEMI
    (5) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN body_block
    (25) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (20) while -> . WHILE conditional body_block
    (21) while -> . DO body_block WHILE conditional SEMI
    (81) goto_mark -> . ID COLON
    (22) if-else -> . IF conditional body_block
    (23) if-else -> . IF conditional body_block ELSE body_block
    (83) id -> . ID
    (73) int -> . INTEGER
    (74) double -> . DOUBLE
    (75) bool -> . BOOL
    (76) str -> . STRING
    (77) void -> . VOID
    (82) datatype -> . DATATYPE

    LBRACE          shift and go to state 4
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    GOTO            shift and go to state 15
    MINUS           shift and go to state 21
    LNOT            shift and go to state 22
    NULL            shift and go to state 28
    LPAREN          shift and go to state 20
    ID              shift and go to state 16
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    STRUCTURE       shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    IF              shift and go to state 36
    INTEGER         shift and go to state 30
    DOUBLE          shift and go to state 37
    BOOL            shift and go to state 38
    STRING          shift and go to state 39
    VOID            shift and go to state 40
    DATATYPE        shift and go to state 41

    datatype                       shift and go to state 29
    id                             shift and go to state 19
    body_block                     shift and go to state 165
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 5
    expr                           shift and go to state 6
    var_declaration                shift and go to state 7
    return                         shift and go to state 8
    assign                         shift and go to state 9
    func_declaration               shift and go to state 10
    struct_declaration             shift and go to state 11
    while                          shift and go to state 12
    goto_mark                      shift and go to state 17
    if-else                        shift and go to state 18
    int                            shift and go to state 23
    double                         shift and go to state 24
    bool                           shift and go to state 25
    str                            shift and go to state 26
    void                           shift and go to state 27

state 160

    (32) params -> params COMMA . param
    (33) param -> . DATATYPE ID

    DATATYPE        shift and go to state 149

    param                          shift and go to state 166

state 161

    (33) param -> DATATYPE ID .

    RPAREN          reduce using rule 33 (param -> DATATYPE ID .)
    COMMA           reduce using rule 33 (param -> DATATYPE ID .)


state 162

    (27) struct_params -> struct_params COMMA struct_param .

    RBRACE          reduce using rule 27 (struct_params -> struct_params COMMA struct_param .)
    COMMA           reduce using rule 27 (struct_params -> struct_params COMMA struct_param .)


state 163

    (40) var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .

    BREAK           reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    CONTINUE        reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    GOTO            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    MINUS           reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    LNOT            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    NULL            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    LPAREN          reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    ID              reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    RETURN          reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    FUNCTION        reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    STRUCTURE       reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    WHILE           reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DO              reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    IF              reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    INTEGER         reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DOUBLE          reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    BOOL            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    STRING          reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    VOID            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DATATYPE        reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    $end            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    RBRACE          reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    ELSE            reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    COMMA           reduce using rule 40 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)


state 164

    (79) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET . INTEGER RBRACKET

    INTEGER         shift and go to state 167


state 165

    (5) func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .

    BREAK           reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    CONTINUE        reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    GOTO            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    MINUS           reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    LNOT            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    NULL            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    LPAREN          reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    ID              reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    RETURN          reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    FUNCTION        reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    STRUCTURE       reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    WHILE           reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    DO              reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    IF              reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    INTEGER         reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    DOUBLE          reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    BOOL            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    STRING          reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    VOID            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    DATATYPE        reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    $end            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    RBRACE          reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    ELSE            reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)
    COMMA           reduce using rule 5 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block .)


state 166

    (32) params -> params COMMA param .

    RPAREN          reduce using rule 32 (params -> params COMMA param .)
    COMMA           reduce using rule 32 (params -> params COMMA param .)


state 167

    (79) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 168


state 168

    (79) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .

    SEMI            reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    PLUS            reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    MINUS           reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    MUL             reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    DIVIDE          reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    INTDIVIDE       reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    MODULO          reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    POW             reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LE              reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    GE              reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LT              reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    GT              reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    EQ              reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    NE              reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LAND            reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    LOR             reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    BAND            reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    BOR             reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    RPAREN          reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    RBRACKET        reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    COMMA           reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)
    RBRACE          reduce using rule 79 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BREAK in state 3 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 3 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for LNOT in state 3 resolved as shift
WARNING: shift/reduce conflict for NULL in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for STRUCTURE in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for VOID in state 3 resolved as shift
WARNING: shift/reduce conflict for DATATYPE in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 123 resolved as shift
