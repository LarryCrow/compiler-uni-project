Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    BREAK
    COLON
    COMMENT
    CONTINUE
    DO
    ELSE
    ELSEIF
    ERROR
    GOTO
    IF
    LBRACKET
    NEWLINE
    NULL
    PERIOD
    RBRACKET
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> basic_block
Rule 3     basic_block -> stmt_list
Rule 4     func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
Rule 5     stmt_list -> stmt_list statement
Rule 6     stmt_list -> statement
Rule 7     statement -> expr SEMI
Rule 8     statement -> RETURN expr SEMI
Rule 9     statement -> assign
Rule 10    statement -> func_declaration
Rule 11    statement -> struct_declaration
Rule 12    struct_declaration -> STRUCTURE id LBRACE params RBRACE
Rule 13    params -> <empty>
Rule 14    params -> param
Rule 15    params -> params COMMA param
Rule 16    param -> DATATYPE ID
Rule 17    expr -> ID LPAREN args RPAREN
Rule 18    args -> <empty>
Rule 19    args -> expr
Rule 20    args -> args COMMA expr
Rule 21    assign -> ID EQUALS expr SEMI
Rule 22    expr -> expr PLUS expr
Rule 23    expr -> expr MINUS expr
Rule 24    expr -> expr MUL expr
Rule 25    expr -> expr DIVIDE expr
Rule 26    expr -> expr INTDIVIDE expr
Rule 27    expr -> expr MODULO expr
Rule 28    expr -> expr POW expr
Rule 29    expr -> expr LE expr
Rule 30    expr -> expr GE expr
Rule 31    expr -> expr LT expr
Rule 32    expr -> expr GT expr
Rule 33    expr -> expr EQ expr
Rule 34    expr -> expr NE expr
Rule 35    expr -> MINUS expr
Rule 36    expr -> expr LAND expr
Rule 37    expr -> expr LOR expr
Rule 38    expr -> LNOT expr
Rule 39    expr -> id
Rule 40    expr -> INTEGER
Rule 41    expr -> DOUBLE
Rule 42    expr -> BOOLEAN
Rule 43    expr -> STRING
Rule 44    expr -> LPAREN expr RPAREN
Rule 45    datatype -> DATATYPE
Rule 46    id -> ID

Terminals, with rules where they appear

ARRAY                : 
BOOLEAN              : 42
BREAK                : 
COLON                : 
COMMA                : 15 20
COMMENT              : 
CONTINUE             : 
DATATYPE             : 16 45
DIVIDE               : 25
DO                   : 
DOUBLE               : 41
ELSE                 : 
ELSEIF               : 
EQ                   : 33
EQUALS               : 21
ERROR                : 
FUNCTION             : 4
GE                   : 30
GOTO                 : 
GT                   : 32
ID                   : 16 17 21 46
IF                   : 
INTDIVIDE            : 26
INTEGER              : 40
LAND                 : 36
LBRACE               : 4 12
LBRACKET             : 
LE                   : 29
LNOT                 : 38
LOR                  : 37
LPAREN               : 4 17 44
LT                   : 31
MINUS                : 23 35
MODULO               : 27
MUL                  : 24
NE                   : 34
NEWLINE              : 
NULL                 : 
PERIOD               : 
PLUS                 : 22
POW                  : 28
RBRACE               : 4 12
RBRACKET             : 
RETURN               : 8
RPAREN               : 4 17 44
SEMI                 : 7 8 21
STRING               : 43
STRUCTURE            : 12
WHILE                : 
error                : 

Nonterminals, with rules where they appear

args                 : 17 20
assign               : 9
basic_block          : 2 4
datatype             : 4
expr                 : 7 8 19 20 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 36 36 37 37 38 44
func_declaration     : 10
id                   : 4 12 39
param                : 14 15
params               : 4 12 15
program              : 0
statement            : 5 6
stmt_list            : 3 5
struct_declaration   : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . basic_block
    (3) basic_block -> . stmt_list
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . assign
    (10) statement -> . func_declaration
    (11) statement -> . struct_declaration
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (21) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (12) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (46) id -> . ID

    $end            reduce using rule 1 (program -> .)
    RETURN          shift and go to state 6
    ID              shift and go to state 10
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11
    FUNCTION        shift and go to state 19
    STRUCTURE       shift and go to state 20

    program                        shift and go to state 1
    basic_block                    shift and go to state 2
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9
    id                             shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (2) program -> basic_block .

    $end            reduce using rule 2 (program -> basic_block .)


state 3

    (3) basic_block -> stmt_list .
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . assign
    (10) statement -> . func_declaration
    (11) statement -> . struct_declaration
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (21) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (12) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (46) id -> . ID

    $end            reduce using rule 3 (basic_block -> stmt_list .)
    RBRACE          reduce using rule 3 (basic_block -> stmt_list .)
    RETURN          shift and go to state 6
    ID              shift and go to state 10
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11
    FUNCTION        shift and go to state 19
    STRUCTURE       shift and go to state 20

    statement                      shift and go to state 21
    expr                           shift and go to state 5
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9
    id                             shift and go to state 14

state 4

    (6) stmt_list -> statement .

    RETURN          reduce using rule 6 (stmt_list -> statement .)
    ID              reduce using rule 6 (stmt_list -> statement .)
    MINUS           reduce using rule 6 (stmt_list -> statement .)
    LNOT            reduce using rule 6 (stmt_list -> statement .)
    INTEGER         reduce using rule 6 (stmt_list -> statement .)
    DOUBLE          reduce using rule 6 (stmt_list -> statement .)
    BOOLEAN         reduce using rule 6 (stmt_list -> statement .)
    STRING          reduce using rule 6 (stmt_list -> statement .)
    LPAREN          reduce using rule 6 (stmt_list -> statement .)
    FUNCTION        reduce using rule 6 (stmt_list -> statement .)
    STRUCTURE       reduce using rule 6 (stmt_list -> statement .)
    $end            reduce using rule 6 (stmt_list -> statement .)
    RBRACE          reduce using rule 6 (stmt_list -> statement .)


state 5

    (7) statement -> expr . SEMI
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36
    LOR             shift and go to state 37


state 6

    (8) statement -> RETURN . expr SEMI
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 38
    id                             shift and go to state 14

state 7

    (9) statement -> assign .

    RETURN          reduce using rule 9 (statement -> assign .)
    ID              reduce using rule 9 (statement -> assign .)
    MINUS           reduce using rule 9 (statement -> assign .)
    LNOT            reduce using rule 9 (statement -> assign .)
    INTEGER         reduce using rule 9 (statement -> assign .)
    DOUBLE          reduce using rule 9 (statement -> assign .)
    BOOLEAN         reduce using rule 9 (statement -> assign .)
    STRING          reduce using rule 9 (statement -> assign .)
    LPAREN          reduce using rule 9 (statement -> assign .)
    FUNCTION        reduce using rule 9 (statement -> assign .)
    STRUCTURE       reduce using rule 9 (statement -> assign .)
    $end            reduce using rule 9 (statement -> assign .)
    RBRACE          reduce using rule 9 (statement -> assign .)


state 8

    (10) statement -> func_declaration .

    RETURN          reduce using rule 10 (statement -> func_declaration .)
    ID              reduce using rule 10 (statement -> func_declaration .)
    MINUS           reduce using rule 10 (statement -> func_declaration .)
    LNOT            reduce using rule 10 (statement -> func_declaration .)
    INTEGER         reduce using rule 10 (statement -> func_declaration .)
    DOUBLE          reduce using rule 10 (statement -> func_declaration .)
    BOOLEAN         reduce using rule 10 (statement -> func_declaration .)
    STRING          reduce using rule 10 (statement -> func_declaration .)
    LPAREN          reduce using rule 10 (statement -> func_declaration .)
    FUNCTION        reduce using rule 10 (statement -> func_declaration .)
    STRUCTURE       reduce using rule 10 (statement -> func_declaration .)
    $end            reduce using rule 10 (statement -> func_declaration .)
    RBRACE          reduce using rule 10 (statement -> func_declaration .)


state 9

    (11) statement -> struct_declaration .

    RETURN          reduce using rule 11 (statement -> struct_declaration .)
    ID              reduce using rule 11 (statement -> struct_declaration .)
    MINUS           reduce using rule 11 (statement -> struct_declaration .)
    LNOT            reduce using rule 11 (statement -> struct_declaration .)
    INTEGER         reduce using rule 11 (statement -> struct_declaration .)
    DOUBLE          reduce using rule 11 (statement -> struct_declaration .)
    BOOLEAN         reduce using rule 11 (statement -> struct_declaration .)
    STRING          reduce using rule 11 (statement -> struct_declaration .)
    LPAREN          reduce using rule 11 (statement -> struct_declaration .)
    FUNCTION        reduce using rule 11 (statement -> struct_declaration .)
    STRUCTURE       reduce using rule 11 (statement -> struct_declaration .)
    $end            reduce using rule 11 (statement -> struct_declaration .)
    RBRACE          reduce using rule 11 (statement -> struct_declaration .)


state 10

    (17) expr -> ID . LPAREN args RPAREN
    (21) assign -> ID . EQUALS expr SEMI
    (46) id -> ID .

    LPAREN          shift and go to state 40
    EQUALS          shift and go to state 41
    SEMI            reduce using rule 46 (id -> ID .)
    PLUS            reduce using rule 46 (id -> ID .)
    MINUS           reduce using rule 46 (id -> ID .)
    MUL             reduce using rule 46 (id -> ID .)
    DIVIDE          reduce using rule 46 (id -> ID .)
    INTDIVIDE       reduce using rule 46 (id -> ID .)
    MODULO          reduce using rule 46 (id -> ID .)
    POW             reduce using rule 46 (id -> ID .)
    LE              reduce using rule 46 (id -> ID .)
    GE              reduce using rule 46 (id -> ID .)
    LT              reduce using rule 46 (id -> ID .)
    GT              reduce using rule 46 (id -> ID .)
    EQ              reduce using rule 46 (id -> ID .)
    NE              reduce using rule 46 (id -> ID .)
    LAND            reduce using rule 46 (id -> ID .)
    LOR             reduce using rule 46 (id -> ID .)


state 11

    (44) expr -> LPAREN . expr RPAREN
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 42
    id                             shift and go to state 14

state 12

    (35) expr -> MINUS . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 43
    id                             shift and go to state 14

state 13

    (38) expr -> LNOT . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 44
    id                             shift and go to state 14

state 14

    (39) expr -> id .

    SEMI            reduce using rule 39 (expr -> id .)
    PLUS            reduce using rule 39 (expr -> id .)
    MINUS           reduce using rule 39 (expr -> id .)
    MUL             reduce using rule 39 (expr -> id .)
    DIVIDE          reduce using rule 39 (expr -> id .)
    INTDIVIDE       reduce using rule 39 (expr -> id .)
    MODULO          reduce using rule 39 (expr -> id .)
    POW             reduce using rule 39 (expr -> id .)
    LE              reduce using rule 39 (expr -> id .)
    GE              reduce using rule 39 (expr -> id .)
    LT              reduce using rule 39 (expr -> id .)
    GT              reduce using rule 39 (expr -> id .)
    EQ              reduce using rule 39 (expr -> id .)
    NE              reduce using rule 39 (expr -> id .)
    LAND            reduce using rule 39 (expr -> id .)
    LOR             reduce using rule 39 (expr -> id .)
    RPAREN          reduce using rule 39 (expr -> id .)
    COMMA           reduce using rule 39 (expr -> id .)


state 15

    (40) expr -> INTEGER .

    SEMI            reduce using rule 40 (expr -> INTEGER .)
    PLUS            reduce using rule 40 (expr -> INTEGER .)
    MINUS           reduce using rule 40 (expr -> INTEGER .)
    MUL             reduce using rule 40 (expr -> INTEGER .)
    DIVIDE          reduce using rule 40 (expr -> INTEGER .)
    INTDIVIDE       reduce using rule 40 (expr -> INTEGER .)
    MODULO          reduce using rule 40 (expr -> INTEGER .)
    POW             reduce using rule 40 (expr -> INTEGER .)
    LE              reduce using rule 40 (expr -> INTEGER .)
    GE              reduce using rule 40 (expr -> INTEGER .)
    LT              reduce using rule 40 (expr -> INTEGER .)
    GT              reduce using rule 40 (expr -> INTEGER .)
    EQ              reduce using rule 40 (expr -> INTEGER .)
    NE              reduce using rule 40 (expr -> INTEGER .)
    LAND            reduce using rule 40 (expr -> INTEGER .)
    LOR             reduce using rule 40 (expr -> INTEGER .)
    RPAREN          reduce using rule 40 (expr -> INTEGER .)
    COMMA           reduce using rule 40 (expr -> INTEGER .)


state 16

    (41) expr -> DOUBLE .

    SEMI            reduce using rule 41 (expr -> DOUBLE .)
    PLUS            reduce using rule 41 (expr -> DOUBLE .)
    MINUS           reduce using rule 41 (expr -> DOUBLE .)
    MUL             reduce using rule 41 (expr -> DOUBLE .)
    DIVIDE          reduce using rule 41 (expr -> DOUBLE .)
    INTDIVIDE       reduce using rule 41 (expr -> DOUBLE .)
    MODULO          reduce using rule 41 (expr -> DOUBLE .)
    POW             reduce using rule 41 (expr -> DOUBLE .)
    LE              reduce using rule 41 (expr -> DOUBLE .)
    GE              reduce using rule 41 (expr -> DOUBLE .)
    LT              reduce using rule 41 (expr -> DOUBLE .)
    GT              reduce using rule 41 (expr -> DOUBLE .)
    EQ              reduce using rule 41 (expr -> DOUBLE .)
    NE              reduce using rule 41 (expr -> DOUBLE .)
    LAND            reduce using rule 41 (expr -> DOUBLE .)
    LOR             reduce using rule 41 (expr -> DOUBLE .)
    RPAREN          reduce using rule 41 (expr -> DOUBLE .)
    COMMA           reduce using rule 41 (expr -> DOUBLE .)


state 17

    (42) expr -> BOOLEAN .

    SEMI            reduce using rule 42 (expr -> BOOLEAN .)
    PLUS            reduce using rule 42 (expr -> BOOLEAN .)
    MINUS           reduce using rule 42 (expr -> BOOLEAN .)
    MUL             reduce using rule 42 (expr -> BOOLEAN .)
    DIVIDE          reduce using rule 42 (expr -> BOOLEAN .)
    INTDIVIDE       reduce using rule 42 (expr -> BOOLEAN .)
    MODULO          reduce using rule 42 (expr -> BOOLEAN .)
    POW             reduce using rule 42 (expr -> BOOLEAN .)
    LE              reduce using rule 42 (expr -> BOOLEAN .)
    GE              reduce using rule 42 (expr -> BOOLEAN .)
    LT              reduce using rule 42 (expr -> BOOLEAN .)
    GT              reduce using rule 42 (expr -> BOOLEAN .)
    EQ              reduce using rule 42 (expr -> BOOLEAN .)
    NE              reduce using rule 42 (expr -> BOOLEAN .)
    LAND            reduce using rule 42 (expr -> BOOLEAN .)
    LOR             reduce using rule 42 (expr -> BOOLEAN .)
    RPAREN          reduce using rule 42 (expr -> BOOLEAN .)
    COMMA           reduce using rule 42 (expr -> BOOLEAN .)


state 18

    (43) expr -> STRING .

    SEMI            reduce using rule 43 (expr -> STRING .)
    PLUS            reduce using rule 43 (expr -> STRING .)
    MINUS           reduce using rule 43 (expr -> STRING .)
    MUL             reduce using rule 43 (expr -> STRING .)
    DIVIDE          reduce using rule 43 (expr -> STRING .)
    INTDIVIDE       reduce using rule 43 (expr -> STRING .)
    MODULO          reduce using rule 43 (expr -> STRING .)
    POW             reduce using rule 43 (expr -> STRING .)
    LE              reduce using rule 43 (expr -> STRING .)
    GE              reduce using rule 43 (expr -> STRING .)
    LT              reduce using rule 43 (expr -> STRING .)
    GT              reduce using rule 43 (expr -> STRING .)
    EQ              reduce using rule 43 (expr -> STRING .)
    NE              reduce using rule 43 (expr -> STRING .)
    LAND            reduce using rule 43 (expr -> STRING .)
    LOR             reduce using rule 43 (expr -> STRING .)
    RPAREN          reduce using rule 43 (expr -> STRING .)
    COMMA           reduce using rule 43 (expr -> STRING .)


state 19

    (4) func_declaration -> FUNCTION . datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (45) datatype -> . DATATYPE

    DATATYPE        shift and go to state 46

    datatype                       shift and go to state 45

state 20

    (12) struct_declaration -> STRUCTURE . id LBRACE params RBRACE
    (46) id -> . ID

    ID              shift and go to state 48

    id                             shift and go to state 47

state 21

    (5) stmt_list -> stmt_list statement .

    RETURN          reduce using rule 5 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 5 (stmt_list -> stmt_list statement .)
    MINUS           reduce using rule 5 (stmt_list -> stmt_list statement .)
    LNOT            reduce using rule 5 (stmt_list -> stmt_list statement .)
    INTEGER         reduce using rule 5 (stmt_list -> stmt_list statement .)
    DOUBLE          reduce using rule 5 (stmt_list -> stmt_list statement .)
    BOOLEAN         reduce using rule 5 (stmt_list -> stmt_list statement .)
    STRING          reduce using rule 5 (stmt_list -> stmt_list statement .)
    LPAREN          reduce using rule 5 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 5 (stmt_list -> stmt_list statement .)
    STRUCTURE       reduce using rule 5 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 5 (stmt_list -> stmt_list statement .)
    RBRACE          reduce using rule 5 (stmt_list -> stmt_list statement .)


state 22

    (7) statement -> expr SEMI .

    RETURN          reduce using rule 7 (statement -> expr SEMI .)
    ID              reduce using rule 7 (statement -> expr SEMI .)
    MINUS           reduce using rule 7 (statement -> expr SEMI .)
    LNOT            reduce using rule 7 (statement -> expr SEMI .)
    INTEGER         reduce using rule 7 (statement -> expr SEMI .)
    DOUBLE          reduce using rule 7 (statement -> expr SEMI .)
    BOOLEAN         reduce using rule 7 (statement -> expr SEMI .)
    STRING          reduce using rule 7 (statement -> expr SEMI .)
    LPAREN          reduce using rule 7 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 7 (statement -> expr SEMI .)
    STRUCTURE       reduce using rule 7 (statement -> expr SEMI .)
    $end            reduce using rule 7 (statement -> expr SEMI .)
    RBRACE          reduce using rule 7 (statement -> expr SEMI .)


state 23

    (22) expr -> expr PLUS . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 49
    id                             shift and go to state 14

state 24

    (23) expr -> expr MINUS . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 50
    id                             shift and go to state 14

state 25

    (24) expr -> expr MUL . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 51
    id                             shift and go to state 14

state 26

    (25) expr -> expr DIVIDE . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 52
    id                             shift and go to state 14

state 27

    (26) expr -> expr INTDIVIDE . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 53
    id                             shift and go to state 14

state 28

    (27) expr -> expr MODULO . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 54
    id                             shift and go to state 14

state 29

    (28) expr -> expr POW . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 55
    id                             shift and go to state 14

state 30

    (29) expr -> expr LE . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 56
    id                             shift and go to state 14

state 31

    (30) expr -> expr GE . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 57
    id                             shift and go to state 14

state 32

    (31) expr -> expr LT . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 58
    id                             shift and go to state 14

state 33

    (32) expr -> expr GT . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 59
    id                             shift and go to state 14

state 34

    (33) expr -> expr EQ . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 60
    id                             shift and go to state 14

state 35

    (34) expr -> expr NE . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 61
    id                             shift and go to state 14

state 36

    (36) expr -> expr LAND . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 62
    id                             shift and go to state 14

state 37

    (37) expr -> expr LOR . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 63
    id                             shift and go to state 14

state 38

    (8) statement -> RETURN expr . SEMI
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            shift and go to state 64
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36
    LOR             shift and go to state 37


state 39

    (17) expr -> ID . LPAREN args RPAREN
    (46) id -> ID .

    LPAREN          shift and go to state 40
    SEMI            reduce using rule 46 (id -> ID .)
    PLUS            reduce using rule 46 (id -> ID .)
    MINUS           reduce using rule 46 (id -> ID .)
    MUL             reduce using rule 46 (id -> ID .)
    DIVIDE          reduce using rule 46 (id -> ID .)
    INTDIVIDE       reduce using rule 46 (id -> ID .)
    MODULO          reduce using rule 46 (id -> ID .)
    POW             reduce using rule 46 (id -> ID .)
    LE              reduce using rule 46 (id -> ID .)
    GE              reduce using rule 46 (id -> ID .)
    LT              reduce using rule 46 (id -> ID .)
    GT              reduce using rule 46 (id -> ID .)
    EQ              reduce using rule 46 (id -> ID .)
    NE              reduce using rule 46 (id -> ID .)
    LAND            reduce using rule 46 (id -> ID .)
    LOR             reduce using rule 46 (id -> ID .)
    RPAREN          reduce using rule 46 (id -> ID .)
    COMMA           reduce using rule 46 (id -> ID .)


state 40

    (17) expr -> ID LPAREN . args RPAREN
    (18) args -> .
    (19) args -> . expr
    (20) args -> . args COMMA expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    RPAREN          reduce using rule 18 (args -> .)
    COMMA           reduce using rule 18 (args -> .)
    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    args                           shift and go to state 65
    expr                           shift and go to state 66
    id                             shift and go to state 14

state 41

    (21) assign -> ID EQUALS . expr SEMI
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 67
    id                             shift and go to state 14

state 42

    (44) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    RPAREN          shift and go to state 68
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36
    LOR             shift and go to state 37


state 43

    (35) expr -> MINUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 35 (expr -> MINUS expr .)
    PLUS            reduce using rule 35 (expr -> MINUS expr .)
    MINUS           reduce using rule 35 (expr -> MINUS expr .)
    MUL             reduce using rule 35 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 35 (expr -> MINUS expr .)
    INTDIVIDE       reduce using rule 35 (expr -> MINUS expr .)
    MODULO          reduce using rule 35 (expr -> MINUS expr .)
    POW             reduce using rule 35 (expr -> MINUS expr .)
    LE              reduce using rule 35 (expr -> MINUS expr .)
    GE              reduce using rule 35 (expr -> MINUS expr .)
    LT              reduce using rule 35 (expr -> MINUS expr .)
    GT              reduce using rule 35 (expr -> MINUS expr .)
    EQ              reduce using rule 35 (expr -> MINUS expr .)
    NE              reduce using rule 35 (expr -> MINUS expr .)
    LAND            reduce using rule 35 (expr -> MINUS expr .)
    LOR             reduce using rule 35 (expr -> MINUS expr .)
    RPAREN          reduce using rule 35 (expr -> MINUS expr .)
    COMMA           reduce using rule 35 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! POW             [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 44

    (38) expr -> LNOT expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 38 (expr -> LNOT expr .)
    PLUS            reduce using rule 38 (expr -> LNOT expr .)
    MINUS           reduce using rule 38 (expr -> LNOT expr .)
    MUL             reduce using rule 38 (expr -> LNOT expr .)
    DIVIDE          reduce using rule 38 (expr -> LNOT expr .)
    INTDIVIDE       reduce using rule 38 (expr -> LNOT expr .)
    MODULO          reduce using rule 38 (expr -> LNOT expr .)
    POW             reduce using rule 38 (expr -> LNOT expr .)
    LE              reduce using rule 38 (expr -> LNOT expr .)
    GE              reduce using rule 38 (expr -> LNOT expr .)
    LT              reduce using rule 38 (expr -> LNOT expr .)
    GT              reduce using rule 38 (expr -> LNOT expr .)
    EQ              reduce using rule 38 (expr -> LNOT expr .)
    NE              reduce using rule 38 (expr -> LNOT expr .)
    LAND            reduce using rule 38 (expr -> LNOT expr .)
    LOR             reduce using rule 38 (expr -> LNOT expr .)
    RPAREN          reduce using rule 38 (expr -> LNOT expr .)
    COMMA           reduce using rule 38 (expr -> LNOT expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! POW             [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 45

    (4) func_declaration -> FUNCTION datatype . id LPAREN params RPAREN LBRACE basic_block RBRACE
    (46) id -> . ID

    ID              shift and go to state 48

    id                             shift and go to state 69

state 46

    (45) datatype -> DATATYPE .

    ID              reduce using rule 45 (datatype -> DATATYPE .)


state 47

    (12) struct_declaration -> STRUCTURE id . LBRACE params RBRACE

    LBRACE          shift and go to state 70


state 48

    (46) id -> ID .

    LBRACE          reduce using rule 46 (id -> ID .)
    LPAREN          reduce using rule 46 (id -> ID .)


state 49

    (22) expr -> expr PLUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 22 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 22 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 22 (expr -> expr PLUS expr .)
    LE              reduce using rule 22 (expr -> expr PLUS expr .)
    GE              reduce using rule 22 (expr -> expr PLUS expr .)
    LT              reduce using rule 22 (expr -> expr PLUS expr .)
    GT              reduce using rule 22 (expr -> expr PLUS expr .)
    EQ              reduce using rule 22 (expr -> expr PLUS expr .)
    NE              reduce using rule 22 (expr -> expr PLUS expr .)
    LAND            reduce using rule 22 (expr -> expr PLUS expr .)
    LOR             reduce using rule 22 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 22 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 22 (expr -> expr PLUS expr .)
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29

  ! MUL             [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 50

    (23) expr -> expr MINUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 23 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 23 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 23 (expr -> expr MINUS expr .)
    LE              reduce using rule 23 (expr -> expr MINUS expr .)
    GE              reduce using rule 23 (expr -> expr MINUS expr .)
    LT              reduce using rule 23 (expr -> expr MINUS expr .)
    GT              reduce using rule 23 (expr -> expr MINUS expr .)
    EQ              reduce using rule 23 (expr -> expr MINUS expr .)
    NE              reduce using rule 23 (expr -> expr MINUS expr .)
    LAND            reduce using rule 23 (expr -> expr MINUS expr .)
    LOR             reduce using rule 23 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 23 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 23 (expr -> expr MINUS expr .)
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29

  ! MUL             [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 51

    (24) expr -> expr MUL expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 24 (expr -> expr MUL expr .)
    PLUS            reduce using rule 24 (expr -> expr MUL expr .)
    MINUS           reduce using rule 24 (expr -> expr MUL expr .)
    MUL             reduce using rule 24 (expr -> expr MUL expr .)
    DIVIDE          reduce using rule 24 (expr -> expr MUL expr .)
    INTDIVIDE       reduce using rule 24 (expr -> expr MUL expr .)
    MODULO          reduce using rule 24 (expr -> expr MUL expr .)
    LE              reduce using rule 24 (expr -> expr MUL expr .)
    GE              reduce using rule 24 (expr -> expr MUL expr .)
    LT              reduce using rule 24 (expr -> expr MUL expr .)
    GT              reduce using rule 24 (expr -> expr MUL expr .)
    EQ              reduce using rule 24 (expr -> expr MUL expr .)
    NE              reduce using rule 24 (expr -> expr MUL expr .)
    LAND            reduce using rule 24 (expr -> expr MUL expr .)
    LOR             reduce using rule 24 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 24 (expr -> expr MUL expr .)
    COMMA           reduce using rule 24 (expr -> expr MUL expr .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 24 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 52

    (25) expr -> expr DIVIDE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 25 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 25 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 25 (expr -> expr DIVIDE expr .)
    MUL             reduce using rule 25 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 25 (expr -> expr DIVIDE expr .)
    INTDIVIDE       reduce using rule 25 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 25 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 25 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 25 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 25 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 25 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 25 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 25 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 25 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 25 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 25 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 25 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 53

    (26) expr -> expr INTDIVIDE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    PLUS            reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    MINUS           reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    MUL             reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    DIVIDE          reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    INTDIVIDE       reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    MODULO          reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    LE              reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    GE              reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    LT              reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    GT              reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    EQ              reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    NE              reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    LAND            reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    LOR             reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    RPAREN          reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    COMMA           reduce using rule 26 (expr -> expr INTDIVIDE expr .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 26 (expr -> expr INTDIVIDE expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 54

    (27) expr -> expr MODULO expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 27 (expr -> expr MODULO expr .)
    PLUS            reduce using rule 27 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 27 (expr -> expr MODULO expr .)
    MUL             reduce using rule 27 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 27 (expr -> expr MODULO expr .)
    INTDIVIDE       reduce using rule 27 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 27 (expr -> expr MODULO expr .)
    LE              reduce using rule 27 (expr -> expr MODULO expr .)
    GE              reduce using rule 27 (expr -> expr MODULO expr .)
    LT              reduce using rule 27 (expr -> expr MODULO expr .)
    GT              reduce using rule 27 (expr -> expr MODULO expr .)
    EQ              reduce using rule 27 (expr -> expr MODULO expr .)
    NE              reduce using rule 27 (expr -> expr MODULO expr .)
    LAND            reduce using rule 27 (expr -> expr MODULO expr .)
    LOR             reduce using rule 27 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 27 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 27 (expr -> expr MODULO expr .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 27 (expr -> expr MODULO expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 55

    (28) expr -> expr POW expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 28 (expr -> expr POW expr .)
    PLUS            reduce using rule 28 (expr -> expr POW expr .)
    MINUS           reduce using rule 28 (expr -> expr POW expr .)
    MUL             reduce using rule 28 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 28 (expr -> expr POW expr .)
    INTDIVIDE       reduce using rule 28 (expr -> expr POW expr .)
    MODULO          reduce using rule 28 (expr -> expr POW expr .)
    LE              reduce using rule 28 (expr -> expr POW expr .)
    GE              reduce using rule 28 (expr -> expr POW expr .)
    LT              reduce using rule 28 (expr -> expr POW expr .)
    GT              reduce using rule 28 (expr -> expr POW expr .)
    EQ              reduce using rule 28 (expr -> expr POW expr .)
    NE              reduce using rule 28 (expr -> expr POW expr .)
    LAND            reduce using rule 28 (expr -> expr POW expr .)
    LOR             reduce using rule 28 (expr -> expr POW expr .)
    RPAREN          reduce using rule 28 (expr -> expr POW expr .)
    COMMA           reduce using rule 28 (expr -> expr POW expr .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 28 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! MUL             [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! INTDIVIDE       [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 56

    (29) expr -> expr LE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 29 (expr -> expr LE expr .)
    LE              reduce using rule 29 (expr -> expr LE expr .)
    GE              reduce using rule 29 (expr -> expr LE expr .)
    LT              reduce using rule 29 (expr -> expr LE expr .)
    GT              reduce using rule 29 (expr -> expr LE expr .)
    EQ              reduce using rule 29 (expr -> expr LE expr .)
    NE              reduce using rule 29 (expr -> expr LE expr .)
    LAND            reduce using rule 29 (expr -> expr LE expr .)
    LOR             reduce using rule 29 (expr -> expr LE expr .)
    RPAREN          reduce using rule 29 (expr -> expr LE expr .)
    COMMA           reduce using rule 29 (expr -> expr LE expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29

  ! PLUS            [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! INTDIVIDE       [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 29 (expr -> expr LE expr .) ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 57

    (30) expr -> expr GE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 30 (expr -> expr GE expr .)
    LE              reduce using rule 30 (expr -> expr GE expr .)
    GE              reduce using rule 30 (expr -> expr GE expr .)
    LT              reduce using rule 30 (expr -> expr GE expr .)
    GT              reduce using rule 30 (expr -> expr GE expr .)
    EQ              reduce using rule 30 (expr -> expr GE expr .)
    NE              reduce using rule 30 (expr -> expr GE expr .)
    LAND            reduce using rule 30 (expr -> expr GE expr .)
    LOR             reduce using rule 30 (expr -> expr GE expr .)
    RPAREN          reduce using rule 30 (expr -> expr GE expr .)
    COMMA           reduce using rule 30 (expr -> expr GE expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29

  ! PLUS            [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! INTDIVIDE       [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 30 (expr -> expr GE expr .) ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 58

    (31) expr -> expr LT expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 31 (expr -> expr LT expr .)
    LE              reduce using rule 31 (expr -> expr LT expr .)
    GE              reduce using rule 31 (expr -> expr LT expr .)
    LT              reduce using rule 31 (expr -> expr LT expr .)
    GT              reduce using rule 31 (expr -> expr LT expr .)
    EQ              reduce using rule 31 (expr -> expr LT expr .)
    NE              reduce using rule 31 (expr -> expr LT expr .)
    LAND            reduce using rule 31 (expr -> expr LT expr .)
    LOR             reduce using rule 31 (expr -> expr LT expr .)
    RPAREN          reduce using rule 31 (expr -> expr LT expr .)
    COMMA           reduce using rule 31 (expr -> expr LT expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29

  ! PLUS            [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! INTDIVIDE       [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 31 (expr -> expr LT expr .) ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 59

    (32) expr -> expr GT expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 32 (expr -> expr GT expr .)
    LE              reduce using rule 32 (expr -> expr GT expr .)
    GE              reduce using rule 32 (expr -> expr GT expr .)
    LT              reduce using rule 32 (expr -> expr GT expr .)
    GT              reduce using rule 32 (expr -> expr GT expr .)
    EQ              reduce using rule 32 (expr -> expr GT expr .)
    NE              reduce using rule 32 (expr -> expr GT expr .)
    LAND            reduce using rule 32 (expr -> expr GT expr .)
    LOR             reduce using rule 32 (expr -> expr GT expr .)
    RPAREN          reduce using rule 32 (expr -> expr GT expr .)
    COMMA           reduce using rule 32 (expr -> expr GT expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29

  ! PLUS            [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! INTDIVIDE       [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! LE              [ shift and go to state 30 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 32 ]
  ! GT              [ shift and go to state 33 ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 60

    (33) expr -> expr EQ expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 33 (expr -> expr EQ expr .)
    EQ              reduce using rule 33 (expr -> expr EQ expr .)
    NE              reduce using rule 33 (expr -> expr EQ expr .)
    LAND            reduce using rule 33 (expr -> expr EQ expr .)
    LOR             reduce using rule 33 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 33 (expr -> expr EQ expr .)
    COMMA           reduce using rule 33 (expr -> expr EQ expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33

  ! PLUS            [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! INTDIVIDE       [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 61

    (34) expr -> expr NE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 34 (expr -> expr NE expr .)
    EQ              reduce using rule 34 (expr -> expr NE expr .)
    NE              reduce using rule 34 (expr -> expr NE expr .)
    LAND            reduce using rule 34 (expr -> expr NE expr .)
    LOR             reduce using rule 34 (expr -> expr NE expr .)
    RPAREN          reduce using rule 34 (expr -> expr NE expr .)
    COMMA           reduce using rule 34 (expr -> expr NE expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33

  ! PLUS            [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! INTDIVIDE       [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 34 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 34 ]
  ! NE              [ shift and go to state 35 ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 62

    (36) expr -> expr LAND expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 36 (expr -> expr LAND expr .)
    LAND            reduce using rule 36 (expr -> expr LAND expr .)
    LOR             reduce using rule 36 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 36 (expr -> expr LAND expr .)
    COMMA           reduce using rule 36 (expr -> expr LAND expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35

  ! PLUS            [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! MUL             [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! MODULO          [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! POW             [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! LE              [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! GE              [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! LT              [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! GT              [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! NE              [ reduce using rule 36 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 36 ]
  ! LOR             [ shift and go to state 37 ]


state 63

    (37) expr -> expr LOR expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            reduce using rule 37 (expr -> expr LOR expr .)
    LOR             reduce using rule 37 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 37 (expr -> expr LOR expr .)
    COMMA           reduce using rule 37 (expr -> expr LOR expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36

  ! PLUS            [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! MUL             [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! MODULO          [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! POW             [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! LE              [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! GE              [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! LT              [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! GT              [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! NE              [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! LAND            [ reduce using rule 37 (expr -> expr LOR expr .) ]
  ! LOR             [ shift and go to state 37 ]


state 64

    (8) statement -> RETURN expr SEMI .

    RETURN          reduce using rule 8 (statement -> RETURN expr SEMI .)
    ID              reduce using rule 8 (statement -> RETURN expr SEMI .)
    MINUS           reduce using rule 8 (statement -> RETURN expr SEMI .)
    LNOT            reduce using rule 8 (statement -> RETURN expr SEMI .)
    INTEGER         reduce using rule 8 (statement -> RETURN expr SEMI .)
    DOUBLE          reduce using rule 8 (statement -> RETURN expr SEMI .)
    BOOLEAN         reduce using rule 8 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 8 (statement -> RETURN expr SEMI .)
    LPAREN          reduce using rule 8 (statement -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 8 (statement -> RETURN expr SEMI .)
    STRUCTURE       reduce using rule 8 (statement -> RETURN expr SEMI .)
    $end            reduce using rule 8 (statement -> RETURN expr SEMI .)
    RBRACE          reduce using rule 8 (statement -> RETURN expr SEMI .)


state 65

    (17) expr -> ID LPAREN args . RPAREN
    (20) args -> args . COMMA expr

    RPAREN          shift and go to state 71
    COMMA           shift and go to state 72


state 66

    (19) args -> expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    RPAREN          reduce using rule 19 (args -> expr .)
    COMMA           reduce using rule 19 (args -> expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36
    LOR             shift and go to state 37


state 67

    (21) assign -> ID EQUALS expr . SEMI
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    SEMI            shift and go to state 73
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36
    LOR             shift and go to state 37


state 68

    (44) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    INTDIVIDE       reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 44 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 44 (expr -> LPAREN expr RPAREN .)


state 69

    (4) func_declaration -> FUNCTION datatype id . LPAREN params RPAREN LBRACE basic_block RBRACE

    LPAREN          shift and go to state 74


state 70

    (12) struct_declaration -> STRUCTURE id LBRACE . params RBRACE
    (13) params -> .
    (14) params -> . param
    (15) params -> . params COMMA param
    (16) param -> . DATATYPE ID

    RBRACE          reduce using rule 13 (params -> .)
    COMMA           reduce using rule 13 (params -> .)
    DATATYPE        shift and go to state 77

    params                         shift and go to state 75
    param                          shift and go to state 76

state 71

    (17) expr -> ID LPAREN args RPAREN .

    SEMI            reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    MUL             reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    INTDIVIDE       reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    MODULO          reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    POW             reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    LE              reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    GE              reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    LT              reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    GT              reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    NE              reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    LAND            reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    LOR             reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 17 (expr -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 17 (expr -> ID LPAREN args RPAREN .)


state 72

    (20) args -> args COMMA . expr
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (46) id -> . ID

    ID              shift and go to state 39
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11

    expr                           shift and go to state 78
    id                             shift and go to state 14

state 73

    (21) assign -> ID EQUALS expr SEMI .

    RETURN          reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    ID              reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    MINUS           reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    LNOT            reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    BOOLEAN         reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    STRING          reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    $end            reduce using rule 21 (assign -> ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 21 (assign -> ID EQUALS expr SEMI .)


state 74

    (4) func_declaration -> FUNCTION datatype id LPAREN . params RPAREN LBRACE basic_block RBRACE
    (13) params -> .
    (14) params -> . param
    (15) params -> . params COMMA param
    (16) param -> . DATATYPE ID

    RPAREN          reduce using rule 13 (params -> .)
    COMMA           reduce using rule 13 (params -> .)
    DATATYPE        shift and go to state 77

    params                         shift and go to state 79
    param                          shift and go to state 76

state 75

    (12) struct_declaration -> STRUCTURE id LBRACE params . RBRACE
    (15) params -> params . COMMA param

    RBRACE          shift and go to state 80
    COMMA           shift and go to state 81


state 76

    (14) params -> param .

    RBRACE          reduce using rule 14 (params -> param .)
    COMMA           reduce using rule 14 (params -> param .)
    RPAREN          reduce using rule 14 (params -> param .)


state 77

    (16) param -> DATATYPE . ID

    ID              shift and go to state 82


state 78

    (20) args -> args COMMA expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . MUL expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . INTDIVIDE expr
    (27) expr -> expr . MODULO expr
    (28) expr -> expr . POW expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LT expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . NE expr
    (36) expr -> expr . LAND expr
    (37) expr -> expr . LOR expr

    RPAREN          reduce using rule 20 (args -> args COMMA expr .)
    COMMA           reduce using rule 20 (args -> args COMMA expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    MUL             shift and go to state 25
    DIVIDE          shift and go to state 26
    INTDIVIDE       shift and go to state 27
    MODULO          shift and go to state 28
    POW             shift and go to state 29
    LE              shift and go to state 30
    GE              shift and go to state 31
    LT              shift and go to state 32
    GT              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35
    LAND            shift and go to state 36
    LOR             shift and go to state 37


state 79

    (4) func_declaration -> FUNCTION datatype id LPAREN params . RPAREN LBRACE basic_block RBRACE
    (15) params -> params . COMMA param

    RPAREN          shift and go to state 83
    COMMA           shift and go to state 81


state 80

    (12) struct_declaration -> STRUCTURE id LBRACE params RBRACE .

    RETURN          reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    ID              reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    MINUS           reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    LNOT            reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    INTEGER         reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    DOUBLE          reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    BOOLEAN         reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    STRING          reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    LPAREN          reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    FUNCTION        reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    STRUCTURE       reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    $end            reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)
    RBRACE          reduce using rule 12 (struct_declaration -> STRUCTURE id LBRACE params RBRACE .)


state 81

    (15) params -> params COMMA . param
    (16) param -> . DATATYPE ID

    DATATYPE        shift and go to state 77

    param                          shift and go to state 84

state 82

    (16) param -> DATATYPE ID .

    RBRACE          reduce using rule 16 (param -> DATATYPE ID .)
    COMMA           reduce using rule 16 (param -> DATATYPE ID .)
    RPAREN          reduce using rule 16 (param -> DATATYPE ID .)


state 83

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 85


state 84

    (15) params -> params COMMA param .

    RBRACE          reduce using rule 15 (params -> params COMMA param .)
    COMMA           reduce using rule 15 (params -> params COMMA param .)
    RPAREN          reduce using rule 15 (params -> params COMMA param .)


state 85

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE . basic_block RBRACE
    (3) basic_block -> . stmt_list
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . RETURN expr SEMI
    (9) statement -> . assign
    (10) statement -> . func_declaration
    (11) statement -> . struct_declaration
    (17) expr -> . ID LPAREN args RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr MUL expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr INTDIVIDE expr
    (27) expr -> . expr MODULO expr
    (28) expr -> . expr POW expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LT expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr NE expr
    (35) expr -> . MINUS expr
    (36) expr -> . expr LAND expr
    (37) expr -> . expr LOR expr
    (38) expr -> . LNOT expr
    (39) expr -> . id
    (40) expr -> . INTEGER
    (41) expr -> . DOUBLE
    (42) expr -> . BOOLEAN
    (43) expr -> . STRING
    (44) expr -> . LPAREN expr RPAREN
    (21) assign -> . ID EQUALS expr SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (12) struct_declaration -> . STRUCTURE id LBRACE params RBRACE
    (46) id -> . ID

    RETURN          shift and go to state 6
    ID              shift and go to state 10
    MINUS           shift and go to state 12
    LNOT            shift and go to state 13
    INTEGER         shift and go to state 15
    DOUBLE          shift and go to state 16
    BOOLEAN         shift and go to state 17
    STRING          shift and go to state 18
    LPAREN          shift and go to state 11
    FUNCTION        shift and go to state 19
    STRUCTURE       shift and go to state 20

    id                             shift and go to state 14
    basic_block                    shift and go to state 86
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    assign                         shift and go to state 7
    func_declaration               shift and go to state 8
    struct_declaration             shift and go to state 9

state 86

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block . RBRACE

    RBRACE          shift and go to state 87


state 87

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .

    RETURN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    ID              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    MINUS           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    LNOT            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    INTEGER         reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DOUBLE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    BOOLEAN         reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    STRING          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    LPAREN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    FUNCTION        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    STRUCTURE       reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    $end            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)

