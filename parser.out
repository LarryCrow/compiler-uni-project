Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ERROR
    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> <empty>
Rule 2     program -> basic_block
Rule 3     basic_block -> stmt_list
Rule 4     func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
Rule 5     stmt_list -> stmt_list statement
Rule 6     stmt_list -> statement
Rule 7     statement -> expr SEMI
Rule 8     statement -> var_declaration
Rule 9     statement -> return
Rule 10    statement -> assign
Rule 11    statement -> func_declaration
Rule 12    statement -> struct_declaration
Rule 13    statement -> while
Rule 14    statement -> BREAK SEMI
Rule 15    statement -> CONTINUE SEMI
Rule 16    statement -> GOTO ID SEMI
Rule 17    statement -> goto_mark
Rule 18    statement -> if-else
Rule 19    while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 20    while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
Rule 21    if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 22    if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 23    struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE
Rule 24    struct_params -> struct_param
Rule 25    struct_params -> struct_params COMMA struct_param
Rule 26    struct_param -> DATATYPE ID
Rule 27    struct_param -> func_declaration
Rule 28    expr -> ID DOT ID
Rule 29    params -> <empty>
Rule 30    params -> param
Rule 31    params -> params COMMA param
Rule 32    param -> DATATYPE ID
Rule 33    expr -> ID LPAREN args RPAREN
Rule 34    args -> <empty>
Rule 35    args -> expr
Rule 36    args -> args COMMA expr
Rule 37    var_declaration -> datatype id EQUALS expr SEMI
Rule 38    var_declaration -> datatype id SEMI
Rule 39    var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI
Rule 40    assign -> ID EQUALS expr SEMI
Rule 41    assign -> ID EQUALS LBRACE args RBRACE SEMI
Rule 42    return -> RETURN expr SEMI
Rule 43    return -> RETURN SEMI
Rule 44    expr -> expr PLUS expr
Rule 45    expr -> expr MINUS expr
Rule 46    expr -> expr MUL expr
Rule 47    expr -> expr DIVIDE expr
Rule 48    expr -> expr INTDIVIDE expr
Rule 49    expr -> expr MODULO expr
Rule 50    expr -> expr POW expr
Rule 51    expr -> expr LE expr
Rule 52    expr -> expr GE expr
Rule 53    expr -> expr LT expr
Rule 54    expr -> expr GT expr
Rule 55    expr -> expr EQ expr
Rule 56    expr -> expr NE expr
Rule 57    expr -> MINUS expr
Rule 58    expr -> expr LAND expr
Rule 59    expr -> expr LOR expr
Rule 60    expr -> LNOT expr
Rule 61    expr -> expr BAND expr
Rule 62    expr -> expr BOR expr
Rule 63    expr -> id
Rule 64    expr -> int
Rule 65    expr -> double
Rule 66    expr -> bool
Rule 67    expr -> str
Rule 68    expr -> void
Rule 69    expr -> NULL
Rule 70    expr -> LPAREN expr RPAREN
Rule 71    int -> INTEGER
Rule 72    double -> DOUBLE
Rule 73    bool -> BOOL
Rule 74    str -> STRING
Rule 75    void -> VOID
Rule 76    expr -> datatype LBRACKET RBRACKET id
Rule 77    expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
Rule 78    expr -> ID LBRACKET expr RBRACKET
Rule 79    goto_mark -> ID COLON
Rule 80    datatype -> DATATYPE
Rule 81    id -> ID

Terminals, with rules where they appear

BAND                 : 61
BOOL                 : 73
BOR                  : 62
BREAK                : 14
COLON                : 79
COMMA                : 25 31 36
COMMENT              : 
CONTINUE             : 15
DATATYPE             : 26 32 80
DIVIDE               : 47
DO                   : 20
DOT                  : 28
DOUBLE               : 72
ELSE                 : 22
EQ                   : 55
EQUALS               : 37 39 40 41 77
ERROR                : 
FUNCTION             : 4
GE                   : 52
GOTO                 : 16
GT                   : 54
ID                   : 16 26 28 28 32 33 39 40 41 78 79 81
IF                   : 21 22
INTDIVIDE            : 48
INTEGER              : 71
LAND                 : 58
LBRACE               : 4 19 20 21 22 22 23 39 41
LBRACKET             : 76 77 77 78
LE                   : 51
LNOT                 : 60
LOR                  : 59
LPAREN               : 4 19 20 21 22 33 70
LT                   : 53
MINUS                : 45 57
MODULO               : 49
MUL                  : 46
NE                   : 56
NEWLINE              : 
NULL                 : 69
PLUS                 : 44
POW                  : 50
RBRACE               : 4 19 20 21 22 22 23 39 41
RBRACKET             : 76 77 77 78
RETURN               : 42 43
RPAREN               : 4 19 20 21 22 33 70
SEMI                 : 7 14 15 16 20 37 38 39 40 41 42 43
STRING               : 74
STRUCTURE            : 23
VOID                 : 75
WHILE                : 19 20
error                : 

Nonterminals, with rules where they appear

args                 : 33 36 39 41
assign               : 10
basic_block          : 2 4
bool                 : 66
datatype             : 4 37 38 76 77 77
double               : 65
expr                 : 7 19 20 21 22 35 36 37 40 42 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 58 58 59 59 60 61 61 62 62 70 77 78
func_declaration     : 11 27
goto_mark            : 17
id                   : 4 23 37 38 39 63 76 77
if-else              : 18
int                  : 64
param                : 30 31
params               : 4 31
program              : 0
return               : 9
statement            : 5 6
stmt_list            : 3 5 19 20 21 22 22
str                  : 67
struct_declaration   : 12
struct_param         : 24 25
struct_params        : 23 25
var_declaration      : 8
void                 : 68
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> .
    (2) program -> . basic_block
    (3) basic_block -> . stmt_list
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    $end            reduce using rule 1 (program -> .)
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    program                        shift and go to state 1
    basic_block                    shift and go to state 2
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (2) program -> basic_block .

    $end            reduce using rule 2 (program -> basic_block .)


state 3

    (3) basic_block -> stmt_list .
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    $end            reduce using rule 3 (basic_block -> stmt_list .)
    RBRACE          reduce using rule 3 (basic_block -> stmt_list .)
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    statement                      shift and go to state 41
    expr                           shift and go to state 5
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 4

    (6) stmt_list -> statement .

    BREAK           reduce using rule 6 (stmt_list -> statement .)
    CONTINUE        reduce using rule 6 (stmt_list -> statement .)
    GOTO            reduce using rule 6 (stmt_list -> statement .)
    ID              reduce using rule 6 (stmt_list -> statement .)
    MINUS           reduce using rule 6 (stmt_list -> statement .)
    LNOT            reduce using rule 6 (stmt_list -> statement .)
    NULL            reduce using rule 6 (stmt_list -> statement .)
    LPAREN          reduce using rule 6 (stmt_list -> statement .)
    RETURN          reduce using rule 6 (stmt_list -> statement .)
    FUNCTION        reduce using rule 6 (stmt_list -> statement .)
    STRUCTURE       reduce using rule 6 (stmt_list -> statement .)
    WHILE           reduce using rule 6 (stmt_list -> statement .)
    DO              reduce using rule 6 (stmt_list -> statement .)
    IF              reduce using rule 6 (stmt_list -> statement .)
    INTEGER         reduce using rule 6 (stmt_list -> statement .)
    DOUBLE          reduce using rule 6 (stmt_list -> statement .)
    BOOL            reduce using rule 6 (stmt_list -> statement .)
    STRING          reduce using rule 6 (stmt_list -> statement .)
    VOID            reduce using rule 6 (stmt_list -> statement .)
    DATATYPE        reduce using rule 6 (stmt_list -> statement .)
    $end            reduce using rule 6 (stmt_list -> statement .)
    RBRACE          reduce using rule 6 (stmt_list -> statement .)


state 5

    (7) statement -> expr . SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 6

    (8) statement -> var_declaration .

    BREAK           reduce using rule 8 (statement -> var_declaration .)
    CONTINUE        reduce using rule 8 (statement -> var_declaration .)
    GOTO            reduce using rule 8 (statement -> var_declaration .)
    ID              reduce using rule 8 (statement -> var_declaration .)
    MINUS           reduce using rule 8 (statement -> var_declaration .)
    LNOT            reduce using rule 8 (statement -> var_declaration .)
    NULL            reduce using rule 8 (statement -> var_declaration .)
    LPAREN          reduce using rule 8 (statement -> var_declaration .)
    RETURN          reduce using rule 8 (statement -> var_declaration .)
    FUNCTION        reduce using rule 8 (statement -> var_declaration .)
    STRUCTURE       reduce using rule 8 (statement -> var_declaration .)
    WHILE           reduce using rule 8 (statement -> var_declaration .)
    DO              reduce using rule 8 (statement -> var_declaration .)
    IF              reduce using rule 8 (statement -> var_declaration .)
    INTEGER         reduce using rule 8 (statement -> var_declaration .)
    DOUBLE          reduce using rule 8 (statement -> var_declaration .)
    BOOL            reduce using rule 8 (statement -> var_declaration .)
    STRING          reduce using rule 8 (statement -> var_declaration .)
    VOID            reduce using rule 8 (statement -> var_declaration .)
    DATATYPE        reduce using rule 8 (statement -> var_declaration .)
    $end            reduce using rule 8 (statement -> var_declaration .)
    RBRACE          reduce using rule 8 (statement -> var_declaration .)


state 7

    (9) statement -> return .

    BREAK           reduce using rule 9 (statement -> return .)
    CONTINUE        reduce using rule 9 (statement -> return .)
    GOTO            reduce using rule 9 (statement -> return .)
    ID              reduce using rule 9 (statement -> return .)
    MINUS           reduce using rule 9 (statement -> return .)
    LNOT            reduce using rule 9 (statement -> return .)
    NULL            reduce using rule 9 (statement -> return .)
    LPAREN          reduce using rule 9 (statement -> return .)
    RETURN          reduce using rule 9 (statement -> return .)
    FUNCTION        reduce using rule 9 (statement -> return .)
    STRUCTURE       reduce using rule 9 (statement -> return .)
    WHILE           reduce using rule 9 (statement -> return .)
    DO              reduce using rule 9 (statement -> return .)
    IF              reduce using rule 9 (statement -> return .)
    INTEGER         reduce using rule 9 (statement -> return .)
    DOUBLE          reduce using rule 9 (statement -> return .)
    BOOL            reduce using rule 9 (statement -> return .)
    STRING          reduce using rule 9 (statement -> return .)
    VOID            reduce using rule 9 (statement -> return .)
    DATATYPE        reduce using rule 9 (statement -> return .)
    $end            reduce using rule 9 (statement -> return .)
    RBRACE          reduce using rule 9 (statement -> return .)


state 8

    (10) statement -> assign .

    BREAK           reduce using rule 10 (statement -> assign .)
    CONTINUE        reduce using rule 10 (statement -> assign .)
    GOTO            reduce using rule 10 (statement -> assign .)
    ID              reduce using rule 10 (statement -> assign .)
    MINUS           reduce using rule 10 (statement -> assign .)
    LNOT            reduce using rule 10 (statement -> assign .)
    NULL            reduce using rule 10 (statement -> assign .)
    LPAREN          reduce using rule 10 (statement -> assign .)
    RETURN          reduce using rule 10 (statement -> assign .)
    FUNCTION        reduce using rule 10 (statement -> assign .)
    STRUCTURE       reduce using rule 10 (statement -> assign .)
    WHILE           reduce using rule 10 (statement -> assign .)
    DO              reduce using rule 10 (statement -> assign .)
    IF              reduce using rule 10 (statement -> assign .)
    INTEGER         reduce using rule 10 (statement -> assign .)
    DOUBLE          reduce using rule 10 (statement -> assign .)
    BOOL            reduce using rule 10 (statement -> assign .)
    STRING          reduce using rule 10 (statement -> assign .)
    VOID            reduce using rule 10 (statement -> assign .)
    DATATYPE        reduce using rule 10 (statement -> assign .)
    $end            reduce using rule 10 (statement -> assign .)
    RBRACE          reduce using rule 10 (statement -> assign .)


state 9

    (11) statement -> func_declaration .

    BREAK           reduce using rule 11 (statement -> func_declaration .)
    CONTINUE        reduce using rule 11 (statement -> func_declaration .)
    GOTO            reduce using rule 11 (statement -> func_declaration .)
    ID              reduce using rule 11 (statement -> func_declaration .)
    MINUS           reduce using rule 11 (statement -> func_declaration .)
    LNOT            reduce using rule 11 (statement -> func_declaration .)
    NULL            reduce using rule 11 (statement -> func_declaration .)
    LPAREN          reduce using rule 11 (statement -> func_declaration .)
    RETURN          reduce using rule 11 (statement -> func_declaration .)
    FUNCTION        reduce using rule 11 (statement -> func_declaration .)
    STRUCTURE       reduce using rule 11 (statement -> func_declaration .)
    WHILE           reduce using rule 11 (statement -> func_declaration .)
    DO              reduce using rule 11 (statement -> func_declaration .)
    IF              reduce using rule 11 (statement -> func_declaration .)
    INTEGER         reduce using rule 11 (statement -> func_declaration .)
    DOUBLE          reduce using rule 11 (statement -> func_declaration .)
    BOOL            reduce using rule 11 (statement -> func_declaration .)
    STRING          reduce using rule 11 (statement -> func_declaration .)
    VOID            reduce using rule 11 (statement -> func_declaration .)
    DATATYPE        reduce using rule 11 (statement -> func_declaration .)
    $end            reduce using rule 11 (statement -> func_declaration .)
    RBRACE          reduce using rule 11 (statement -> func_declaration .)


state 10

    (12) statement -> struct_declaration .

    BREAK           reduce using rule 12 (statement -> struct_declaration .)
    CONTINUE        reduce using rule 12 (statement -> struct_declaration .)
    GOTO            reduce using rule 12 (statement -> struct_declaration .)
    ID              reduce using rule 12 (statement -> struct_declaration .)
    MINUS           reduce using rule 12 (statement -> struct_declaration .)
    LNOT            reduce using rule 12 (statement -> struct_declaration .)
    NULL            reduce using rule 12 (statement -> struct_declaration .)
    LPAREN          reduce using rule 12 (statement -> struct_declaration .)
    RETURN          reduce using rule 12 (statement -> struct_declaration .)
    FUNCTION        reduce using rule 12 (statement -> struct_declaration .)
    STRUCTURE       reduce using rule 12 (statement -> struct_declaration .)
    WHILE           reduce using rule 12 (statement -> struct_declaration .)
    DO              reduce using rule 12 (statement -> struct_declaration .)
    IF              reduce using rule 12 (statement -> struct_declaration .)
    INTEGER         reduce using rule 12 (statement -> struct_declaration .)
    DOUBLE          reduce using rule 12 (statement -> struct_declaration .)
    BOOL            reduce using rule 12 (statement -> struct_declaration .)
    STRING          reduce using rule 12 (statement -> struct_declaration .)
    VOID            reduce using rule 12 (statement -> struct_declaration .)
    DATATYPE        reduce using rule 12 (statement -> struct_declaration .)
    $end            reduce using rule 12 (statement -> struct_declaration .)
    RBRACE          reduce using rule 12 (statement -> struct_declaration .)


state 11

    (13) statement -> while .

    BREAK           reduce using rule 13 (statement -> while .)
    CONTINUE        reduce using rule 13 (statement -> while .)
    GOTO            reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)
    MINUS           reduce using rule 13 (statement -> while .)
    LNOT            reduce using rule 13 (statement -> while .)
    NULL            reduce using rule 13 (statement -> while .)
    LPAREN          reduce using rule 13 (statement -> while .)
    RETURN          reduce using rule 13 (statement -> while .)
    FUNCTION        reduce using rule 13 (statement -> while .)
    STRUCTURE       reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    DO              reduce using rule 13 (statement -> while .)
    IF              reduce using rule 13 (statement -> while .)
    INTEGER         reduce using rule 13 (statement -> while .)
    DOUBLE          reduce using rule 13 (statement -> while .)
    BOOL            reduce using rule 13 (statement -> while .)
    STRING          reduce using rule 13 (statement -> while .)
    VOID            reduce using rule 13 (statement -> while .)
    DATATYPE        reduce using rule 13 (statement -> while .)
    $end            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)


state 12

    (14) statement -> BREAK . SEMI

    SEMI            shift and go to state 60


state 13

    (15) statement -> CONTINUE . SEMI

    SEMI            shift and go to state 61


state 14

    (16) statement -> GOTO . ID SEMI

    ID              shift and go to state 62


state 15

    (28) expr -> ID . DOT ID
    (33) expr -> ID . LPAREN args RPAREN
    (78) expr -> ID . LBRACKET expr RBRACKET
    (39) var_declaration -> ID . id EQUALS LBRACE args RBRACE SEMI
    (40) assign -> ID . EQUALS expr SEMI
    (41) assign -> ID . EQUALS LBRACE args RBRACE SEMI
    (79) goto_mark -> ID . COLON
    (81) id -> ID .
    (81) id -> . ID

    DOT             shift and go to state 64
    LPAREN          shift and go to state 65
    LBRACKET        shift and go to state 66
    EQUALS          shift and go to state 68
    COLON           shift and go to state 69
    SEMI            reduce using rule 81 (id -> ID .)
    PLUS            reduce using rule 81 (id -> ID .)
    MINUS           reduce using rule 81 (id -> ID .)
    MUL             reduce using rule 81 (id -> ID .)
    DIVIDE          reduce using rule 81 (id -> ID .)
    INTDIVIDE       reduce using rule 81 (id -> ID .)
    MODULO          reduce using rule 81 (id -> ID .)
    POW             reduce using rule 81 (id -> ID .)
    LE              reduce using rule 81 (id -> ID .)
    GE              reduce using rule 81 (id -> ID .)
    LT              reduce using rule 81 (id -> ID .)
    GT              reduce using rule 81 (id -> ID .)
    EQ              reduce using rule 81 (id -> ID .)
    NE              reduce using rule 81 (id -> ID .)
    LAND            reduce using rule 81 (id -> ID .)
    LOR             reduce using rule 81 (id -> ID .)
    BAND            reduce using rule 81 (id -> ID .)
    BOR             reduce using rule 81 (id -> ID .)
    ID              shift and go to state 63

    id                             shift and go to state 67

state 16

    (17) statement -> goto_mark .

    BREAK           reduce using rule 17 (statement -> goto_mark .)
    CONTINUE        reduce using rule 17 (statement -> goto_mark .)
    GOTO            reduce using rule 17 (statement -> goto_mark .)
    ID              reduce using rule 17 (statement -> goto_mark .)
    MINUS           reduce using rule 17 (statement -> goto_mark .)
    LNOT            reduce using rule 17 (statement -> goto_mark .)
    NULL            reduce using rule 17 (statement -> goto_mark .)
    LPAREN          reduce using rule 17 (statement -> goto_mark .)
    RETURN          reduce using rule 17 (statement -> goto_mark .)
    FUNCTION        reduce using rule 17 (statement -> goto_mark .)
    STRUCTURE       reduce using rule 17 (statement -> goto_mark .)
    WHILE           reduce using rule 17 (statement -> goto_mark .)
    DO              reduce using rule 17 (statement -> goto_mark .)
    IF              reduce using rule 17 (statement -> goto_mark .)
    INTEGER         reduce using rule 17 (statement -> goto_mark .)
    DOUBLE          reduce using rule 17 (statement -> goto_mark .)
    BOOL            reduce using rule 17 (statement -> goto_mark .)
    STRING          reduce using rule 17 (statement -> goto_mark .)
    VOID            reduce using rule 17 (statement -> goto_mark .)
    DATATYPE        reduce using rule 17 (statement -> goto_mark .)
    $end            reduce using rule 17 (statement -> goto_mark .)
    RBRACE          reduce using rule 17 (statement -> goto_mark .)


state 17

    (18) statement -> if-else .

    BREAK           reduce using rule 18 (statement -> if-else .)
    CONTINUE        reduce using rule 18 (statement -> if-else .)
    GOTO            reduce using rule 18 (statement -> if-else .)
    ID              reduce using rule 18 (statement -> if-else .)
    MINUS           reduce using rule 18 (statement -> if-else .)
    LNOT            reduce using rule 18 (statement -> if-else .)
    NULL            reduce using rule 18 (statement -> if-else .)
    LPAREN          reduce using rule 18 (statement -> if-else .)
    RETURN          reduce using rule 18 (statement -> if-else .)
    FUNCTION        reduce using rule 18 (statement -> if-else .)
    STRUCTURE       reduce using rule 18 (statement -> if-else .)
    WHILE           reduce using rule 18 (statement -> if-else .)
    DO              reduce using rule 18 (statement -> if-else .)
    IF              reduce using rule 18 (statement -> if-else .)
    INTEGER         reduce using rule 18 (statement -> if-else .)
    DOUBLE          reduce using rule 18 (statement -> if-else .)
    BOOL            reduce using rule 18 (statement -> if-else .)
    STRING          reduce using rule 18 (statement -> if-else .)
    VOID            reduce using rule 18 (statement -> if-else .)
    DATATYPE        reduce using rule 18 (statement -> if-else .)
    $end            reduce using rule 18 (statement -> if-else .)
    RBRACE          reduce using rule 18 (statement -> if-else .)


state 18

    (70) expr -> LPAREN . expr RPAREN
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 70
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 19

    (57) expr -> MINUS . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 73
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 20

    (60) expr -> LNOT . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 74
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 21

    (63) expr -> id .

    SEMI            reduce using rule 63 (expr -> id .)
    PLUS            reduce using rule 63 (expr -> id .)
    MINUS           reduce using rule 63 (expr -> id .)
    MUL             reduce using rule 63 (expr -> id .)
    DIVIDE          reduce using rule 63 (expr -> id .)
    INTDIVIDE       reduce using rule 63 (expr -> id .)
    MODULO          reduce using rule 63 (expr -> id .)
    POW             reduce using rule 63 (expr -> id .)
    LE              reduce using rule 63 (expr -> id .)
    GE              reduce using rule 63 (expr -> id .)
    LT              reduce using rule 63 (expr -> id .)
    GT              reduce using rule 63 (expr -> id .)
    EQ              reduce using rule 63 (expr -> id .)
    NE              reduce using rule 63 (expr -> id .)
    LAND            reduce using rule 63 (expr -> id .)
    LOR             reduce using rule 63 (expr -> id .)
    BAND            reduce using rule 63 (expr -> id .)
    BOR             reduce using rule 63 (expr -> id .)
    RPAREN          reduce using rule 63 (expr -> id .)
    COMMA           reduce using rule 63 (expr -> id .)
    RBRACKET        reduce using rule 63 (expr -> id .)
    RBRACE          reduce using rule 63 (expr -> id .)


state 22

    (64) expr -> int .

    SEMI            reduce using rule 64 (expr -> int .)
    PLUS            reduce using rule 64 (expr -> int .)
    MINUS           reduce using rule 64 (expr -> int .)
    MUL             reduce using rule 64 (expr -> int .)
    DIVIDE          reduce using rule 64 (expr -> int .)
    INTDIVIDE       reduce using rule 64 (expr -> int .)
    MODULO          reduce using rule 64 (expr -> int .)
    POW             reduce using rule 64 (expr -> int .)
    LE              reduce using rule 64 (expr -> int .)
    GE              reduce using rule 64 (expr -> int .)
    LT              reduce using rule 64 (expr -> int .)
    GT              reduce using rule 64 (expr -> int .)
    EQ              reduce using rule 64 (expr -> int .)
    NE              reduce using rule 64 (expr -> int .)
    LAND            reduce using rule 64 (expr -> int .)
    LOR             reduce using rule 64 (expr -> int .)
    BAND            reduce using rule 64 (expr -> int .)
    BOR             reduce using rule 64 (expr -> int .)
    RPAREN          reduce using rule 64 (expr -> int .)
    COMMA           reduce using rule 64 (expr -> int .)
    RBRACKET        reduce using rule 64 (expr -> int .)
    RBRACE          reduce using rule 64 (expr -> int .)


state 23

    (65) expr -> double .

    SEMI            reduce using rule 65 (expr -> double .)
    PLUS            reduce using rule 65 (expr -> double .)
    MINUS           reduce using rule 65 (expr -> double .)
    MUL             reduce using rule 65 (expr -> double .)
    DIVIDE          reduce using rule 65 (expr -> double .)
    INTDIVIDE       reduce using rule 65 (expr -> double .)
    MODULO          reduce using rule 65 (expr -> double .)
    POW             reduce using rule 65 (expr -> double .)
    LE              reduce using rule 65 (expr -> double .)
    GE              reduce using rule 65 (expr -> double .)
    LT              reduce using rule 65 (expr -> double .)
    GT              reduce using rule 65 (expr -> double .)
    EQ              reduce using rule 65 (expr -> double .)
    NE              reduce using rule 65 (expr -> double .)
    LAND            reduce using rule 65 (expr -> double .)
    LOR             reduce using rule 65 (expr -> double .)
    BAND            reduce using rule 65 (expr -> double .)
    BOR             reduce using rule 65 (expr -> double .)
    RPAREN          reduce using rule 65 (expr -> double .)
    COMMA           reduce using rule 65 (expr -> double .)
    RBRACKET        reduce using rule 65 (expr -> double .)
    RBRACE          reduce using rule 65 (expr -> double .)


state 24

    (66) expr -> bool .

    SEMI            reduce using rule 66 (expr -> bool .)
    PLUS            reduce using rule 66 (expr -> bool .)
    MINUS           reduce using rule 66 (expr -> bool .)
    MUL             reduce using rule 66 (expr -> bool .)
    DIVIDE          reduce using rule 66 (expr -> bool .)
    INTDIVIDE       reduce using rule 66 (expr -> bool .)
    MODULO          reduce using rule 66 (expr -> bool .)
    POW             reduce using rule 66 (expr -> bool .)
    LE              reduce using rule 66 (expr -> bool .)
    GE              reduce using rule 66 (expr -> bool .)
    LT              reduce using rule 66 (expr -> bool .)
    GT              reduce using rule 66 (expr -> bool .)
    EQ              reduce using rule 66 (expr -> bool .)
    NE              reduce using rule 66 (expr -> bool .)
    LAND            reduce using rule 66 (expr -> bool .)
    LOR             reduce using rule 66 (expr -> bool .)
    BAND            reduce using rule 66 (expr -> bool .)
    BOR             reduce using rule 66 (expr -> bool .)
    RPAREN          reduce using rule 66 (expr -> bool .)
    COMMA           reduce using rule 66 (expr -> bool .)
    RBRACKET        reduce using rule 66 (expr -> bool .)
    RBRACE          reduce using rule 66 (expr -> bool .)


state 25

    (67) expr -> str .

    SEMI            reduce using rule 67 (expr -> str .)
    PLUS            reduce using rule 67 (expr -> str .)
    MINUS           reduce using rule 67 (expr -> str .)
    MUL             reduce using rule 67 (expr -> str .)
    DIVIDE          reduce using rule 67 (expr -> str .)
    INTDIVIDE       reduce using rule 67 (expr -> str .)
    MODULO          reduce using rule 67 (expr -> str .)
    POW             reduce using rule 67 (expr -> str .)
    LE              reduce using rule 67 (expr -> str .)
    GE              reduce using rule 67 (expr -> str .)
    LT              reduce using rule 67 (expr -> str .)
    GT              reduce using rule 67 (expr -> str .)
    EQ              reduce using rule 67 (expr -> str .)
    NE              reduce using rule 67 (expr -> str .)
    LAND            reduce using rule 67 (expr -> str .)
    LOR             reduce using rule 67 (expr -> str .)
    BAND            reduce using rule 67 (expr -> str .)
    BOR             reduce using rule 67 (expr -> str .)
    RPAREN          reduce using rule 67 (expr -> str .)
    COMMA           reduce using rule 67 (expr -> str .)
    RBRACKET        reduce using rule 67 (expr -> str .)
    RBRACE          reduce using rule 67 (expr -> str .)


state 26

    (68) expr -> void .

    SEMI            reduce using rule 68 (expr -> void .)
    PLUS            reduce using rule 68 (expr -> void .)
    MINUS           reduce using rule 68 (expr -> void .)
    MUL             reduce using rule 68 (expr -> void .)
    DIVIDE          reduce using rule 68 (expr -> void .)
    INTDIVIDE       reduce using rule 68 (expr -> void .)
    MODULO          reduce using rule 68 (expr -> void .)
    POW             reduce using rule 68 (expr -> void .)
    LE              reduce using rule 68 (expr -> void .)
    GE              reduce using rule 68 (expr -> void .)
    LT              reduce using rule 68 (expr -> void .)
    GT              reduce using rule 68 (expr -> void .)
    EQ              reduce using rule 68 (expr -> void .)
    NE              reduce using rule 68 (expr -> void .)
    LAND            reduce using rule 68 (expr -> void .)
    LOR             reduce using rule 68 (expr -> void .)
    BAND            reduce using rule 68 (expr -> void .)
    BOR             reduce using rule 68 (expr -> void .)
    RPAREN          reduce using rule 68 (expr -> void .)
    COMMA           reduce using rule 68 (expr -> void .)
    RBRACKET        reduce using rule 68 (expr -> void .)
    RBRACE          reduce using rule 68 (expr -> void .)


state 27

    (69) expr -> NULL .

    SEMI            reduce using rule 69 (expr -> NULL .)
    PLUS            reduce using rule 69 (expr -> NULL .)
    MINUS           reduce using rule 69 (expr -> NULL .)
    MUL             reduce using rule 69 (expr -> NULL .)
    DIVIDE          reduce using rule 69 (expr -> NULL .)
    INTDIVIDE       reduce using rule 69 (expr -> NULL .)
    MODULO          reduce using rule 69 (expr -> NULL .)
    POW             reduce using rule 69 (expr -> NULL .)
    LE              reduce using rule 69 (expr -> NULL .)
    GE              reduce using rule 69 (expr -> NULL .)
    LT              reduce using rule 69 (expr -> NULL .)
    GT              reduce using rule 69 (expr -> NULL .)
    EQ              reduce using rule 69 (expr -> NULL .)
    NE              reduce using rule 69 (expr -> NULL .)
    LAND            reduce using rule 69 (expr -> NULL .)
    LOR             reduce using rule 69 (expr -> NULL .)
    BAND            reduce using rule 69 (expr -> NULL .)
    BOR             reduce using rule 69 (expr -> NULL .)
    RPAREN          reduce using rule 69 (expr -> NULL .)
    COMMA           reduce using rule 69 (expr -> NULL .)
    RBRACKET        reduce using rule 69 (expr -> NULL .)
    RBRACE          reduce using rule 69 (expr -> NULL .)


state 28

    (76) expr -> datatype . LBRACKET RBRACKET id
    (77) expr -> datatype . LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (37) var_declaration -> datatype . id EQUALS expr SEMI
    (38) var_declaration -> datatype . id SEMI
    (81) id -> . ID

    LBRACKET        shift and go to state 75
    ID              shift and go to state 63

    id                             shift and go to state 76

state 29

    (42) return -> RETURN . expr SEMI
    (43) return -> RETURN . SEMI
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    SEMI            shift and go to state 78
    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 77
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 30

    (4) func_declaration -> FUNCTION . datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (80) datatype -> . DATATYPE

    DATATYPE        shift and go to state 40

    datatype                       shift and go to state 79

state 31

    (23) struct_declaration -> STRUCTURE . id LBRACE struct_params RBRACE
    (81) id -> . ID

    ID              shift and go to state 63

    id                             shift and go to state 80

state 32

    (19) while -> WHILE . LPAREN expr RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 81


state 33

    (20) while -> DO . LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI

    LBRACE          shift and go to state 82


state 34

    (21) if-else -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 83


state 35

    (71) int -> INTEGER .

    SEMI            reduce using rule 71 (int -> INTEGER .)
    PLUS            reduce using rule 71 (int -> INTEGER .)
    MINUS           reduce using rule 71 (int -> INTEGER .)
    MUL             reduce using rule 71 (int -> INTEGER .)
    DIVIDE          reduce using rule 71 (int -> INTEGER .)
    INTDIVIDE       reduce using rule 71 (int -> INTEGER .)
    MODULO          reduce using rule 71 (int -> INTEGER .)
    POW             reduce using rule 71 (int -> INTEGER .)
    LE              reduce using rule 71 (int -> INTEGER .)
    GE              reduce using rule 71 (int -> INTEGER .)
    LT              reduce using rule 71 (int -> INTEGER .)
    GT              reduce using rule 71 (int -> INTEGER .)
    EQ              reduce using rule 71 (int -> INTEGER .)
    NE              reduce using rule 71 (int -> INTEGER .)
    LAND            reduce using rule 71 (int -> INTEGER .)
    LOR             reduce using rule 71 (int -> INTEGER .)
    BAND            reduce using rule 71 (int -> INTEGER .)
    BOR             reduce using rule 71 (int -> INTEGER .)
    RPAREN          reduce using rule 71 (int -> INTEGER .)
    COMMA           reduce using rule 71 (int -> INTEGER .)
    RBRACKET        reduce using rule 71 (int -> INTEGER .)
    RBRACE          reduce using rule 71 (int -> INTEGER .)


state 36

    (72) double -> DOUBLE .

    SEMI            reduce using rule 72 (double -> DOUBLE .)
    PLUS            reduce using rule 72 (double -> DOUBLE .)
    MINUS           reduce using rule 72 (double -> DOUBLE .)
    MUL             reduce using rule 72 (double -> DOUBLE .)
    DIVIDE          reduce using rule 72 (double -> DOUBLE .)
    INTDIVIDE       reduce using rule 72 (double -> DOUBLE .)
    MODULO          reduce using rule 72 (double -> DOUBLE .)
    POW             reduce using rule 72 (double -> DOUBLE .)
    LE              reduce using rule 72 (double -> DOUBLE .)
    GE              reduce using rule 72 (double -> DOUBLE .)
    LT              reduce using rule 72 (double -> DOUBLE .)
    GT              reduce using rule 72 (double -> DOUBLE .)
    EQ              reduce using rule 72 (double -> DOUBLE .)
    NE              reduce using rule 72 (double -> DOUBLE .)
    LAND            reduce using rule 72 (double -> DOUBLE .)
    LOR             reduce using rule 72 (double -> DOUBLE .)
    BAND            reduce using rule 72 (double -> DOUBLE .)
    BOR             reduce using rule 72 (double -> DOUBLE .)
    RPAREN          reduce using rule 72 (double -> DOUBLE .)
    COMMA           reduce using rule 72 (double -> DOUBLE .)
    RBRACKET        reduce using rule 72 (double -> DOUBLE .)
    RBRACE          reduce using rule 72 (double -> DOUBLE .)


state 37

    (73) bool -> BOOL .

    SEMI            reduce using rule 73 (bool -> BOOL .)
    PLUS            reduce using rule 73 (bool -> BOOL .)
    MINUS           reduce using rule 73 (bool -> BOOL .)
    MUL             reduce using rule 73 (bool -> BOOL .)
    DIVIDE          reduce using rule 73 (bool -> BOOL .)
    INTDIVIDE       reduce using rule 73 (bool -> BOOL .)
    MODULO          reduce using rule 73 (bool -> BOOL .)
    POW             reduce using rule 73 (bool -> BOOL .)
    LE              reduce using rule 73 (bool -> BOOL .)
    GE              reduce using rule 73 (bool -> BOOL .)
    LT              reduce using rule 73 (bool -> BOOL .)
    GT              reduce using rule 73 (bool -> BOOL .)
    EQ              reduce using rule 73 (bool -> BOOL .)
    NE              reduce using rule 73 (bool -> BOOL .)
    LAND            reduce using rule 73 (bool -> BOOL .)
    LOR             reduce using rule 73 (bool -> BOOL .)
    BAND            reduce using rule 73 (bool -> BOOL .)
    BOR             reduce using rule 73 (bool -> BOOL .)
    RPAREN          reduce using rule 73 (bool -> BOOL .)
    COMMA           reduce using rule 73 (bool -> BOOL .)
    RBRACKET        reduce using rule 73 (bool -> BOOL .)
    RBRACE          reduce using rule 73 (bool -> BOOL .)


state 38

    (74) str -> STRING .

    SEMI            reduce using rule 74 (str -> STRING .)
    PLUS            reduce using rule 74 (str -> STRING .)
    MINUS           reduce using rule 74 (str -> STRING .)
    MUL             reduce using rule 74 (str -> STRING .)
    DIVIDE          reduce using rule 74 (str -> STRING .)
    INTDIVIDE       reduce using rule 74 (str -> STRING .)
    MODULO          reduce using rule 74 (str -> STRING .)
    POW             reduce using rule 74 (str -> STRING .)
    LE              reduce using rule 74 (str -> STRING .)
    GE              reduce using rule 74 (str -> STRING .)
    LT              reduce using rule 74 (str -> STRING .)
    GT              reduce using rule 74 (str -> STRING .)
    EQ              reduce using rule 74 (str -> STRING .)
    NE              reduce using rule 74 (str -> STRING .)
    LAND            reduce using rule 74 (str -> STRING .)
    LOR             reduce using rule 74 (str -> STRING .)
    BAND            reduce using rule 74 (str -> STRING .)
    BOR             reduce using rule 74 (str -> STRING .)
    RPAREN          reduce using rule 74 (str -> STRING .)
    COMMA           reduce using rule 74 (str -> STRING .)
    RBRACKET        reduce using rule 74 (str -> STRING .)
    RBRACE          reduce using rule 74 (str -> STRING .)


state 39

    (75) void -> VOID .

    SEMI            reduce using rule 75 (void -> VOID .)
    PLUS            reduce using rule 75 (void -> VOID .)
    MINUS           reduce using rule 75 (void -> VOID .)
    MUL             reduce using rule 75 (void -> VOID .)
    DIVIDE          reduce using rule 75 (void -> VOID .)
    INTDIVIDE       reduce using rule 75 (void -> VOID .)
    MODULO          reduce using rule 75 (void -> VOID .)
    POW             reduce using rule 75 (void -> VOID .)
    LE              reduce using rule 75 (void -> VOID .)
    GE              reduce using rule 75 (void -> VOID .)
    LT              reduce using rule 75 (void -> VOID .)
    GT              reduce using rule 75 (void -> VOID .)
    EQ              reduce using rule 75 (void -> VOID .)
    NE              reduce using rule 75 (void -> VOID .)
    LAND            reduce using rule 75 (void -> VOID .)
    LOR             reduce using rule 75 (void -> VOID .)
    BAND            reduce using rule 75 (void -> VOID .)
    BOR             reduce using rule 75 (void -> VOID .)
    RPAREN          reduce using rule 75 (void -> VOID .)
    COMMA           reduce using rule 75 (void -> VOID .)
    RBRACKET        reduce using rule 75 (void -> VOID .)
    RBRACE          reduce using rule 75 (void -> VOID .)


state 40

    (80) datatype -> DATATYPE .

    LBRACKET        reduce using rule 80 (datatype -> DATATYPE .)
    ID              reduce using rule 80 (datatype -> DATATYPE .)


state 41

    (5) stmt_list -> stmt_list statement .

    BREAK           reduce using rule 5 (stmt_list -> stmt_list statement .)
    CONTINUE        reduce using rule 5 (stmt_list -> stmt_list statement .)
    GOTO            reduce using rule 5 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 5 (stmt_list -> stmt_list statement .)
    MINUS           reduce using rule 5 (stmt_list -> stmt_list statement .)
    LNOT            reduce using rule 5 (stmt_list -> stmt_list statement .)
    NULL            reduce using rule 5 (stmt_list -> stmt_list statement .)
    LPAREN          reduce using rule 5 (stmt_list -> stmt_list statement .)
    RETURN          reduce using rule 5 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 5 (stmt_list -> stmt_list statement .)
    STRUCTURE       reduce using rule 5 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 5 (stmt_list -> stmt_list statement .)
    DO              reduce using rule 5 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 5 (stmt_list -> stmt_list statement .)
    INTEGER         reduce using rule 5 (stmt_list -> stmt_list statement .)
    DOUBLE          reduce using rule 5 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 5 (stmt_list -> stmt_list statement .)
    STRING          reduce using rule 5 (stmt_list -> stmt_list statement .)
    VOID            reduce using rule 5 (stmt_list -> stmt_list statement .)
    DATATYPE        reduce using rule 5 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 5 (stmt_list -> stmt_list statement .)
    RBRACE          reduce using rule 5 (stmt_list -> stmt_list statement .)


state 42

    (7) statement -> expr SEMI .

    BREAK           reduce using rule 7 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 7 (statement -> expr SEMI .)
    GOTO            reduce using rule 7 (statement -> expr SEMI .)
    ID              reduce using rule 7 (statement -> expr SEMI .)
    MINUS           reduce using rule 7 (statement -> expr SEMI .)
    LNOT            reduce using rule 7 (statement -> expr SEMI .)
    NULL            reduce using rule 7 (statement -> expr SEMI .)
    LPAREN          reduce using rule 7 (statement -> expr SEMI .)
    RETURN          reduce using rule 7 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 7 (statement -> expr SEMI .)
    STRUCTURE       reduce using rule 7 (statement -> expr SEMI .)
    WHILE           reduce using rule 7 (statement -> expr SEMI .)
    DO              reduce using rule 7 (statement -> expr SEMI .)
    IF              reduce using rule 7 (statement -> expr SEMI .)
    INTEGER         reduce using rule 7 (statement -> expr SEMI .)
    DOUBLE          reduce using rule 7 (statement -> expr SEMI .)
    BOOL            reduce using rule 7 (statement -> expr SEMI .)
    STRING          reduce using rule 7 (statement -> expr SEMI .)
    VOID            reduce using rule 7 (statement -> expr SEMI .)
    DATATYPE        reduce using rule 7 (statement -> expr SEMI .)
    $end            reduce using rule 7 (statement -> expr SEMI .)
    RBRACE          reduce using rule 7 (statement -> expr SEMI .)


state 43

    (44) expr -> expr PLUS . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 84
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 44

    (45) expr -> expr MINUS . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 85
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 45

    (46) expr -> expr MUL . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 86
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 46

    (47) expr -> expr DIVIDE . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 87
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 47

    (48) expr -> expr INTDIVIDE . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 88
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 48

    (49) expr -> expr MODULO . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 89
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 49

    (50) expr -> expr POW . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 90
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 50

    (51) expr -> expr LE . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 91
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 51

    (52) expr -> expr GE . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 92
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 52

    (53) expr -> expr LT . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 93
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 53

    (54) expr -> expr GT . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 94
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 54

    (55) expr -> expr EQ . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 95
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 55

    (56) expr -> expr NE . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 96
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 56

    (58) expr -> expr LAND . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 97
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 57

    (59) expr -> expr LOR . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 98
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 58

    (61) expr -> expr BAND . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 99
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 59

    (62) expr -> expr BOR . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 100
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 60

    (14) statement -> BREAK SEMI .

    BREAK           reduce using rule 14 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 14 (statement -> BREAK SEMI .)
    GOTO            reduce using rule 14 (statement -> BREAK SEMI .)
    ID              reduce using rule 14 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 14 (statement -> BREAK SEMI .)
    LNOT            reduce using rule 14 (statement -> BREAK SEMI .)
    NULL            reduce using rule 14 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 14 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 14 (statement -> BREAK SEMI .)
    FUNCTION        reduce using rule 14 (statement -> BREAK SEMI .)
    STRUCTURE       reduce using rule 14 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 14 (statement -> BREAK SEMI .)
    DO              reduce using rule 14 (statement -> BREAK SEMI .)
    IF              reduce using rule 14 (statement -> BREAK SEMI .)
    INTEGER         reduce using rule 14 (statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 14 (statement -> BREAK SEMI .)
    BOOL            reduce using rule 14 (statement -> BREAK SEMI .)
    STRING          reduce using rule 14 (statement -> BREAK SEMI .)
    VOID            reduce using rule 14 (statement -> BREAK SEMI .)
    DATATYPE        reduce using rule 14 (statement -> BREAK SEMI .)
    $end            reduce using rule 14 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 14 (statement -> BREAK SEMI .)


state 61

    (15) statement -> CONTINUE SEMI .

    BREAK           reduce using rule 15 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 15 (statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 15 (statement -> CONTINUE SEMI .)
    ID              reduce using rule 15 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 15 (statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 15 (statement -> CONTINUE SEMI .)
    NULL            reduce using rule 15 (statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 15 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 15 (statement -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 15 (statement -> CONTINUE SEMI .)
    STRUCTURE       reduce using rule 15 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 15 (statement -> CONTINUE SEMI .)
    DO              reduce using rule 15 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 15 (statement -> CONTINUE SEMI .)
    INTEGER         reduce using rule 15 (statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 15 (statement -> CONTINUE SEMI .)
    BOOL            reduce using rule 15 (statement -> CONTINUE SEMI .)
    STRING          reduce using rule 15 (statement -> CONTINUE SEMI .)
    VOID            reduce using rule 15 (statement -> CONTINUE SEMI .)
    DATATYPE        reduce using rule 15 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 15 (statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 15 (statement -> CONTINUE SEMI .)


state 62

    (16) statement -> GOTO ID . SEMI

    SEMI            shift and go to state 101


state 63

    (81) id -> ID .

    EQUALS          reduce using rule 81 (id -> ID .)
    SEMI            reduce using rule 81 (id -> ID .)
    LBRACE          reduce using rule 81 (id -> ID .)
    LPAREN          reduce using rule 81 (id -> ID .)
    PLUS            reduce using rule 81 (id -> ID .)
    MINUS           reduce using rule 81 (id -> ID .)
    MUL             reduce using rule 81 (id -> ID .)
    DIVIDE          reduce using rule 81 (id -> ID .)
    INTDIVIDE       reduce using rule 81 (id -> ID .)
    MODULO          reduce using rule 81 (id -> ID .)
    POW             reduce using rule 81 (id -> ID .)
    LE              reduce using rule 81 (id -> ID .)
    GE              reduce using rule 81 (id -> ID .)
    LT              reduce using rule 81 (id -> ID .)
    GT              reduce using rule 81 (id -> ID .)
    EQ              reduce using rule 81 (id -> ID .)
    NE              reduce using rule 81 (id -> ID .)
    LAND            reduce using rule 81 (id -> ID .)
    LOR             reduce using rule 81 (id -> ID .)
    BAND            reduce using rule 81 (id -> ID .)
    BOR             reduce using rule 81 (id -> ID .)
    RPAREN          reduce using rule 81 (id -> ID .)
    COMMA           reduce using rule 81 (id -> ID .)
    RBRACKET        reduce using rule 81 (id -> ID .)
    RBRACE          reduce using rule 81 (id -> ID .)


state 64

    (28) expr -> ID DOT . ID

    ID              shift and go to state 102


state 65

    (33) expr -> ID LPAREN . args RPAREN
    (34) args -> .
    (35) args -> . expr
    (36) args -> . args COMMA expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RPAREN          reduce using rule 34 (args -> .)
    COMMA           reduce using rule 34 (args -> .)
    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    args                           shift and go to state 103
    expr                           shift and go to state 104
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 66

    (78) expr -> ID LBRACKET . expr RBRACKET
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 105
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 67

    (39) var_declaration -> ID id . EQUALS LBRACE args RBRACE SEMI

    EQUALS          shift and go to state 106


state 68

    (40) assign -> ID EQUALS . expr SEMI
    (41) assign -> ID EQUALS . LBRACE args RBRACE SEMI
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    LBRACE          shift and go to state 108
    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 107
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 69

    (79) goto_mark -> ID COLON .

    BREAK           reduce using rule 79 (goto_mark -> ID COLON .)
    CONTINUE        reduce using rule 79 (goto_mark -> ID COLON .)
    GOTO            reduce using rule 79 (goto_mark -> ID COLON .)
    ID              reduce using rule 79 (goto_mark -> ID COLON .)
    MINUS           reduce using rule 79 (goto_mark -> ID COLON .)
    LNOT            reduce using rule 79 (goto_mark -> ID COLON .)
    NULL            reduce using rule 79 (goto_mark -> ID COLON .)
    LPAREN          reduce using rule 79 (goto_mark -> ID COLON .)
    RETURN          reduce using rule 79 (goto_mark -> ID COLON .)
    FUNCTION        reduce using rule 79 (goto_mark -> ID COLON .)
    STRUCTURE       reduce using rule 79 (goto_mark -> ID COLON .)
    WHILE           reduce using rule 79 (goto_mark -> ID COLON .)
    DO              reduce using rule 79 (goto_mark -> ID COLON .)
    IF              reduce using rule 79 (goto_mark -> ID COLON .)
    INTEGER         reduce using rule 79 (goto_mark -> ID COLON .)
    DOUBLE          reduce using rule 79 (goto_mark -> ID COLON .)
    BOOL            reduce using rule 79 (goto_mark -> ID COLON .)
    STRING          reduce using rule 79 (goto_mark -> ID COLON .)
    VOID            reduce using rule 79 (goto_mark -> ID COLON .)
    DATATYPE        reduce using rule 79 (goto_mark -> ID COLON .)
    $end            reduce using rule 79 (goto_mark -> ID COLON .)
    RBRACE          reduce using rule 79 (goto_mark -> ID COLON .)


state 70

    (70) expr -> LPAREN expr . RPAREN
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RPAREN          shift and go to state 109
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 71

    (28) expr -> ID . DOT ID
    (33) expr -> ID . LPAREN args RPAREN
    (78) expr -> ID . LBRACKET expr RBRACKET
    (81) id -> ID .

    DOT             shift and go to state 64
    LPAREN          shift and go to state 65
    LBRACKET        shift and go to state 66
    RPAREN          reduce using rule 81 (id -> ID .)
    PLUS            reduce using rule 81 (id -> ID .)
    MINUS           reduce using rule 81 (id -> ID .)
    MUL             reduce using rule 81 (id -> ID .)
    DIVIDE          reduce using rule 81 (id -> ID .)
    INTDIVIDE       reduce using rule 81 (id -> ID .)
    MODULO          reduce using rule 81 (id -> ID .)
    POW             reduce using rule 81 (id -> ID .)
    LE              reduce using rule 81 (id -> ID .)
    GE              reduce using rule 81 (id -> ID .)
    LT              reduce using rule 81 (id -> ID .)
    GT              reduce using rule 81 (id -> ID .)
    EQ              reduce using rule 81 (id -> ID .)
    NE              reduce using rule 81 (id -> ID .)
    LAND            reduce using rule 81 (id -> ID .)
    LOR             reduce using rule 81 (id -> ID .)
    BAND            reduce using rule 81 (id -> ID .)
    BOR             reduce using rule 81 (id -> ID .)
    SEMI            reduce using rule 81 (id -> ID .)
    COMMA           reduce using rule 81 (id -> ID .)
    RBRACKET        reduce using rule 81 (id -> ID .)
    RBRACE          reduce using rule 81 (id -> ID .)


state 72

    (76) expr -> datatype . LBRACKET RBRACKET id
    (77) expr -> datatype . LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 75


state 73

    (57) expr -> MINUS expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 57 (expr -> MINUS expr .)
    PLUS            reduce using rule 57 (expr -> MINUS expr .)
    MINUS           reduce using rule 57 (expr -> MINUS expr .)
    MUL             reduce using rule 57 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 57 (expr -> MINUS expr .)
    INTDIVIDE       reduce using rule 57 (expr -> MINUS expr .)
    MODULO          reduce using rule 57 (expr -> MINUS expr .)
    POW             reduce using rule 57 (expr -> MINUS expr .)
    LE              reduce using rule 57 (expr -> MINUS expr .)
    GE              reduce using rule 57 (expr -> MINUS expr .)
    LT              reduce using rule 57 (expr -> MINUS expr .)
    GT              reduce using rule 57 (expr -> MINUS expr .)
    EQ              reduce using rule 57 (expr -> MINUS expr .)
    NE              reduce using rule 57 (expr -> MINUS expr .)
    LAND            reduce using rule 57 (expr -> MINUS expr .)
    LOR             reduce using rule 57 (expr -> MINUS expr .)
    BAND            reduce using rule 57 (expr -> MINUS expr .)
    BOR             reduce using rule 57 (expr -> MINUS expr .)
    RPAREN          reduce using rule 57 (expr -> MINUS expr .)
    COMMA           reduce using rule 57 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 57 (expr -> MINUS expr .)
    RBRACE          reduce using rule 57 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! POW             [ shift and go to state 49 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 74

    (60) expr -> LNOT expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 60 (expr -> LNOT expr .)
    PLUS            reduce using rule 60 (expr -> LNOT expr .)
    MINUS           reduce using rule 60 (expr -> LNOT expr .)
    MUL             reduce using rule 60 (expr -> LNOT expr .)
    DIVIDE          reduce using rule 60 (expr -> LNOT expr .)
    INTDIVIDE       reduce using rule 60 (expr -> LNOT expr .)
    MODULO          reduce using rule 60 (expr -> LNOT expr .)
    POW             reduce using rule 60 (expr -> LNOT expr .)
    LE              reduce using rule 60 (expr -> LNOT expr .)
    GE              reduce using rule 60 (expr -> LNOT expr .)
    LT              reduce using rule 60 (expr -> LNOT expr .)
    GT              reduce using rule 60 (expr -> LNOT expr .)
    EQ              reduce using rule 60 (expr -> LNOT expr .)
    NE              reduce using rule 60 (expr -> LNOT expr .)
    LAND            reduce using rule 60 (expr -> LNOT expr .)
    LOR             reduce using rule 60 (expr -> LNOT expr .)
    BAND            reduce using rule 60 (expr -> LNOT expr .)
    BOR             reduce using rule 60 (expr -> LNOT expr .)
    RPAREN          reduce using rule 60 (expr -> LNOT expr .)
    COMMA           reduce using rule 60 (expr -> LNOT expr .)
    RBRACKET        reduce using rule 60 (expr -> LNOT expr .)
    RBRACE          reduce using rule 60 (expr -> LNOT expr .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! POW             [ shift and go to state 49 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 75

    (76) expr -> datatype LBRACKET . RBRACKET id
    (77) expr -> datatype LBRACKET . RBRACKET id EQUALS datatype LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 110


state 76

    (37) var_declaration -> datatype id . EQUALS expr SEMI
    (38) var_declaration -> datatype id . SEMI

    EQUALS          shift and go to state 111
    SEMI            shift and go to state 112


state 77

    (42) return -> RETURN expr . SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            shift and go to state 113
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 78

    (43) return -> RETURN SEMI .

    BREAK           reduce using rule 43 (return -> RETURN SEMI .)
    CONTINUE        reduce using rule 43 (return -> RETURN SEMI .)
    GOTO            reduce using rule 43 (return -> RETURN SEMI .)
    ID              reduce using rule 43 (return -> RETURN SEMI .)
    MINUS           reduce using rule 43 (return -> RETURN SEMI .)
    LNOT            reduce using rule 43 (return -> RETURN SEMI .)
    NULL            reduce using rule 43 (return -> RETURN SEMI .)
    LPAREN          reduce using rule 43 (return -> RETURN SEMI .)
    RETURN          reduce using rule 43 (return -> RETURN SEMI .)
    FUNCTION        reduce using rule 43 (return -> RETURN SEMI .)
    STRUCTURE       reduce using rule 43 (return -> RETURN SEMI .)
    WHILE           reduce using rule 43 (return -> RETURN SEMI .)
    DO              reduce using rule 43 (return -> RETURN SEMI .)
    IF              reduce using rule 43 (return -> RETURN SEMI .)
    INTEGER         reduce using rule 43 (return -> RETURN SEMI .)
    DOUBLE          reduce using rule 43 (return -> RETURN SEMI .)
    BOOL            reduce using rule 43 (return -> RETURN SEMI .)
    STRING          reduce using rule 43 (return -> RETURN SEMI .)
    VOID            reduce using rule 43 (return -> RETURN SEMI .)
    DATATYPE        reduce using rule 43 (return -> RETURN SEMI .)
    $end            reduce using rule 43 (return -> RETURN SEMI .)
    RBRACE          reduce using rule 43 (return -> RETURN SEMI .)


state 79

    (4) func_declaration -> FUNCTION datatype . id LPAREN params RPAREN LBRACE basic_block RBRACE
    (81) id -> . ID

    ID              shift and go to state 63

    id                             shift and go to state 114

state 80

    (23) struct_declaration -> STRUCTURE id . LBRACE struct_params RBRACE

    LBRACE          shift and go to state 115


state 81

    (19) while -> WHILE LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 116
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 82

    (20) while -> DO LBRACE . stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    stmt_list                      shift and go to state 117
    expr                           shift and go to state 5
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 83

    (21) if-else -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 118
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 84

    (44) expr -> expr PLUS expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 44 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 44 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 44 (expr -> expr PLUS expr .)
    LE              reduce using rule 44 (expr -> expr PLUS expr .)
    GE              reduce using rule 44 (expr -> expr PLUS expr .)
    LT              reduce using rule 44 (expr -> expr PLUS expr .)
    GT              reduce using rule 44 (expr -> expr PLUS expr .)
    EQ              reduce using rule 44 (expr -> expr PLUS expr .)
    NE              reduce using rule 44 (expr -> expr PLUS expr .)
    LAND            reduce using rule 44 (expr -> expr PLUS expr .)
    LOR             reduce using rule 44 (expr -> expr PLUS expr .)
    BAND            reduce using rule 44 (expr -> expr PLUS expr .)
    BOR             reduce using rule 44 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 44 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 44 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 44 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 44 (expr -> expr PLUS expr .)
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49

  ! MUL             [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 85

    (45) expr -> expr MINUS expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 45 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 45 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 45 (expr -> expr MINUS expr .)
    LE              reduce using rule 45 (expr -> expr MINUS expr .)
    GE              reduce using rule 45 (expr -> expr MINUS expr .)
    LT              reduce using rule 45 (expr -> expr MINUS expr .)
    GT              reduce using rule 45 (expr -> expr MINUS expr .)
    EQ              reduce using rule 45 (expr -> expr MINUS expr .)
    NE              reduce using rule 45 (expr -> expr MINUS expr .)
    LAND            reduce using rule 45 (expr -> expr MINUS expr .)
    LOR             reduce using rule 45 (expr -> expr MINUS expr .)
    BAND            reduce using rule 45 (expr -> expr MINUS expr .)
    BOR             reduce using rule 45 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 45 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 45 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 45 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 45 (expr -> expr MINUS expr .)
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49

  ! MUL             [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! INTDIVIDE       [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 86

    (46) expr -> expr MUL expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 46 (expr -> expr MUL expr .)
    PLUS            reduce using rule 46 (expr -> expr MUL expr .)
    MINUS           reduce using rule 46 (expr -> expr MUL expr .)
    MUL             reduce using rule 46 (expr -> expr MUL expr .)
    DIVIDE          reduce using rule 46 (expr -> expr MUL expr .)
    INTDIVIDE       reduce using rule 46 (expr -> expr MUL expr .)
    MODULO          reduce using rule 46 (expr -> expr MUL expr .)
    LE              reduce using rule 46 (expr -> expr MUL expr .)
    GE              reduce using rule 46 (expr -> expr MUL expr .)
    LT              reduce using rule 46 (expr -> expr MUL expr .)
    GT              reduce using rule 46 (expr -> expr MUL expr .)
    EQ              reduce using rule 46 (expr -> expr MUL expr .)
    NE              reduce using rule 46 (expr -> expr MUL expr .)
    LAND            reduce using rule 46 (expr -> expr MUL expr .)
    LOR             reduce using rule 46 (expr -> expr MUL expr .)
    BAND            reduce using rule 46 (expr -> expr MUL expr .)
    BOR             reduce using rule 46 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 46 (expr -> expr MUL expr .)
    COMMA           reduce using rule 46 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 46 (expr -> expr MUL expr .)
    RBRACE          reduce using rule 46 (expr -> expr MUL expr .)
    POW             shift and go to state 49

  ! POW             [ reduce using rule 46 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 87

    (47) expr -> expr DIVIDE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 47 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 47 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 47 (expr -> expr DIVIDE expr .)
    MUL             reduce using rule 47 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 47 (expr -> expr DIVIDE expr .)
    INTDIVIDE       reduce using rule 47 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 47 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 47 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 47 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 47 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 47 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 47 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 47 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 47 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 47 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 47 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 47 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 47 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 47 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 47 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 47 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 49

  ! POW             [ reduce using rule 47 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 88

    (48) expr -> expr INTDIVIDE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    PLUS            reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    MINUS           reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    MUL             reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    DIVIDE          reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    INTDIVIDE       reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    MODULO          reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    LE              reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    GE              reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    LT              reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    GT              reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    EQ              reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    NE              reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    LAND            reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    LOR             reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    BAND            reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    BOR             reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    RPAREN          reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    COMMA           reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    RBRACKET        reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    RBRACE          reduce using rule 48 (expr -> expr INTDIVIDE expr .)
    POW             shift and go to state 49

  ! POW             [ reduce using rule 48 (expr -> expr INTDIVIDE expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 89

    (49) expr -> expr MODULO expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 49 (expr -> expr MODULO expr .)
    PLUS            reduce using rule 49 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 49 (expr -> expr MODULO expr .)
    MUL             reduce using rule 49 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 49 (expr -> expr MODULO expr .)
    INTDIVIDE       reduce using rule 49 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 49 (expr -> expr MODULO expr .)
    LE              reduce using rule 49 (expr -> expr MODULO expr .)
    GE              reduce using rule 49 (expr -> expr MODULO expr .)
    LT              reduce using rule 49 (expr -> expr MODULO expr .)
    GT              reduce using rule 49 (expr -> expr MODULO expr .)
    EQ              reduce using rule 49 (expr -> expr MODULO expr .)
    NE              reduce using rule 49 (expr -> expr MODULO expr .)
    LAND            reduce using rule 49 (expr -> expr MODULO expr .)
    LOR             reduce using rule 49 (expr -> expr MODULO expr .)
    BAND            reduce using rule 49 (expr -> expr MODULO expr .)
    BOR             reduce using rule 49 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 49 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 49 (expr -> expr MODULO expr .)
    RBRACKET        reduce using rule 49 (expr -> expr MODULO expr .)
    RBRACE          reduce using rule 49 (expr -> expr MODULO expr .)
    POW             shift and go to state 49

  ! POW             [ reduce using rule 49 (expr -> expr MODULO expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 90

    (50) expr -> expr POW expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 50 (expr -> expr POW expr .)
    PLUS            reduce using rule 50 (expr -> expr POW expr .)
    MINUS           reduce using rule 50 (expr -> expr POW expr .)
    MUL             reduce using rule 50 (expr -> expr POW expr .)
    DIVIDE          reduce using rule 50 (expr -> expr POW expr .)
    INTDIVIDE       reduce using rule 50 (expr -> expr POW expr .)
    MODULO          reduce using rule 50 (expr -> expr POW expr .)
    LE              reduce using rule 50 (expr -> expr POW expr .)
    GE              reduce using rule 50 (expr -> expr POW expr .)
    LT              reduce using rule 50 (expr -> expr POW expr .)
    GT              reduce using rule 50 (expr -> expr POW expr .)
    EQ              reduce using rule 50 (expr -> expr POW expr .)
    NE              reduce using rule 50 (expr -> expr POW expr .)
    LAND            reduce using rule 50 (expr -> expr POW expr .)
    LOR             reduce using rule 50 (expr -> expr POW expr .)
    BAND            reduce using rule 50 (expr -> expr POW expr .)
    BOR             reduce using rule 50 (expr -> expr POW expr .)
    RPAREN          reduce using rule 50 (expr -> expr POW expr .)
    COMMA           reduce using rule 50 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 50 (expr -> expr POW expr .)
    RBRACE          reduce using rule 50 (expr -> expr POW expr .)
    POW             shift and go to state 49

  ! POW             [ reduce using rule 50 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MUL             [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! INTDIVIDE       [ shift and go to state 47 ]
  ! MODULO          [ shift and go to state 48 ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 91

    (51) expr -> expr LE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 51 (expr -> expr LE expr .)
    LE              reduce using rule 51 (expr -> expr LE expr .)
    GE              reduce using rule 51 (expr -> expr LE expr .)
    LT              reduce using rule 51 (expr -> expr LE expr .)
    GT              reduce using rule 51 (expr -> expr LE expr .)
    EQ              reduce using rule 51 (expr -> expr LE expr .)
    NE              reduce using rule 51 (expr -> expr LE expr .)
    LAND            reduce using rule 51 (expr -> expr LE expr .)
    LOR             reduce using rule 51 (expr -> expr LE expr .)
    BAND            reduce using rule 51 (expr -> expr LE expr .)
    BOR             reduce using rule 51 (expr -> expr LE expr .)
    RPAREN          reduce using rule 51 (expr -> expr LE expr .)
    COMMA           reduce using rule 51 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 51 (expr -> expr LE expr .)
    RBRACE          reduce using rule 51 (expr -> expr LE expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49

  ! PLUS            [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! INTDIVIDE       [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 51 (expr -> expr LE expr .) ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 92

    (52) expr -> expr GE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 52 (expr -> expr GE expr .)
    LE              reduce using rule 52 (expr -> expr GE expr .)
    GE              reduce using rule 52 (expr -> expr GE expr .)
    LT              reduce using rule 52 (expr -> expr GE expr .)
    GT              reduce using rule 52 (expr -> expr GE expr .)
    EQ              reduce using rule 52 (expr -> expr GE expr .)
    NE              reduce using rule 52 (expr -> expr GE expr .)
    LAND            reduce using rule 52 (expr -> expr GE expr .)
    LOR             reduce using rule 52 (expr -> expr GE expr .)
    BAND            reduce using rule 52 (expr -> expr GE expr .)
    BOR             reduce using rule 52 (expr -> expr GE expr .)
    RPAREN          reduce using rule 52 (expr -> expr GE expr .)
    COMMA           reduce using rule 52 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 52 (expr -> expr GE expr .)
    RBRACE          reduce using rule 52 (expr -> expr GE expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49

  ! PLUS            [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! INTDIVIDE       [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 52 (expr -> expr GE expr .) ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 93

    (53) expr -> expr LT expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 53 (expr -> expr LT expr .)
    LE              reduce using rule 53 (expr -> expr LT expr .)
    GE              reduce using rule 53 (expr -> expr LT expr .)
    LT              reduce using rule 53 (expr -> expr LT expr .)
    GT              reduce using rule 53 (expr -> expr LT expr .)
    EQ              reduce using rule 53 (expr -> expr LT expr .)
    NE              reduce using rule 53 (expr -> expr LT expr .)
    LAND            reduce using rule 53 (expr -> expr LT expr .)
    LOR             reduce using rule 53 (expr -> expr LT expr .)
    BAND            reduce using rule 53 (expr -> expr LT expr .)
    BOR             reduce using rule 53 (expr -> expr LT expr .)
    RPAREN          reduce using rule 53 (expr -> expr LT expr .)
    COMMA           reduce using rule 53 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 53 (expr -> expr LT expr .)
    RBRACE          reduce using rule 53 (expr -> expr LT expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49

  ! PLUS            [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! INTDIVIDE       [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 53 (expr -> expr LT expr .) ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 94

    (54) expr -> expr GT expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 54 (expr -> expr GT expr .)
    LE              reduce using rule 54 (expr -> expr GT expr .)
    GE              reduce using rule 54 (expr -> expr GT expr .)
    LT              reduce using rule 54 (expr -> expr GT expr .)
    GT              reduce using rule 54 (expr -> expr GT expr .)
    EQ              reduce using rule 54 (expr -> expr GT expr .)
    NE              reduce using rule 54 (expr -> expr GT expr .)
    LAND            reduce using rule 54 (expr -> expr GT expr .)
    LOR             reduce using rule 54 (expr -> expr GT expr .)
    BAND            reduce using rule 54 (expr -> expr GT expr .)
    BOR             reduce using rule 54 (expr -> expr GT expr .)
    RPAREN          reduce using rule 54 (expr -> expr GT expr .)
    COMMA           reduce using rule 54 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 54 (expr -> expr GT expr .)
    RBRACE          reduce using rule 54 (expr -> expr GT expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49

  ! PLUS            [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! INTDIVIDE       [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! LE              [ shift and go to state 50 ]
  ! GE              [ shift and go to state 51 ]
  ! LT              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 95

    (55) expr -> expr EQ expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 55 (expr -> expr EQ expr .)
    EQ              reduce using rule 55 (expr -> expr EQ expr .)
    NE              reduce using rule 55 (expr -> expr EQ expr .)
    LAND            reduce using rule 55 (expr -> expr EQ expr .)
    LOR             reduce using rule 55 (expr -> expr EQ expr .)
    BAND            reduce using rule 55 (expr -> expr EQ expr .)
    BOR             reduce using rule 55 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 55 (expr -> expr EQ expr .)
    COMMA           reduce using rule 55 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 55 (expr -> expr EQ expr .)
    RBRACE          reduce using rule 55 (expr -> expr EQ expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53

  ! PLUS            [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! INTDIVIDE       [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 96

    (56) expr -> expr NE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 56 (expr -> expr NE expr .)
    EQ              reduce using rule 56 (expr -> expr NE expr .)
    NE              reduce using rule 56 (expr -> expr NE expr .)
    LAND            reduce using rule 56 (expr -> expr NE expr .)
    LOR             reduce using rule 56 (expr -> expr NE expr .)
    BAND            reduce using rule 56 (expr -> expr NE expr .)
    BOR             reduce using rule 56 (expr -> expr NE expr .)
    RPAREN          reduce using rule 56 (expr -> expr NE expr .)
    COMMA           reduce using rule 56 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 56 (expr -> expr NE expr .)
    RBRACE          reduce using rule 56 (expr -> expr NE expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53

  ! PLUS            [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! INTDIVIDE       [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 56 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 97

    (58) expr -> expr LAND expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 58 (expr -> expr LAND expr .)
    LAND            reduce using rule 58 (expr -> expr LAND expr .)
    LOR             reduce using rule 58 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 58 (expr -> expr LAND expr .)
    COMMA           reduce using rule 58 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 58 (expr -> expr LAND expr .)
    RBRACE          reduce using rule 58 (expr -> expr LAND expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    BAND            shift and go to state 58
    BOR             shift and go to state 59

  ! PLUS            [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! MUL             [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! MODULO          [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! POW             [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! LE              [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! GE              [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! EQ              [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! NE              [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! BAND            [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! BOR             [ reduce using rule 58 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]


state 98

    (59) expr -> expr LOR expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 59 (expr -> expr LOR expr .)
    LOR             reduce using rule 59 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 59 (expr -> expr LOR expr .)
    COMMA           reduce using rule 59 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 59 (expr -> expr LOR expr .)
    RBRACE          reduce using rule 59 (expr -> expr LOR expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    BAND            shift and go to state 58
    BOR             shift and go to state 59

  ! PLUS            [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! MUL             [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! MODULO          [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! POW             [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! LE              [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! GE              [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! LT              [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! GT              [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! EQ              [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! NE              [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! LAND            [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! BAND            [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! BOR             [ reduce using rule 59 (expr -> expr LOR expr .) ]
  ! LOR             [ shift and go to state 57 ]


state 99

    (61) expr -> expr BAND expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 61 (expr -> expr BAND expr .)
    LAND            reduce using rule 61 (expr -> expr BAND expr .)
    LOR             reduce using rule 61 (expr -> expr BAND expr .)
    BAND            reduce using rule 61 (expr -> expr BAND expr .)
    BOR             reduce using rule 61 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 61 (expr -> expr BAND expr .)
    COMMA           reduce using rule 61 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 61 (expr -> expr BAND expr .)
    RBRACE          reduce using rule 61 (expr -> expr BAND expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55

  ! PLUS            [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! MUL             [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! INTDIVIDE       [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! MODULO          [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! POW             [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! LE              [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! GE              [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! LT              [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! GT              [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! EQ              [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! NE              [ reduce using rule 61 (expr -> expr BAND expr .) ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BAND            [ shift and go to state 58 ]
  ! BOR             [ shift and go to state 59 ]


state 100

    (62) expr -> expr BOR expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            reduce using rule 62 (expr -> expr BOR expr .)
    LAND            reduce using rule 62 (expr -> expr BOR expr .)
    LOR             reduce using rule 62 (expr -> expr BOR expr .)
    BOR             reduce using rule 62 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 62 (expr -> expr BOR expr .)
    COMMA           reduce using rule 62 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 62 (expr -> expr BOR expr .)
    RBRACE          reduce using rule 62 (expr -> expr BOR expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    BAND            shift and go to state 58

  ! PLUS            [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! MUL             [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! INTDIVIDE       [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! MODULO          [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! POW             [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! LE              [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! GE              [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! LT              [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! GT              [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! EQ              [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! NE              [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! BAND            [ reduce using rule 62 (expr -> expr BOR expr .) ]
  ! LAND            [ shift and go to state 56 ]
  ! LOR             [ shift and go to state 57 ]
  ! BOR             [ shift and go to state 59 ]


state 101

    (16) statement -> GOTO ID SEMI .

    BREAK           reduce using rule 16 (statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 16 (statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 16 (statement -> GOTO ID SEMI .)
    ID              reduce using rule 16 (statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 16 (statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 16 (statement -> GOTO ID SEMI .)
    NULL            reduce using rule 16 (statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 16 (statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 16 (statement -> GOTO ID SEMI .)
    FUNCTION        reduce using rule 16 (statement -> GOTO ID SEMI .)
    STRUCTURE       reduce using rule 16 (statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 16 (statement -> GOTO ID SEMI .)
    DO              reduce using rule 16 (statement -> GOTO ID SEMI .)
    IF              reduce using rule 16 (statement -> GOTO ID SEMI .)
    INTEGER         reduce using rule 16 (statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 16 (statement -> GOTO ID SEMI .)
    BOOL            reduce using rule 16 (statement -> GOTO ID SEMI .)
    STRING          reduce using rule 16 (statement -> GOTO ID SEMI .)
    VOID            reduce using rule 16 (statement -> GOTO ID SEMI .)
    DATATYPE        reduce using rule 16 (statement -> GOTO ID SEMI .)
    $end            reduce using rule 16 (statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 16 (statement -> GOTO ID SEMI .)


state 102

    (28) expr -> ID DOT ID .

    SEMI            reduce using rule 28 (expr -> ID DOT ID .)
    PLUS            reduce using rule 28 (expr -> ID DOT ID .)
    MINUS           reduce using rule 28 (expr -> ID DOT ID .)
    MUL             reduce using rule 28 (expr -> ID DOT ID .)
    DIVIDE          reduce using rule 28 (expr -> ID DOT ID .)
    INTDIVIDE       reduce using rule 28 (expr -> ID DOT ID .)
    MODULO          reduce using rule 28 (expr -> ID DOT ID .)
    POW             reduce using rule 28 (expr -> ID DOT ID .)
    LE              reduce using rule 28 (expr -> ID DOT ID .)
    GE              reduce using rule 28 (expr -> ID DOT ID .)
    LT              reduce using rule 28 (expr -> ID DOT ID .)
    GT              reduce using rule 28 (expr -> ID DOT ID .)
    EQ              reduce using rule 28 (expr -> ID DOT ID .)
    NE              reduce using rule 28 (expr -> ID DOT ID .)
    LAND            reduce using rule 28 (expr -> ID DOT ID .)
    LOR             reduce using rule 28 (expr -> ID DOT ID .)
    BAND            reduce using rule 28 (expr -> ID DOT ID .)
    BOR             reduce using rule 28 (expr -> ID DOT ID .)
    RPAREN          reduce using rule 28 (expr -> ID DOT ID .)
    COMMA           reduce using rule 28 (expr -> ID DOT ID .)
    RBRACKET        reduce using rule 28 (expr -> ID DOT ID .)
    RBRACE          reduce using rule 28 (expr -> ID DOT ID .)


state 103

    (33) expr -> ID LPAREN args . RPAREN
    (36) args -> args . COMMA expr

    RPAREN          shift and go to state 119
    COMMA           shift and go to state 120


state 104

    (35) args -> expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RPAREN          reduce using rule 35 (args -> expr .)
    COMMA           reduce using rule 35 (args -> expr .)
    RBRACE          reduce using rule 35 (args -> expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 105

    (78) expr -> ID LBRACKET expr . RBRACKET
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RBRACKET        shift and go to state 121
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 106

    (39) var_declaration -> ID id EQUALS . LBRACE args RBRACE SEMI

    LBRACE          shift and go to state 122


state 107

    (40) assign -> ID EQUALS expr . SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            shift and go to state 123
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 108

    (41) assign -> ID EQUALS LBRACE . args RBRACE SEMI
    (34) args -> .
    (35) args -> . expr
    (36) args -> . args COMMA expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RBRACE          reduce using rule 34 (args -> .)
    COMMA           reduce using rule 34 (args -> .)
    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    args                           shift and go to state 124
    expr                           shift and go to state 104
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 109

    (70) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    INTDIVIDE       reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    LAND            reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    LOR             reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    BAND            reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    BOR             reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 70 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 70 (expr -> LPAREN expr RPAREN .)


state 110

    (76) expr -> datatype LBRACKET RBRACKET . id
    (77) expr -> datatype LBRACKET RBRACKET . id EQUALS datatype LBRACKET expr RBRACKET
    (81) id -> . ID

    ID              shift and go to state 63

    id                             shift and go to state 125

state 111

    (37) var_declaration -> datatype id EQUALS . expr SEMI
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    datatype                       shift and go to state 72
    id                             shift and go to state 21
    expr                           shift and go to state 126
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26

state 112

    (38) var_declaration -> datatype id SEMI .

    BREAK           reduce using rule 38 (var_declaration -> datatype id SEMI .)
    CONTINUE        reduce using rule 38 (var_declaration -> datatype id SEMI .)
    GOTO            reduce using rule 38 (var_declaration -> datatype id SEMI .)
    ID              reduce using rule 38 (var_declaration -> datatype id SEMI .)
    MINUS           reduce using rule 38 (var_declaration -> datatype id SEMI .)
    LNOT            reduce using rule 38 (var_declaration -> datatype id SEMI .)
    NULL            reduce using rule 38 (var_declaration -> datatype id SEMI .)
    LPAREN          reduce using rule 38 (var_declaration -> datatype id SEMI .)
    RETURN          reduce using rule 38 (var_declaration -> datatype id SEMI .)
    FUNCTION        reduce using rule 38 (var_declaration -> datatype id SEMI .)
    STRUCTURE       reduce using rule 38 (var_declaration -> datatype id SEMI .)
    WHILE           reduce using rule 38 (var_declaration -> datatype id SEMI .)
    DO              reduce using rule 38 (var_declaration -> datatype id SEMI .)
    IF              reduce using rule 38 (var_declaration -> datatype id SEMI .)
    INTEGER         reduce using rule 38 (var_declaration -> datatype id SEMI .)
    DOUBLE          reduce using rule 38 (var_declaration -> datatype id SEMI .)
    BOOL            reduce using rule 38 (var_declaration -> datatype id SEMI .)
    STRING          reduce using rule 38 (var_declaration -> datatype id SEMI .)
    VOID            reduce using rule 38 (var_declaration -> datatype id SEMI .)
    DATATYPE        reduce using rule 38 (var_declaration -> datatype id SEMI .)
    $end            reduce using rule 38 (var_declaration -> datatype id SEMI .)
    RBRACE          reduce using rule 38 (var_declaration -> datatype id SEMI .)


state 113

    (42) return -> RETURN expr SEMI .

    BREAK           reduce using rule 42 (return -> RETURN expr SEMI .)
    CONTINUE        reduce using rule 42 (return -> RETURN expr SEMI .)
    GOTO            reduce using rule 42 (return -> RETURN expr SEMI .)
    ID              reduce using rule 42 (return -> RETURN expr SEMI .)
    MINUS           reduce using rule 42 (return -> RETURN expr SEMI .)
    LNOT            reduce using rule 42 (return -> RETURN expr SEMI .)
    NULL            reduce using rule 42 (return -> RETURN expr SEMI .)
    LPAREN          reduce using rule 42 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 42 (return -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 42 (return -> RETURN expr SEMI .)
    STRUCTURE       reduce using rule 42 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 42 (return -> RETURN expr SEMI .)
    DO              reduce using rule 42 (return -> RETURN expr SEMI .)
    IF              reduce using rule 42 (return -> RETURN expr SEMI .)
    INTEGER         reduce using rule 42 (return -> RETURN expr SEMI .)
    DOUBLE          reduce using rule 42 (return -> RETURN expr SEMI .)
    BOOL            reduce using rule 42 (return -> RETURN expr SEMI .)
    STRING          reduce using rule 42 (return -> RETURN expr SEMI .)
    VOID            reduce using rule 42 (return -> RETURN expr SEMI .)
    DATATYPE        reduce using rule 42 (return -> RETURN expr SEMI .)
    $end            reduce using rule 42 (return -> RETURN expr SEMI .)
    RBRACE          reduce using rule 42 (return -> RETURN expr SEMI .)


state 114

    (4) func_declaration -> FUNCTION datatype id . LPAREN params RPAREN LBRACE basic_block RBRACE

    LPAREN          shift and go to state 127


state 115

    (23) struct_declaration -> STRUCTURE id LBRACE . struct_params RBRACE
    (24) struct_params -> . struct_param
    (25) struct_params -> . struct_params COMMA struct_param
    (26) struct_param -> . DATATYPE ID
    (27) struct_param -> . func_declaration
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE

    DATATYPE        shift and go to state 130
    FUNCTION        shift and go to state 30

    struct_params                  shift and go to state 128
    struct_param                   shift and go to state 129
    func_declaration               shift and go to state 131

state 116

    (19) while -> WHILE LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RPAREN          shift and go to state 132
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 117

    (20) while -> DO LBRACE stmt_list . RBRACE WHILE LPAREN expr RPAREN SEMI
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RBRACE          shift and go to state 133
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    statement                      shift and go to state 41
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 118

    (21) if-else -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RPAREN          shift and go to state 134
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 119

    (33) expr -> ID LPAREN args RPAREN .

    SEMI            reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    MUL             reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    INTDIVIDE       reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    MODULO          reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    POW             reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    LE              reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    GE              reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    LT              reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    GT              reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    NE              reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    LAND            reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    LOR             reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    BAND            reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    BOR             reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 33 (expr -> ID LPAREN args RPAREN .)
    RBRACE          reduce using rule 33 (expr -> ID LPAREN args RPAREN .)


state 120

    (36) args -> args COMMA . expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 135
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 121

    (78) expr -> ID LBRACKET expr RBRACKET .

    SEMI            reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    MUL             reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    INTDIVIDE       reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    POW             reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    LE              reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    GE              reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    LT              reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    GT              reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    EQ              reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    NE              reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    LAND            reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    LOR             reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    BAND            reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    BOR             reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 78 (expr -> ID LBRACKET expr RBRACKET .)


state 122

    (39) var_declaration -> ID id EQUALS LBRACE . args RBRACE SEMI
    (34) args -> .
    (35) args -> . expr
    (36) args -> . args COMMA expr
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RBRACE          reduce using rule 34 (args -> .)
    COMMA           reduce using rule 34 (args -> .)
    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    id                             shift and go to state 21
    args                           shift and go to state 136
    expr                           shift and go to state 104
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 123

    (40) assign -> ID EQUALS expr SEMI .

    BREAK           reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    CONTINUE        reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    GOTO            reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    ID              reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    MINUS           reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    LNOT            reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    NULL            reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    LPAREN          reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    RETURN          reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    FUNCTION        reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    WHILE           reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    DO              reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    IF              reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    INTEGER         reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    DOUBLE          reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    BOOL            reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    STRING          reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    VOID            reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    DATATYPE        reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    $end            reduce using rule 40 (assign -> ID EQUALS expr SEMI .)
    RBRACE          reduce using rule 40 (assign -> ID EQUALS expr SEMI .)


state 124

    (41) assign -> ID EQUALS LBRACE args . RBRACE SEMI
    (36) args -> args . COMMA expr

    RBRACE          shift and go to state 137
    COMMA           shift and go to state 120


state 125

    (76) expr -> datatype LBRACKET RBRACKET id .
    (77) expr -> datatype LBRACKET RBRACKET id . EQUALS datatype LBRACKET expr RBRACKET

    SEMI            reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    PLUS            reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    MINUS           reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    MUL             reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    DIVIDE          reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    INTDIVIDE       reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    MODULO          reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    POW             reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    LE              reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    GE              reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    LT              reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    GT              reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    EQ              reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    NE              reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    LAND            reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    LOR             reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    BAND            reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    BOR             reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    RPAREN          reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    COMMA           reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    RBRACKET        reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    RBRACE          reduce using rule 76 (expr -> datatype LBRACKET RBRACKET id .)
    EQUALS          shift and go to state 138


state 126

    (37) var_declaration -> datatype id EQUALS expr . SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    SEMI            shift and go to state 139
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 127

    (4) func_declaration -> FUNCTION datatype id LPAREN . params RPAREN LBRACE basic_block RBRACE
    (29) params -> .
    (30) params -> . param
    (31) params -> . params COMMA param
    (32) param -> . DATATYPE ID

    RPAREN          reduce using rule 29 (params -> .)
    COMMA           reduce using rule 29 (params -> .)
    DATATYPE        shift and go to state 142

    params                         shift and go to state 140
    param                          shift and go to state 141

state 128

    (23) struct_declaration -> STRUCTURE id LBRACE struct_params . RBRACE
    (25) struct_params -> struct_params . COMMA struct_param

    RBRACE          shift and go to state 143
    COMMA           shift and go to state 144


state 129

    (24) struct_params -> struct_param .

    RBRACE          reduce using rule 24 (struct_params -> struct_param .)
    COMMA           reduce using rule 24 (struct_params -> struct_param .)


state 130

    (26) struct_param -> DATATYPE . ID

    ID              shift and go to state 145


state 131

    (27) struct_param -> func_declaration .

    RBRACE          reduce using rule 27 (struct_param -> func_declaration .)
    COMMA           reduce using rule 27 (struct_param -> func_declaration .)


state 132

    (19) while -> WHILE LPAREN expr RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 146


state 133

    (20) while -> DO LBRACE stmt_list RBRACE . WHILE LPAREN expr RPAREN SEMI

    WHILE           shift and go to state 147


state 134

    (21) if-else -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE
    (22) if-else -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 148


state 135

    (36) args -> args COMMA expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RPAREN          reduce using rule 36 (args -> args COMMA expr .)
    COMMA           reduce using rule 36 (args -> args COMMA expr .)
    RBRACE          reduce using rule 36 (args -> args COMMA expr .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 136

    (39) var_declaration -> ID id EQUALS LBRACE args . RBRACE SEMI
    (36) args -> args . COMMA expr

    RBRACE          shift and go to state 149
    COMMA           shift and go to state 120


state 137

    (41) assign -> ID EQUALS LBRACE args RBRACE . SEMI

    SEMI            shift and go to state 150


state 138

    (77) expr -> datatype LBRACKET RBRACKET id EQUALS . datatype LBRACKET expr RBRACKET
    (80) datatype -> . DATATYPE

    DATATYPE        shift and go to state 40

    datatype                       shift and go to state 151

state 139

    (37) var_declaration -> datatype id EQUALS expr SEMI .

    BREAK           reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    CONTINUE        reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    GOTO            reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    ID              reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    MINUS           reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    LNOT            reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    NULL            reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    LPAREN          reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    RETURN          reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    FUNCTION        reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRUCTURE       reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    WHILE           reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    DO              reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    IF              reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    INTEGER         reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    DOUBLE          reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    BOOL            reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    STRING          reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    VOID            reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    DATATYPE        reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    $end            reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)
    RBRACE          reduce using rule 37 (var_declaration -> datatype id EQUALS expr SEMI .)


state 140

    (4) func_declaration -> FUNCTION datatype id LPAREN params . RPAREN LBRACE basic_block RBRACE
    (31) params -> params . COMMA param

    RPAREN          shift and go to state 152
    COMMA           shift and go to state 153


state 141

    (30) params -> param .

    RPAREN          reduce using rule 30 (params -> param .)
    COMMA           reduce using rule 30 (params -> param .)


state 142

    (32) param -> DATATYPE . ID

    ID              shift and go to state 154


state 143

    (23) struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .

    BREAK           reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    CONTINUE        reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    GOTO            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    ID              reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    MINUS           reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    LNOT            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    NULL            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    LPAREN          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    RETURN          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    FUNCTION        reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    STRUCTURE       reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    WHILE           reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DO              reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    IF              reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    INTEGER         reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DOUBLE          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    BOOL            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    STRING          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    VOID            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    DATATYPE        reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    $end            reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)
    RBRACE          reduce using rule 23 (struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE .)


state 144

    (25) struct_params -> struct_params COMMA . struct_param
    (26) struct_param -> . DATATYPE ID
    (27) struct_param -> . func_declaration
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE

    DATATYPE        shift and go to state 130
    FUNCTION        shift and go to state 30

    struct_param                   shift and go to state 155
    func_declaration               shift and go to state 131

state 145

    (26) struct_param -> DATATYPE ID .

    RBRACE          reduce using rule 26 (struct_param -> DATATYPE ID .)
    COMMA           reduce using rule 26 (struct_param -> DATATYPE ID .)


state 146

    (19) while -> WHILE LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    stmt_list                      shift and go to state 156
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 147

    (20) while -> DO LBRACE stmt_list RBRACE WHILE . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 157


state 148

    (21) if-else -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (22) if-else -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    stmt_list                      shift and go to state 158
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 149

    (39) var_declaration -> ID id EQUALS LBRACE args RBRACE . SEMI

    SEMI            shift and go to state 159


state 150

    (41) assign -> ID EQUALS LBRACE args RBRACE SEMI .

    BREAK           reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    CONTINUE        reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    GOTO            reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    ID              reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    MINUS           reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    LNOT            reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    NULL            reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    LPAREN          reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    RETURN          reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    FUNCTION        reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    STRUCTURE       reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    WHILE           reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DO              reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    IF              reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    INTEGER         reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DOUBLE          reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    BOOL            reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    STRING          reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    VOID            reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    DATATYPE        reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    $end            reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)
    RBRACE          reduce using rule 41 (assign -> ID EQUALS LBRACE args RBRACE SEMI .)


state 151

    (77) expr -> datatype LBRACKET RBRACKET id EQUALS datatype . LBRACKET expr RBRACKET

    LBRACKET        shift and go to state 160


state 152

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 161


state 153

    (31) params -> params COMMA . param
    (32) param -> . DATATYPE ID

    DATATYPE        shift and go to state 142

    param                          shift and go to state 162

state 154

    (32) param -> DATATYPE ID .

    RPAREN          reduce using rule 32 (param -> DATATYPE ID .)
    COMMA           reduce using rule 32 (param -> DATATYPE ID .)


state 155

    (25) struct_params -> struct_params COMMA struct_param .

    RBRACE          reduce using rule 25 (struct_params -> struct_params COMMA struct_param .)
    COMMA           reduce using rule 25 (struct_params -> struct_params COMMA struct_param .)


state 156

    (19) while -> WHILE LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RBRACE          shift and go to state 163
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    statement                      shift and go to state 41
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 157

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN . expr RPAREN SEMI
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 164
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 72

state 158

    (21) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RBRACE          shift and go to state 165
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    statement                      shift and go to state 41
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 159

    (39) var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .

    BREAK           reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    CONTINUE        reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    GOTO            reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    ID              reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    MINUS           reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    LNOT            reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    NULL            reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    LPAREN          reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    RETURN          reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    FUNCTION        reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    STRUCTURE       reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    WHILE           reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DO              reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    IF              reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    INTEGER         reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DOUBLE          reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    BOOL            reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    STRING          reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    VOID            reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    DATATYPE        reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    $end            reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)
    RBRACE          reduce using rule 39 (var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI .)


state 160

    (77) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET . expr RBRACKET
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    ID              shift and go to state 71
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    datatype                       shift and go to state 72
    id                             shift and go to state 21
    expr                           shift and go to state 166
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26

state 161

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE . basic_block RBRACE
    (3) basic_block -> . stmt_list
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    datatype                       shift and go to state 28
    id                             shift and go to state 21
    basic_block                    shift and go to state 167
    stmt_list                      shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26

state 162

    (31) params -> params COMMA param .

    RPAREN          reduce using rule 31 (params -> params COMMA param .)
    COMMA           reduce using rule 31 (params -> params COMMA param .)


state 163

    (19) while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .

    BREAK           reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DO              reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 19 (while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)


state 164

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr . RPAREN SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RPAREN          shift and go to state 168
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 165

    (21) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .
    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    BREAK           reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DO              reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 21 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 169


state 166

    (77) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr . RBRACKET
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . MUL expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . INTDIVIDE expr
    (49) expr -> expr . MODULO expr
    (50) expr -> expr . POW expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . GE expr
    (53) expr -> expr . LT expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NE expr
    (58) expr -> expr . LAND expr
    (59) expr -> expr . LOR expr
    (61) expr -> expr . BAND expr
    (62) expr -> expr . BOR expr

    RBRACKET        shift and go to state 170
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MUL             shift and go to state 45
    DIVIDE          shift and go to state 46
    INTDIVIDE       shift and go to state 47
    MODULO          shift and go to state 48
    POW             shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    EQ              shift and go to state 54
    NE              shift and go to state 55
    LAND            shift and go to state 56
    LOR             shift and go to state 57
    BAND            shift and go to state 58
    BOR             shift and go to state 59


state 167

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block . RBRACE

    RBRACE          shift and go to state 171


state 168

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 172


state 169

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 173


state 170

    (77) expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .

    SEMI            reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    MUL             reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    INTDIVIDE       reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    POW             reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    LE              reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    GE              reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    LT              reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    GT              reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    EQ              reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    NE              reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    LAND            reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    LOR             reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    BAND            reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    BOR             reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 77 (expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET .)


state 171

    (4) func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .

    BREAK           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    CONTINUE        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    GOTO            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    ID              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    MINUS           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    LNOT            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    NULL            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    LPAREN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    FUNCTION        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    STRUCTURE       reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    WHILE           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DO              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    IF              reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    INTEGER         reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DOUBLE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    BOOL            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    STRING          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    VOID            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    DATATYPE        reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    $end            reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)
    COMMA           reduce using rule 4 (func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE .)


state 172

    (20) while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .

    BREAK           reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    CONTINUE        reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    GOTO            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    ID              reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    MINUS           reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    LNOT            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    NULL            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    FUNCTION        reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    STRUCTURE       reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    DO              reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    INTEGER         reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    DOUBLE          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    BOOL            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    STRING          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    VOID            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    DATATYPE        reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    $end            reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)
    RBRACE          reduce using rule 20 (while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI .)


state 173

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (5) stmt_list -> . stmt_list statement
    (6) stmt_list -> . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    stmt_list                      shift and go to state 174
    statement                      shift and go to state 4
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 174

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE
    (5) stmt_list -> stmt_list . statement
    (7) statement -> . expr SEMI
    (8) statement -> . var_declaration
    (9) statement -> . return
    (10) statement -> . assign
    (11) statement -> . func_declaration
    (12) statement -> . struct_declaration
    (13) statement -> . while
    (14) statement -> . BREAK SEMI
    (15) statement -> . CONTINUE SEMI
    (16) statement -> . GOTO ID SEMI
    (17) statement -> . goto_mark
    (18) statement -> . if-else
    (28) expr -> . ID DOT ID
    (33) expr -> . ID LPAREN args RPAREN
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr MUL expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr INTDIVIDE expr
    (49) expr -> . expr MODULO expr
    (50) expr -> . expr POW expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr GE expr
    (53) expr -> . expr LT expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NE expr
    (57) expr -> . MINUS expr
    (58) expr -> . expr LAND expr
    (59) expr -> . expr LOR expr
    (60) expr -> . LNOT expr
    (61) expr -> . expr BAND expr
    (62) expr -> . expr BOR expr
    (63) expr -> . id
    (64) expr -> . int
    (65) expr -> . double
    (66) expr -> . bool
    (67) expr -> . str
    (68) expr -> . void
    (69) expr -> . NULL
    (70) expr -> . LPAREN expr RPAREN
    (76) expr -> . datatype LBRACKET RBRACKET id
    (77) expr -> . datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET
    (78) expr -> . ID LBRACKET expr RBRACKET
    (37) var_declaration -> . datatype id EQUALS expr SEMI
    (38) var_declaration -> . datatype id SEMI
    (39) var_declaration -> . ID id EQUALS LBRACE args RBRACE SEMI
    (42) return -> . RETURN expr SEMI
    (43) return -> . RETURN SEMI
    (40) assign -> . ID EQUALS expr SEMI
    (41) assign -> . ID EQUALS LBRACE args RBRACE SEMI
    (4) func_declaration -> . FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE
    (23) struct_declaration -> . STRUCTURE id LBRACE struct_params RBRACE
    (19) while -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (20) while -> . DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI
    (79) goto_mark -> . ID COLON
    (21) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (22) if-else -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (81) id -> . ID
    (71) int -> . INTEGER
    (72) double -> . DOUBLE
    (73) bool -> . BOOL
    (74) str -> . STRING
    (75) void -> . VOID
    (80) datatype -> . DATATYPE

    RBRACE          shift and go to state 175
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    GOTO            shift and go to state 14
    ID              shift and go to state 15
    MINUS           shift and go to state 19
    LNOT            shift and go to state 20
    NULL            shift and go to state 27
    LPAREN          shift and go to state 18
    RETURN          shift and go to state 29
    FUNCTION        shift and go to state 30
    STRUCTURE       shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    VOID            shift and go to state 39
    DATATYPE        shift and go to state 40

    expr                           shift and go to state 5
    statement                      shift and go to state 41
    var_declaration                shift and go to state 6
    return                         shift and go to state 7
    assign                         shift and go to state 8
    func_declaration               shift and go to state 9
    struct_declaration             shift and go to state 10
    while                          shift and go to state 11
    goto_mark                      shift and go to state 16
    if-else                        shift and go to state 17
    id                             shift and go to state 21
    int                            shift and go to state 22
    double                         shift and go to state 23
    bool                           shift and go to state 24
    str                            shift and go to state 25
    void                           shift and go to state 26
    datatype                       shift and go to state 28

state 175

    (22) if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    BREAK           reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    CONTINUE        reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    GOTO            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    ID              reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LNOT            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FUNCTION        reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRUCTURE       reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DO              reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTEGER         reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    VOID            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DATATYPE        reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    $end            reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 22 (if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)

