
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSnonassocLORnonassocLANDnonassocBORnonassocBANDnonassocEQNEnonassocLEGELTGTleftPLUSMINUSleftMULDIVIDEINTDIVIDEMODULOrightPOWrightUMINUSLNOTleftLBRACERBRACELPARENRPARENLBRACKETRBRACKETBAND BOOL BOR BREAK COLON COMMA COMMENT CONTINUE DATATYPE DIVIDE DO DOT DOUBLE ELSE EQ EQUALS ERROR FUNCTION GE GOTO GT ID IF INTDIVIDE INTEGER LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MODULO MUL NE NEWLINE NULL PLUS POW RBRACE RBRACKET RETURN RPAREN SEMI STRING STRUCTURE VOID WHILEprogram :\n               | basic_blockbasic_block : stmt_listfunc_declaration : FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACEstmt_list : stmt_list statement\n                 | statement\n    statement : expr SEMI\n              | var_declaration\n              | return\n              | assign\n              | func_declaration\n              | struct_declaration\n              | while\n              | BREAK SEMI\n              | CONTINUE SEMI\n              | GOTO ID SEMI\n              | goto_mark\n              | if-else\n    \n    while : WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE\n          | DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI\n    \n    if-else : IF LPAREN expr RPAREN LBRACE stmt_list RBRACE\n            | IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE\n    \n    struct_declaration : STRUCTURE id LBRACE struct_params RBRACE\n    \n    struct_params : struct_param\n                  | struct_params COMMA struct_param\n    \n    struct_param : DATATYPE ID\n                 | func_declaration\n    \n    expr : ID DOT ID\n    params :\n              | param\n              | params COMMA paramparam : DATATYPE IDexpr : ID LPAREN args RPARENargs :\n            | expr\n            | args COMMA expr\n    var_declaration : datatype id EQUALS expr SEMI\n                    | datatype id SEMI\n                    | ID id EQUALS LBRACE args RBRACE SEMI\n    assign : ID EQUALS expr SEMI\n    return : RETURN expr SEMI\n           | RETURN SEMI\n    expr : expr PLUS expr\n            | expr MINUS expr\n            | expr MUL expr\n            | expr DIVIDE expr\n            | expr INTDIVIDE expr\n            | expr MODULO expr\n            | expr POW exprexpr : expr LE expr\n            | expr GE expr\n            | expr LT expr\n            | expr GT expr\n            | expr EQ expr\n            | expr NE exprexpr : MINUS expr %prec UMINUS\n            | expr LAND expr\n            | expr LOR expr\n            | LNOT expr\n    expr : expr BAND expr\n         | expr BOR expr\n    expr : id\n            | int\n            | double\n            | bool\n            | str\n            | void\n            | NULL\n            | LPAREN expr RPARENint : INTEGERdouble : DOUBLEbool : BOOLstr : STRINGvoid : VOID\n    expr : datatype LBRACKET RBRACKET id\n         | datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET\n    expr : ID LBRACKET expr RBRACKETgoto_mark : ID COLONdatatype : DATATYPEid : ID'
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,101,111,112,122,136,140,155,159,161,167,168,171,],[-1,0,-2,-3,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,-16,-38,-41,-40,-37,-23,-39,-19,-21,-4,-20,-22,]),'BREAK':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[12,12,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,12,-16,-38,-41,12,-40,-37,-23,12,12,12,12,-39,12,-19,-21,-4,-20,12,12,-22,]),'CONTINUE':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[13,13,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,13,-16,-38,-41,13,-40,-37,-23,13,13,13,13,-39,13,-19,-21,-4,-20,13,13,-22,]),'GOTO':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[14,14,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,14,-16,-38,-41,14,-40,-37,-23,14,14,14,14,-39,14,-19,-21,-4,-20,14,14,-22,]),'ID':([0,3,4,6,7,8,9,10,11,14,15,16,17,18,19,20,28,29,31,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,68,69,78,79,81,82,83,101,109,110,111,112,116,119,121,122,128,136,139,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[15,15,-6,-8,-9,-10,-11,-12,-13,62,63,-17,-18,71,71,71,63,71,63,-79,-5,-7,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-14,-15,102,71,71,71,-78,-42,63,71,15,71,-16,63,71,-38,-41,15,71,71,-40,142,-37,150,-23,15,15,15,71,15,-39,71,15,-19,-21,-4,-20,15,15,-22,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,15,16,17,18,19,20,21,22,23,24,25,26,27,29,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,68,69,70,71,73,74,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,107,108,110,111,112,115,116,117,118,119,120,121,122,123,124,133,136,140,143,145,152,153,154,155,156,157,159,160,161,162,166,167,168,169,170,171,],[19,19,-6,44,-8,-9,-10,-11,-12,-13,-80,-17,-18,19,19,19,-62,-63,-64,-65,-66,-67,-68,19,-70,-71,-72,-73,-74,-5,-7,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-14,-15,-80,19,19,19,-78,44,-80,-56,-59,44,-42,19,19,19,-43,-44,-45,-46,-47,-48,-49,44,44,44,44,44,44,44,44,44,44,-16,-28,44,44,44,-69,19,-38,-41,44,19,44,-33,19,-77,19,-40,-75,44,44,-37,-23,19,19,19,19,19,-39,19,19,-19,44,-21,44,-76,-4,-20,19,19,-22,]),'LNOT':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[20,20,-6,-8,-9,-10,-11,-12,-13,-17,-18,20,20,20,20,-5,-7,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-14,-15,20,20,20,-78,-42,20,20,20,-16,20,-38,-41,20,20,20,-40,-37,-23,20,20,20,20,20,-39,20,20,-19,-21,-4,-20,20,20,-22,]),'NULL':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[27,27,-6,-8,-9,-10,-11,-12,-13,-17,-18,27,27,27,27,-5,-7,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-14,-15,27,27,27,-78,-42,27,27,27,-16,27,-38,-41,27,27,27,-40,-37,-23,27,27,27,27,27,-39,27,27,-19,-21,-4,-20,27,27,-22,]),'LPAREN':([0,3,4,6,7,8,9,10,11,15,16,17,18,19,20,29,32,34,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,66,68,69,71,78,81,82,83,101,110,111,112,113,116,119,121,122,136,140,143,144,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[18,18,-6,-8,-9,-10,-11,-12,-13,65,-17,-18,18,18,18,18,81,83,-5,-7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-14,-15,-80,18,18,18,-78,65,-42,18,18,18,-16,18,-38,-41,125,18,18,18,-40,-37,-23,18,153,18,18,18,18,-39,18,18,-19,-21,-4,-20,18,18,-22,]),'RETURN':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[29,29,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,29,-16,-38,-41,29,-40,-37,-23,29,29,29,29,-39,29,-19,-21,-4,-20,29,29,-22,]),'FUNCTION':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,114,116,122,136,140,141,143,145,152,154,155,157,159,161,167,168,169,170,171,],[30,30,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,30,-16,-38,-41,30,30,-40,-37,-23,30,30,30,30,30,-39,30,-19,-21,-4,-20,30,30,-22,]),'STRUCTURE':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[31,31,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,31,-16,-38,-41,31,-40,-37,-23,31,31,31,31,-39,31,-19,-21,-4,-20,31,31,-22,]),'WHILE':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,131,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[32,32,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,32,-16,-38,-41,32,-40,144,-37,-23,32,32,32,32,-39,32,-19,-21,-4,-20,32,32,-22,]),'DO':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[33,33,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,33,-16,-38,-41,33,-40,-37,-23,33,33,33,33,-39,33,-19,-21,-4,-20,33,33,-22,]),'IF':([0,3,4,6,7,8,9,10,11,16,17,41,42,60,61,69,78,82,101,111,112,116,122,136,140,143,145,152,154,155,157,159,161,167,168,169,170,171,],[34,34,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-78,-42,34,-16,-38,-41,34,-40,-37,-23,34,34,34,34,-39,34,-19,-21,-4,-20,34,34,-22,]),'INTEGER':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[35,35,-6,-8,-9,-10,-11,-12,-13,-17,-18,35,35,35,35,-5,-7,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-14,-15,35,35,35,-78,-42,35,35,35,-16,35,-38,-41,35,35,35,-40,-37,-23,35,35,35,35,35,-39,35,35,-19,-21,-4,-20,35,35,-22,]),'DOUBLE':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[36,36,-6,-8,-9,-10,-11,-12,-13,-17,-18,36,36,36,36,-5,-7,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-14,-15,36,36,36,-78,-42,36,36,36,-16,36,-38,-41,36,36,36,-40,-37,-23,36,36,36,36,36,-39,36,36,-19,-21,-4,-20,36,36,-22,]),'BOOL':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[37,37,-6,-8,-9,-10,-11,-12,-13,-17,-18,37,37,37,37,-5,-7,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-14,-15,37,37,37,-78,-42,37,37,37,-16,37,-38,-41,37,37,37,-40,-37,-23,37,37,37,37,37,-39,37,37,-19,-21,-4,-20,37,37,-22,]),'STRING':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[38,38,-6,-8,-9,-10,-11,-12,-13,-17,-18,38,38,38,38,-5,-7,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-14,-15,38,38,38,-78,-42,38,38,38,-16,38,-38,-41,38,38,38,-40,-37,-23,38,38,38,38,38,-39,38,38,-19,-21,-4,-20,38,38,-22,]),'VOID':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,116,119,121,122,136,140,143,145,152,153,154,155,156,157,159,161,167,168,169,170,171,],[39,39,-6,-8,-9,-10,-11,-12,-13,-17,-18,39,39,39,39,-5,-7,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-14,-15,39,39,39,-78,-42,39,39,39,-16,39,-38,-41,39,39,39,-40,-37,-23,39,39,39,39,39,-39,39,39,-19,-21,-4,-20,39,39,-22,]),'DATATYPE':([0,3,4,6,7,8,9,10,11,16,17,18,19,20,29,30,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,68,69,78,81,82,83,101,110,111,112,114,116,119,121,122,125,135,136,140,141,143,145,149,152,153,154,155,156,157,159,161,167,168,169,170,171,],[40,40,-6,-8,-9,-10,-11,-12,-13,-17,-18,40,40,40,40,40,-5,-7,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-14,-15,40,40,40,-78,-42,40,40,40,-16,40,-38,-41,128,40,40,40,-40,139,40,-37,-23,128,40,40,139,40,40,40,-39,40,40,-19,-21,-4,-20,40,40,-22,]),'RBRACE':([3,4,6,7,8,9,10,11,16,17,21,22,23,24,25,26,27,35,36,37,38,39,41,42,60,61,63,69,71,73,74,78,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,108,111,112,116,118,120,121,122,123,126,127,129,133,134,136,140,142,151,152,154,155,159,161,163,166,167,168,170,171,],[-3,-6,-8,-9,-10,-11,-12,-13,-17,-18,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-5,-7,-14,-15,-80,-78,-80,-56,-59,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-16,-28,-35,-69,-38,-41,131,-33,-77,-34,-40,-75,140,-24,-27,-36,146,-37,-23,-26,-25,159,161,-39,-19,-21,167,-76,-4,-20,171,-22,]),'SEMI':([5,12,13,15,21,22,23,24,25,26,27,29,35,36,37,38,39,62,63,71,73,74,76,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,107,108,118,120,123,124,146,164,166,],[42,60,61,-80,-62,-63,-64,-65,-66,-67,-68,78,-70,-71,-72,-73,-74,101,-80,-80,-56,-59,111,112,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-28,122,-69,-33,-77,-75,136,155,168,-76,]),'PLUS':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[43,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,43,-80,-56,-59,43,-43,-44,-45,-46,-47,-48,-49,43,43,43,43,43,43,43,43,43,43,-28,43,43,43,-69,43,43,-33,-77,-75,43,43,43,43,-76,]),'MUL':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[45,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,45,-80,-56,-59,45,45,45,-45,-46,-47,-48,-49,45,45,45,45,45,45,45,45,45,45,-28,45,45,45,-69,45,45,-33,-77,-75,45,45,45,45,-76,]),'DIVIDE':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[46,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,46,-80,-56,-59,46,46,46,-45,-46,-47,-48,-49,46,46,46,46,46,46,46,46,46,46,-28,46,46,46,-69,46,46,-33,-77,-75,46,46,46,46,-76,]),'INTDIVIDE':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[47,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,47,-80,-56,-59,47,47,47,-45,-46,-47,-48,-49,47,47,47,47,47,47,47,47,47,47,-28,47,47,47,-69,47,47,-33,-77,-75,47,47,47,47,-76,]),'MODULO':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[48,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,48,-80,-56,-59,48,48,48,-45,-46,-47,-48,-49,48,48,48,48,48,48,48,48,48,48,-28,48,48,48,-69,48,48,-33,-77,-75,48,48,48,48,-76,]),'POW':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[49,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,49,-80,-56,-59,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-28,49,49,49,-69,49,49,-33,-77,-75,49,49,49,49,-76,]),'LE':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[50,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,50,-80,-56,-59,50,-43,-44,-45,-46,-47,-48,-49,None,None,None,None,50,50,50,50,50,50,-28,50,50,50,-69,50,50,-33,-77,-75,50,50,50,50,-76,]),'GE':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[51,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,51,-80,-56,-59,51,-43,-44,-45,-46,-47,-48,-49,None,None,None,None,51,51,51,51,51,51,-28,51,51,51,-69,51,51,-33,-77,-75,51,51,51,51,-76,]),'LT':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[52,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,52,-80,-56,-59,52,-43,-44,-45,-46,-47,-48,-49,None,None,None,None,52,52,52,52,52,52,-28,52,52,52,-69,52,52,-33,-77,-75,52,52,52,52,-76,]),'GT':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[53,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,53,-80,-56,-59,53,-43,-44,-45,-46,-47,-48,-49,None,None,None,None,53,53,53,53,53,53,-28,53,53,53,-69,53,53,-33,-77,-75,53,53,53,53,-76,]),'EQ':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[54,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,54,-80,-56,-59,54,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,None,None,54,54,54,54,-28,54,54,54,-69,54,54,-33,-77,-75,54,54,54,54,-76,]),'NE':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[55,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,55,-80,-56,-59,55,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,None,None,55,55,55,55,-28,55,55,55,-69,55,55,-33,-77,-75,55,55,55,55,-76,]),'LAND':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[56,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,56,-80,-56,-59,56,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,None,56,-60,-61,-28,56,56,56,-69,56,56,-33,-77,-75,56,56,56,56,-76,]),'LOR':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[57,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,57,-80,-56,-59,57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,None,-60,-61,-28,57,57,57,-69,57,57,-33,-77,-75,57,57,57,57,-76,]),'BAND':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[58,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,58,-80,-56,-59,58,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,58,58,None,58,-28,58,58,58,-69,58,58,-33,-77,-75,58,58,58,58,-76,]),'BOR':([5,15,21,22,23,24,25,26,27,35,36,37,38,39,63,70,71,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,107,108,115,117,118,120,123,124,133,160,162,166,],[59,-80,-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,59,-80,-56,-59,59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,59,59,-60,None,-28,59,59,59,-69,59,59,-33,-77,-75,59,59,59,59,-76,]),'DOT':([15,71,],[64,64,]),'LBRACKET':([15,28,40,71,72,147,],[66,75,-79,66,75,156,]),'EQUALS':([15,63,67,76,123,],[68,-80,106,110,135,]),'COLON':([15,],[69,]),'RPAREN':([21,22,23,24,25,26,27,35,36,37,38,39,63,65,70,71,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,108,115,117,118,120,123,125,133,137,138,150,158,160,166,],[-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,-34,108,-80,-56,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-28,118,-35,-69,130,132,-33,-77,-75,-29,-36,148,-30,-32,-31,164,-76,]),'COMMA':([21,22,23,24,25,26,27,35,36,37,38,39,63,65,71,73,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,108,118,120,121,123,125,126,127,129,133,134,137,138,142,150,151,158,166,167,],[-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,-34,-80,-56,-59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-28,119,-35,-69,-33,-77,-34,-75,-29,141,-24,-27,-36,119,149,-30,-26,-32,-25,-31,-76,-4,]),'RBRACKET':([21,22,23,24,25,26,27,35,36,37,38,39,63,71,73,74,75,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,105,108,118,120,123,162,166,],[-62,-63,-64,-65,-66,-67,-68,-70,-71,-72,-73,-74,-80,-80,-56,-59,109,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-28,120,-69,-33,-77,-75,166,-76,]),'LBRACE':([33,63,80,106,130,132,148,165,],[82,-80,114,121,143,145,157,169,]),'ELSE':([161,],[165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'basic_block':([0,157,],[2,163,]),'stmt_list':([0,82,143,145,157,169,],[3,116,152,154,3,170,]),'statement':([0,3,82,116,143,145,152,154,157,169,170,],[4,41,4,41,4,4,41,41,4,4,41,]),'expr':([0,3,18,19,20,29,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,143,145,152,153,154,156,157,169,170,],[5,5,70,73,74,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,107,115,5,117,124,5,133,104,5,5,5,160,5,162,5,5,5,]),'var_declaration':([0,3,82,116,143,145,152,154,157,169,170,],[6,6,6,6,6,6,6,6,6,6,6,]),'return':([0,3,82,116,143,145,152,154,157,169,170,],[7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,82,116,143,145,152,154,157,169,170,],[8,8,8,8,8,8,8,8,8,8,8,]),'func_declaration':([0,3,82,114,116,141,143,145,152,154,157,169,170,],[9,9,9,129,9,129,9,9,9,9,9,9,9,]),'struct_declaration':([0,3,82,116,143,145,152,154,157,169,170,],[10,10,10,10,10,10,10,10,10,10,10,]),'while':([0,3,82,116,143,145,152,154,157,169,170,],[11,11,11,11,11,11,11,11,11,11,11,]),'goto_mark':([0,3,82,116,143,145,152,154,157,169,170,],[16,16,16,16,16,16,16,16,16,16,16,]),'if-else':([0,3,82,116,143,145,152,154,157,169,170,],[17,17,17,17,17,17,17,17,17,17,17,]),'id':([0,3,15,18,19,20,28,29,31,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,79,81,82,83,109,110,116,119,121,143,145,152,153,154,156,157,169,170,],[21,21,67,21,21,21,76,21,80,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,113,21,21,21,123,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'int':([0,3,18,19,20,29,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,143,145,152,153,154,156,157,169,170,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'double':([0,3,18,19,20,29,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,143,145,152,153,154,156,157,169,170,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'bool':([0,3,18,19,20,29,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,143,145,152,153,154,156,157,169,170,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'str':([0,3,18,19,20,29,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,143,145,152,153,154,156,157,169,170,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'void':([0,3,18,19,20,29,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,143,145,152,153,154,156,157,169,170,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'datatype':([0,3,18,19,20,29,30,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,68,81,82,83,110,116,119,121,135,143,145,152,153,154,156,157,169,170,],[28,28,72,72,72,72,79,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,28,72,72,28,72,72,147,28,28,28,72,28,72,28,28,28,]),'args':([65,121,],[103,134,]),'struct_params':([114,],[126,]),'struct_param':([114,141,],[127,151,]),'params':([125,],[137,]),'param':([125,149,],[138,158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> <empty>','program',0,'p_program','doh_parser.py',34),
  ('program -> basic_block','program',1,'p_program','doh_parser.py',35),
  ('basic_block -> stmt_list','basic_block',1,'p_basic_block','doh_parser.py',43),
  ('func_declaration -> FUNCTION datatype id LPAREN params RPAREN LBRACE basic_block RBRACE','func_declaration',9,'p_func_declaration','doh_parser.py',48),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','doh_parser.py',53),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','doh_parser.py',54),
  ('statement -> expr SEMI','statement',2,'p_stmt','doh_parser.py',63),
  ('statement -> var_declaration','statement',1,'p_stmt','doh_parser.py',64),
  ('statement -> return','statement',1,'p_stmt','doh_parser.py',65),
  ('statement -> assign','statement',1,'p_stmt','doh_parser.py',66),
  ('statement -> func_declaration','statement',1,'p_stmt','doh_parser.py',67),
  ('statement -> struct_declaration','statement',1,'p_stmt','doh_parser.py',68),
  ('statement -> while','statement',1,'p_stmt','doh_parser.py',69),
  ('statement -> BREAK SEMI','statement',2,'p_stmt','doh_parser.py',70),
  ('statement -> CONTINUE SEMI','statement',2,'p_stmt','doh_parser.py',71),
  ('statement -> GOTO ID SEMI','statement',3,'p_stmt','doh_parser.py',72),
  ('statement -> goto_mark','statement',1,'p_stmt','doh_parser.py',73),
  ('statement -> if-else','statement',1,'p_stmt','doh_parser.py',74),
  ('while -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE','while',7,'p_loops','doh_parser.py',88),
  ('while -> DO LBRACE stmt_list RBRACE WHILE LPAREN expr RPAREN SEMI','while',9,'p_loops','doh_parser.py',89),
  ('if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE','if-else',7,'p_if_else','doh_parser.py',99),
  ('if-else -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE','if-else',11,'p_if_else','doh_parser.py',100),
  ('struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE','struct_declaration',5,'p_struct_declaration','doh_parser.py',110),
  ('struct_params -> struct_param','struct_params',1,'p_struct_params','doh_parser.py',117),
  ('struct_params -> struct_params COMMA struct_param','struct_params',3,'p_struct_params','doh_parser.py',118),
  ('struct_param -> DATATYPE ID','struct_param',2,'p_struct_param','doh_parser.py',128),
  ('struct_param -> func_declaration','struct_param',1,'p_struct_param','doh_parser.py',129),
  ('expr -> ID DOT ID','expr',3,'p_struct_field','doh_parser.py',139),
  ('params -> <empty>','params',0,'p_params','doh_parser.py',145),
  ('params -> param','params',1,'p_params','doh_parser.py',146),
  ('params -> params COMMA param','params',3,'p_params','doh_parser.py',147),
  ('param -> DATATYPE ID','param',2,'p_param_declaration','doh_parser.py',157),
  ('expr -> ID LPAREN args RPAREN','expr',4,'p_func_call','doh_parser.py',162),
  ('args -> <empty>','args',0,'p_arguments','doh_parser.py',167),
  ('args -> expr','args',1,'p_arguments','doh_parser.py',168),
  ('args -> args COMMA expr','args',3,'p_arguments','doh_parser.py',169),
  ('var_declaration -> datatype id EQUALS expr SEMI','var_declaration',5,'p_var_declaration','doh_parser.py',181),
  ('var_declaration -> datatype id SEMI','var_declaration',3,'p_var_declaration','doh_parser.py',182),
  ('var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI','var_declaration',7,'p_var_declaration','doh_parser.py',183),
  ('assign -> ID EQUALS expr SEMI','assign',4,'p_assign','doh_parser.py',195),
  ('return -> RETURN expr SEMI','return',3,'p_return','doh_parser.py',201),
  ('return -> RETURN SEMI','return',2,'p_return','doh_parser.py',202),
  ('expr -> expr PLUS expr','expr',3,'p_math_expressions','doh_parser.py',211),
  ('expr -> expr MINUS expr','expr',3,'p_math_expressions','doh_parser.py',212),
  ('expr -> expr MUL expr','expr',3,'p_math_expressions','doh_parser.py',213),
  ('expr -> expr DIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',214),
  ('expr -> expr INTDIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',215),
  ('expr -> expr MODULO expr','expr',3,'p_math_expressions','doh_parser.py',216),
  ('expr -> expr POW expr','expr',3,'p_math_expressions','doh_parser.py',217),
  ('expr -> expr LE expr','expr',3,'p_conditionals','doh_parser.py',238),
  ('expr -> expr GE expr','expr',3,'p_conditionals','doh_parser.py',239),
  ('expr -> expr LT expr','expr',3,'p_conditionals','doh_parser.py',240),
  ('expr -> expr GT expr','expr',3,'p_conditionals','doh_parser.py',241),
  ('expr -> expr EQ expr','expr',3,'p_conditionals','doh_parser.py',242),
  ('expr -> expr NE expr','expr',3,'p_conditionals','doh_parser.py',243),
  ('expr -> MINUS expr','expr',2,'p_logical_operation','doh_parser.py',259),
  ('expr -> expr LAND expr','expr',3,'p_logical_operation','doh_parser.py',260),
  ('expr -> expr LOR expr','expr',3,'p_logical_operation','doh_parser.py',261),
  ('expr -> LNOT expr','expr',2,'p_logical_operation','doh_parser.py',262),
  ('expr -> expr BAND expr','expr',3,'p_bitwise_operation','doh_parser.py',275),
  ('expr -> expr BOR expr','expr',3,'p_bitwise_operation','doh_parser.py',276),
  ('expr -> id','expr',1,'p_literals','doh_parser.py',285),
  ('expr -> int','expr',1,'p_literals','doh_parser.py',286),
  ('expr -> double','expr',1,'p_literals','doh_parser.py',287),
  ('expr -> bool','expr',1,'p_literals','doh_parser.py',288),
  ('expr -> str','expr',1,'p_literals','doh_parser.py',289),
  ('expr -> void','expr',1,'p_literals','doh_parser.py',290),
  ('expr -> NULL','expr',1,'p_literals','doh_parser.py',291),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_literals','doh_parser.py',292),
  ('int -> INTEGER','int',1,'p_const_int','doh_parser.py',300),
  ('double -> DOUBLE','double',1,'p_const_double','doh_parser.py',305),
  ('bool -> BOOL','bool',1,'p_const_bool','doh_parser.py',310),
  ('str -> STRING','str',1,'p_const_string','doh_parser.py',315),
  ('void -> VOID','void',1,'p_void','doh_parser.py',320),
  ('expr -> datatype LBRACKET RBRACKET id','expr',4,'p_array_init','doh_parser.py',326),
  ('expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET expr RBRACKET','expr',9,'p_array_init','doh_parser.py',327),
  ('expr -> ID LBRACKET expr RBRACKET','expr',4,'p_index','doh_parser.py',336),
  ('goto_mark -> ID COLON','goto_mark',2,'p_goto_mark','doh_parser.py',341),
  ('datatype -> DATATYPE','datatype',1,'p_datatype','doh_parser.py',346),
  ('id -> ID','id',1,'p_id','doh_parser.py',351),
]
