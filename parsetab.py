
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSnonassocLORnonassocLANDnonassocBORnonassocBANDnonassocEQNEnonassocLEGELTGTleftPLUSMINUSleftMULDIVIDEINTDIVIDEMODULOrightPOWrightUMINUSLNOTleftLBRACERBRACELPARENRPARENLBRACKETRBRACKETBAND BOOL BOR BREAK COLON COMMA COMMENT CONTINUE DATATYPE DIVIDE DO DOT DOUBLE ELSE EQ EQUALS ERROR FUNCTION GE GOTO GT ID IF INTDIVIDE INTEGER LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MODULO MUL NE NEWLINE NULL PLUS POW RBRACE RBRACKET RETURN RPAREN SEMI STRING STRUCTURE VOID WHILEprogram :\n               | scope\n    body_block : LBRACE scope RBRACE\n    func_declaration : FUNCTION datatype id LPAREN params RPAREN body_blockscope : scope statement\n             | statement\n    statement : expr SEMI\n              | var_declaration\n              | return\n              | assign\n              | func_declaration\n              | struct_declaration\n              | while\n              | BREAK SEMI\n              | CONTINUE SEMI\n              | GOTO ID SEMI\n              | goto_mark\n              | if-else\n    \n    while : WHILE conditional body_block\n          | DO body_block WHILE conditional SEMI\n    \n    if-else : IF conditional body_block\n            | IF conditional body_block ELSE body_block\n    conditional : LPAREN expr RPAREN\n    conditional : error expr RPAREN\n                | LPAREN error RPAREN\n                | LPAREN expr error\n    \n    struct_declaration : STRUCTURE id LBRACE struct_params RBRACE\n    \n    struct_params : struct_param\n                  | struct_params COMMA struct_param\n    \n    struct_param : DATATYPE ID\n                 | func_declaration\n    params :\n              | param\n              | params COMMA paramparam : DATATYPE IDexpr : id LPAREN args RPARENargs :\n            | expr\n            | args COMMA expr\n    var_declaration : datatype id EQUALS expr SEMI\n                    | datatype id SEMI\n                    | ID id EQUALS LBRACE args RBRACE SEMI\n    assign : ID EQUALS expr SEMI\n              | ID EQUALS LBRACE args RBRACE SEMI\n              | ID DOT ID EQUALS expr SEMI\n    return : RETURN expr SEMI\n           | RETURN SEMI\n    expr : expr PLUS expr\n            | expr MINUS expr\n            | expr MUL expr\n            | expr DIVIDE expr\n            | expr INTDIVIDE expr\n            | expr MODULO expr\n            | expr POW exprexpr : expr LE expr\n            | expr GE expr\n            | expr LT expr\n            | expr GT expr\n            | expr EQ expr\n            | expr NE exprexpr : MINUS expr %prec UMINUS\n            | expr LAND expr\n            | expr LOR expr\n            | LNOT expr\n    expr : expr BAND expr\n         | expr BOR expr\n    expr : id\n            | int\n            | double\n            | bool\n            | str\n            | void\n            | NULL\n            | LPAREN expr RPARENint : INTEGERdouble : DOUBLEbool : BOOLstr : STRINGvoid : VOID\n    expr : datatype LBRACKET RBRACKET id\n         | datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET\n    expr : ID LBRACKET expr RBRACKETgoto_mark : ID COLONdatatype : DATATYPEid : ID'
    
_lr_action_items = {'$end':([0,1,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,103,114,115,118,124,127,144,151,155,158,159,161,162,168,170,],[-1,0,-2,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,-16,-41,-46,-19,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'BREAK':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[11,11,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,11,-16,-41,-46,-19,11,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'CONTINUE':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[12,12,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,12,-16,-41,-46,-19,12,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'GOTO':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[13,13,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,13,-16,-41,-46,-19,13,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,67,68,69,71,72,73,76,77,81,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,110,111,113,114,115,118,119,121,123,124,125,126,127,129,130,131,132,133,144,148,149,151,155,158,159,161,162,168,170,173,],[19,19,-6,43,-8,-9,-10,-11,-12,-13,-85,-17,-18,-67,19,19,19,-68,-69,-70,-71,-72,-73,-75,19,-76,-77,-78,-79,-5,-7,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-14,-15,-85,19,19,-83,19,43,-85,-61,-64,43,-47,19,19,19,-48,-49,-50,-51,-52,-53,-54,43,43,43,43,43,43,43,43,43,43,-16,43,43,19,43,-74,19,-41,-46,-19,43,43,19,-21,-82,19,-43,19,-36,19,-80,43,-3,43,43,-40,-27,-20,-22,-44,-45,-42,-4,-81,]),'LNOT':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[20,20,-6,-8,-9,-10,-11,-12,-13,-17,-18,20,20,20,20,-5,-7,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-14,-15,20,20,-83,20,-47,20,20,20,-16,20,20,-41,-46,-19,20,-21,20,-43,20,20,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'NULL':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[26,26,-6,-8,-9,-10,-11,-12,-13,-17,-18,26,26,26,26,-5,-7,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-14,-15,26,26,-83,26,-47,26,26,26,-16,26,26,-41,-46,-19,26,-21,26,-43,26,26,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'LPAREN':([0,2,3,5,6,7,8,9,10,14,15,16,17,18,19,20,29,32,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,67,68,71,77,81,82,84,103,107,113,114,115,116,118,122,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[18,18,-6,-8,-9,-10,-11,-12,-13,-85,-17,-18,68,18,18,18,18,81,81,-5,-7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-14,-15,-85,18,18,-83,18,-85,-47,18,18,18,-16,18,18,-41,-46,134,-19,81,18,-21,18,-43,18,18,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'ID':([0,2,3,5,6,7,8,9,10,13,14,15,16,18,19,20,27,29,31,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,66,67,68,77,78,81,82,84,103,107,112,113,114,115,118,123,124,126,127,129,131,137,144,151,154,155,158,159,161,162,168,170,],[14,14,-6,-8,-9,-10,-11,-12,-13,61,62,-17,-18,71,71,71,62,71,62,-84,-5,-7,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-14,-15,71,71,108,-83,71,-47,62,71,71,14,-16,71,62,71,-41,-46,-19,14,-21,71,-43,71,71,157,-3,-40,166,-27,-20,-22,-44,-45,-42,-4,]),'RETURN':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[29,29,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,29,-16,-41,-46,-19,29,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'FUNCTION':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,117,118,123,124,127,144,151,155,156,158,159,161,162,168,170,],[30,30,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,30,-16,-41,-46,30,-19,30,-21,-43,-3,-40,-27,30,-20,-22,-44,-45,-42,-4,]),'STRUCTURE':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[31,31,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,31,-16,-41,-46,-19,31,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'WHILE':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,83,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[32,32,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,122,32,-16,-41,-46,-19,32,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'DO':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[33,33,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,33,-16,-41,-46,-19,33,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'IF':([0,2,3,5,6,7,8,9,10,15,16,40,41,59,60,67,77,84,103,114,115,118,123,124,127,144,151,155,158,159,161,162,168,170,],[34,34,-6,-8,-9,-10,-11,-12,-13,-17,-18,-5,-7,-14,-15,-83,-47,34,-16,-41,-46,-19,34,-21,-43,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'INTEGER':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,169,170,],[28,28,-6,-8,-9,-10,-11,-12,-13,-17,-18,28,28,28,28,-5,-7,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-14,-15,28,28,-83,28,-47,28,28,28,-16,28,28,-41,-46,-19,28,-21,28,-43,28,28,-3,-40,-27,-20,-22,-44,-45,-42,172,-4,]),'DOUBLE':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[35,35,-6,-8,-9,-10,-11,-12,-13,-17,-18,35,35,35,35,-5,-7,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-14,-15,35,35,-83,35,-47,35,35,35,-16,35,35,-41,-46,-19,35,-21,35,-43,35,35,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'BOOL':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[36,36,-6,-8,-9,-10,-11,-12,-13,-17,-18,36,36,36,36,-5,-7,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-14,-15,36,36,-83,36,-47,36,36,36,-16,36,36,-41,-46,-19,36,-21,36,-43,36,36,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'STRING':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[37,37,-6,-8,-9,-10,-11,-12,-13,-17,-18,37,37,37,37,-5,-7,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-14,-15,37,37,-83,37,-47,37,37,37,-16,37,37,-41,-46,-19,37,-21,37,-43,37,37,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'VOID':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,118,123,124,126,127,129,131,144,151,155,158,159,161,162,168,170,],[38,38,-6,-8,-9,-10,-11,-12,-13,-17,-18,38,38,38,38,-5,-7,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-14,-15,38,38,-83,38,-47,38,38,38,-16,38,38,-41,-46,-19,38,-21,38,-43,38,38,-3,-40,-27,-20,-22,-44,-45,-42,-4,]),'DATATYPE':([0,2,3,5,6,7,8,9,10,15,16,18,19,20,29,30,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,67,68,77,81,82,84,103,107,113,114,115,117,118,123,124,126,127,129,131,134,144,150,151,155,156,158,159,161,162,165,168,170,],[39,39,-6,-8,-9,-10,-11,-12,-13,-17,-18,39,39,39,39,39,-5,-7,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-14,-15,39,39,-83,39,-47,39,39,39,-16,39,39,-41,-46,137,-19,39,-21,39,-43,39,39,154,-3,39,-40,-27,137,-20,-22,-44,-45,154,-42,-4,]),'RBRACE':([3,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,28,35,36,37,38,40,41,59,60,62,67,71,72,73,77,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,110,111,114,115,118,123,124,125,126,127,128,130,132,135,136,138,144,146,149,151,155,157,158,159,161,162,167,168,170,173,],[-6,-8,-9,-10,-11,-12,-13,-17,-18,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-5,-7,-14,-15,-85,-83,-85,-61,-64,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-65,-66,-16,-37,-38,-74,-41,-46,-19,144,-21,-82,-37,-43,147,-36,-80,155,-28,-31,-3,160,-39,-40,-27,-30,-20,-22,-44,-45,-29,-42,-4,-81,]),'SEMI':([4,11,12,14,17,21,22,23,24,25,26,28,29,35,36,37,38,61,62,71,72,73,75,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,111,125,130,132,133,139,140,141,142,143,147,148,160,173,],[41,59,60,-85,-67,-68,-69,-70,-71,-72,-73,-75,77,-76,-77,-78,-79,103,-85,-85,-61,-64,114,115,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-65,-66,127,-74,-82,-36,-80,151,-23,-26,-25,-24,158,161,162,168,-81,]),'PLUS':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[42,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,42,-85,-61,-64,42,-48,-49,-50,-51,-52,-53,-54,42,42,42,42,42,42,42,42,42,42,42,42,42,-74,42,42,-82,-36,-80,42,42,42,-81,]),'MUL':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[44,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,44,-85,-61,-64,44,44,44,-50,-51,-52,-53,-54,44,44,44,44,44,44,44,44,44,44,44,44,44,-74,44,44,-82,-36,-80,44,44,44,-81,]),'DIVIDE':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[45,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,45,-85,-61,-64,45,45,45,-50,-51,-52,-53,-54,45,45,45,45,45,45,45,45,45,45,45,45,45,-74,45,45,-82,-36,-80,45,45,45,-81,]),'INTDIVIDE':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[46,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,46,-85,-61,-64,46,46,46,-50,-51,-52,-53,-54,46,46,46,46,46,46,46,46,46,46,46,46,46,-74,46,46,-82,-36,-80,46,46,46,-81,]),'MODULO':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[47,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,47,-85,-61,-64,47,47,47,-50,-51,-52,-53,-54,47,47,47,47,47,47,47,47,47,47,47,47,47,-74,47,47,-82,-36,-80,47,47,47,-81,]),'POW':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[48,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,48,-85,-61,-64,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-74,48,48,-82,-36,-80,48,48,48,-81,]),'LE':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[49,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,49,-85,-61,-64,49,-48,-49,-50,-51,-52,-53,-54,None,None,None,None,49,49,49,49,49,49,49,49,49,-74,49,49,-82,-36,-80,49,49,49,-81,]),'GE':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[50,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,50,-85,-61,-64,50,-48,-49,-50,-51,-52,-53,-54,None,None,None,None,50,50,50,50,50,50,50,50,50,-74,50,50,-82,-36,-80,50,50,50,-81,]),'LT':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[51,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,51,-85,-61,-64,51,-48,-49,-50,-51,-52,-53,-54,None,None,None,None,51,51,51,51,51,51,51,51,51,-74,51,51,-82,-36,-80,51,51,51,-81,]),'GT':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[52,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,52,-85,-61,-64,52,-48,-49,-50,-51,-52,-53,-54,None,None,None,None,52,52,52,52,52,52,52,52,52,-74,52,52,-82,-36,-80,52,52,52,-81,]),'EQ':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[53,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,53,-85,-61,-64,53,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,None,None,53,53,53,53,53,53,53,-74,53,53,-82,-36,-80,53,53,53,-81,]),'NE':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[54,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,54,-85,-61,-64,54,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,None,None,54,54,54,54,54,54,54,-74,54,54,-82,-36,-80,54,54,54,-81,]),'LAND':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[55,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,55,-85,-61,-64,55,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,None,55,-65,-66,55,55,55,-74,55,55,-82,-36,-80,55,55,55,-81,]),'LOR':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[56,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,56,-85,-61,-64,56,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,None,-65,-66,56,56,56,-74,56,56,-82,-36,-80,56,56,56,-81,]),'BAND':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[57,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,57,-85,-61,-64,57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,57,57,None,57,57,57,57,-74,57,57,-82,-36,-80,57,57,57,-81,]),'BOR':([4,14,17,21,22,23,24,25,26,28,35,36,37,38,62,69,71,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,111,119,121,125,130,132,133,148,149,173,],[58,-85,-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,58,-85,-61,-64,58,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,58,58,-65,None,58,58,58,-74,58,58,-82,-36,-80,58,58,58,-81,]),'LBRACKET':([14,27,39,70,71,163,],[63,74,-84,74,63,169,]),'EQUALS':([14,62,64,75,108,132,],[65,-85,105,113,129,150,]),'DOT':([14,],[66,]),'COLON':([14,],[67,]),'RPAREN':([17,21,22,23,24,25,26,28,35,36,37,38,62,68,69,71,72,73,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,111,119,120,121,125,130,132,134,149,152,153,166,171,173,],[-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,-37,111,-85,-61,-64,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-65,-66,130,-38,-74,139,141,142,-82,-36,-80,-32,-39,164,-33,-35,-34,-81,]),'RBRACKET':([17,21,22,23,24,25,26,28,35,36,37,38,62,71,72,73,74,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,111,125,130,132,172,173,],[-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,-85,-61,-64,112,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-65,-66,125,-74,-82,-36,-80,173,-81,]),'COMMA':([17,21,22,23,24,25,26,28,35,36,37,38,62,68,71,72,73,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,109,110,111,125,126,128,130,132,134,135,136,138,144,146,149,152,153,157,166,167,170,171,173,],[-67,-68,-69,-70,-71,-72,-73,-75,-76,-77,-78,-79,-85,-37,-85,-61,-64,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-65,-66,-37,131,-38,-74,-82,-37,131,-36,-80,-32,156,-28,-31,-3,131,-39,165,-33,-30,-35,-29,-4,-34,-81,]),'error':([17,21,22,23,24,25,26,28,32,34,35,36,37,38,62,71,72,73,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,119,122,125,130,132,173,],[-67,-68,-69,-70,-71,-72,-73,-75,82,82,-76,-77,-78,-79,-85,-85,-61,-64,120,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-65,-66,-74,140,82,-82,-36,-80,-81,]),'LBRACE':([33,62,65,79,80,85,105,139,140,141,142,145,164,],[84,-85,107,117,84,84,126,-23,-26,-25,-24,84,84,]),'ELSE':([124,144,],[145,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'scope':([0,84,],[2,123,]),'statement':([0,2,84,123,],[3,40,3,40,]),'expr':([0,2,18,19,20,29,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,],[4,4,69,72,73,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,110,119,121,4,110,133,4,110,148,149,]),'var_declaration':([0,2,84,123,],[5,5,5,5,]),'return':([0,2,84,123,],[6,6,6,6,]),'assign':([0,2,84,123,],[7,7,7,7,]),'func_declaration':([0,2,84,117,123,156,],[8,8,8,138,8,138,]),'struct_declaration':([0,2,84,123,],[9,9,9,9,]),'while':([0,2,84,123,],[10,10,10,10,]),'goto_mark':([0,2,84,123,],[15,15,15,15,]),'if-else':([0,2,84,123,],[16,16,16,16,]),'id':([0,2,14,18,19,20,27,29,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,78,81,82,84,107,112,113,123,126,129,131,],[17,17,64,17,17,17,75,17,79,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,116,17,17,17,17,132,17,17,17,17,17,]),'int':([0,2,18,19,20,29,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'double':([0,2,18,19,20,29,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'bool':([0,2,18,19,20,29,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'str':([0,2,18,19,20,29,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'void':([0,2,18,19,20,29,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'datatype':([0,2,18,19,20,29,30,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,68,81,82,84,107,113,123,126,129,131,150,],[27,27,70,70,70,70,78,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,27,70,70,27,70,70,70,163,]),'conditional':([32,34,122,],[80,85,143,]),'body_block':([33,80,85,145,164,],[83,118,124,159,170,]),'args':([68,107,126,],[109,128,146,]),'struct_params':([117,],[135,]),'struct_param':([117,156,],[136,167,]),'params':([134,],[152,]),'param':([134,165,],[153,171,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> <empty>','program',0,'p_program','doh_parser.py',34),
  ('program -> scope','program',1,'p_program','doh_parser.py',35),
  ('body_block -> LBRACE scope RBRACE','body_block',3,'p_body_block','doh_parser.py',44),
  ('func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block','func_declaration',7,'p_func_declaration','doh_parser.py',53),
  ('scope -> scope statement','scope',2,'p_scope','doh_parser.py',58),
  ('scope -> statement','scope',1,'p_scope','doh_parser.py',59),
  ('statement -> expr SEMI','statement',2,'p_stmt','doh_parser.py',68),
  ('statement -> var_declaration','statement',1,'p_stmt','doh_parser.py',69),
  ('statement -> return','statement',1,'p_stmt','doh_parser.py',70),
  ('statement -> assign','statement',1,'p_stmt','doh_parser.py',71),
  ('statement -> func_declaration','statement',1,'p_stmt','doh_parser.py',72),
  ('statement -> struct_declaration','statement',1,'p_stmt','doh_parser.py',73),
  ('statement -> while','statement',1,'p_stmt','doh_parser.py',74),
  ('statement -> BREAK SEMI','statement',2,'p_stmt','doh_parser.py',75),
  ('statement -> CONTINUE SEMI','statement',2,'p_stmt','doh_parser.py',76),
  ('statement -> GOTO ID SEMI','statement',3,'p_stmt','doh_parser.py',77),
  ('statement -> goto_mark','statement',1,'p_stmt','doh_parser.py',78),
  ('statement -> if-else','statement',1,'p_stmt','doh_parser.py',79),
  ('while -> WHILE conditional body_block','while',3,'p_loops','doh_parser.py',93),
  ('while -> DO body_block WHILE conditional SEMI','while',5,'p_loops','doh_parser.py',94),
  ('if-else -> IF conditional body_block','if-else',3,'p_if_else','doh_parser.py',104),
  ('if-else -> IF conditional body_block ELSE body_block','if-else',5,'p_if_else','doh_parser.py',105),
  ('conditional -> LPAREN expr RPAREN','conditional',3,'p_conditional','doh_parser.py',114),
  ('conditional -> error expr RPAREN','conditional',3,'p_conditional_errors','doh_parser.py',120),
  ('conditional -> LPAREN error RPAREN','conditional',3,'p_conditional_errors','doh_parser.py',121),
  ('conditional -> LPAREN expr error','conditional',3,'p_conditional_errors','doh_parser.py',122),
  ('struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE','struct_declaration',5,'p_struct_declaration','doh_parser.py',129),
  ('struct_params -> struct_param','struct_params',1,'p_struct_params','doh_parser.py',136),
  ('struct_params -> struct_params COMMA struct_param','struct_params',3,'p_struct_params','doh_parser.py',137),
  ('struct_param -> DATATYPE ID','struct_param',2,'p_struct_param','doh_parser.py',147),
  ('struct_param -> func_declaration','struct_param',1,'p_struct_param','doh_parser.py',148),
  ('params -> <empty>','params',0,'p_params','doh_parser.py',157),
  ('params -> param','params',1,'p_params','doh_parser.py',158),
  ('params -> params COMMA param','params',3,'p_params','doh_parser.py',159),
  ('param -> DATATYPE ID','param',2,'p_param_declaration','doh_parser.py',169),
  ('expr -> id LPAREN args RPAREN','expr',4,'p_func_call','doh_parser.py',174),
  ('args -> <empty>','args',0,'p_arguments','doh_parser.py',179),
  ('args -> expr','args',1,'p_arguments','doh_parser.py',180),
  ('args -> args COMMA expr','args',3,'p_arguments','doh_parser.py',181),
  ('var_declaration -> datatype id EQUALS expr SEMI','var_declaration',5,'p_var_declaration','doh_parser.py',193),
  ('var_declaration -> datatype id SEMI','var_declaration',3,'p_var_declaration','doh_parser.py',194),
  ('var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI','var_declaration',7,'p_var_declaration','doh_parser.py',195),
  ('assign -> ID EQUALS expr SEMI','assign',4,'p_assign','doh_parser.py',207),
  ('assign -> ID EQUALS LBRACE args RBRACE SEMI','assign',6,'p_assign','doh_parser.py',208),
  ('assign -> ID DOT ID EQUALS expr SEMI','assign',6,'p_assign','doh_parser.py',209),
  ('return -> RETURN expr SEMI','return',3,'p_return','doh_parser.py',220),
  ('return -> RETURN SEMI','return',2,'p_return','doh_parser.py',221),
  ('expr -> expr PLUS expr','expr',3,'p_math_expressions','doh_parser.py',230),
  ('expr -> expr MINUS expr','expr',3,'p_math_expressions','doh_parser.py',231),
  ('expr -> expr MUL expr','expr',3,'p_math_expressions','doh_parser.py',232),
  ('expr -> expr DIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',233),
  ('expr -> expr INTDIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',234),
  ('expr -> expr MODULO expr','expr',3,'p_math_expressions','doh_parser.py',235),
  ('expr -> expr POW expr','expr',3,'p_math_expressions','doh_parser.py',236),
  ('expr -> expr LE expr','expr',3,'p_conditionals','doh_parser.py',257),
  ('expr -> expr GE expr','expr',3,'p_conditionals','doh_parser.py',258),
  ('expr -> expr LT expr','expr',3,'p_conditionals','doh_parser.py',259),
  ('expr -> expr GT expr','expr',3,'p_conditionals','doh_parser.py',260),
  ('expr -> expr EQ expr','expr',3,'p_conditionals','doh_parser.py',261),
  ('expr -> expr NE expr','expr',3,'p_conditionals','doh_parser.py',262),
  ('expr -> MINUS expr','expr',2,'p_logical_operation','doh_parser.py',278),
  ('expr -> expr LAND expr','expr',3,'p_logical_operation','doh_parser.py',279),
  ('expr -> expr LOR expr','expr',3,'p_logical_operation','doh_parser.py',280),
  ('expr -> LNOT expr','expr',2,'p_logical_operation','doh_parser.py',281),
  ('expr -> expr BAND expr','expr',3,'p_bitwise_operation','doh_parser.py',294),
  ('expr -> expr BOR expr','expr',3,'p_bitwise_operation','doh_parser.py',295),
  ('expr -> id','expr',1,'p_literals','doh_parser.py',304),
  ('expr -> int','expr',1,'p_literals','doh_parser.py',305),
  ('expr -> double','expr',1,'p_literals','doh_parser.py',306),
  ('expr -> bool','expr',1,'p_literals','doh_parser.py',307),
  ('expr -> str','expr',1,'p_literals','doh_parser.py',308),
  ('expr -> void','expr',1,'p_literals','doh_parser.py',309),
  ('expr -> NULL','expr',1,'p_literals','doh_parser.py',310),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_literals','doh_parser.py',311),
  ('int -> INTEGER','int',1,'p_const_int','doh_parser.py',319),
  ('double -> DOUBLE','double',1,'p_const_double','doh_parser.py',324),
  ('bool -> BOOL','bool',1,'p_const_bool','doh_parser.py',329),
  ('str -> STRING','str',1,'p_const_string','doh_parser.py',334),
  ('void -> VOID','void',1,'p_void','doh_parser.py',339),
  ('expr -> datatype LBRACKET RBRACKET id','expr',4,'p_array_init','doh_parser.py',345),
  ('expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET','expr',9,'p_array_init','doh_parser.py',346),
  ('expr -> ID LBRACKET expr RBRACKET','expr',4,'p_index','doh_parser.py',355),
  ('goto_mark -> ID COLON','goto_mark',2,'p_goto_mark','doh_parser.py',360),
  ('datatype -> DATATYPE','datatype',1,'p_datatype','doh_parser.py',365),
  ('id -> ID','id',1,'p_id','doh_parser.py',370),
]
