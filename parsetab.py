
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSnonassocLORnonassocLANDnonassocEQNEnonassocLEGELTGTleftPLUSMINUSleftMULDIVIDEINTDIVIDEMODULOrightPOWrightUMINUSLNOTleftLBRACERBRACELPARENRPARENLBRACKETRBRACKETARRAY BOOLEAN BREAK COLON COMMA COMMENT CONTINUE DATATYPE DIVIDE DO DOUBLE ELSE ELSEIF EQ EQUALS ERROR FUNCTION GE GOTO GT ID IF INTDIVIDE INTEGER LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MODULO MUL NE NULL PERIOD PLUS POW RBRACE RBRACKET RETURN RPAREN SEMI STRING STRUCTURE WHILEstmtList : stmtList stmt\n                | stmtstmt : expr SEMI\n            | RETURN expr SEMI\n            | assignfunc_params :\n                   | func_param\n                   | func_params COMMA func_paramfunc_param : DATATYPE IDassign : ID EQUALS expr SEMIexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr MUL expr\n            | expr DIVIDE expr\n            | expr INTDIVIDE expr\n            | expr MODULO expr\n            | expr POW exprexpr : expr LE expr\n            | expr GE expr\n            | expr LT expr\n            | expr GT expr\n            | expr EQ expr\n            | expr NE exprexpr : MINUS expr %prec UMINUS\n            | expr LAND expr\n            | expr LOR expr\n            | LNOT exprexpr : id\n            | INTEGER\n            | DOUBLE\n            | BOOLEAN\n            | STRING\n            | LPAREN expr RPARENdatatype : DATATYPEid : ID'
    
_lr_action_items = {'RETURN':([0,1,2,5,15,16,53,56,],[4,4,-2,-5,-1,-3,-4,-10,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,],[6,6,-2,18,6,-5,6,6,-28,-29,-30,-31,-32,6,-35,-1,-3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,18,-35,-24,-27,18,6,-11,-12,-13,-14,-15,-16,-17,18,18,18,18,18,18,18,18,-4,-33,18,-10,]),'LNOT':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[7,7,-2,7,-5,7,7,7,-1,-3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-4,-10,]),'INTEGER':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[9,9,-2,9,-5,9,9,9,-1,-3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-4,-10,]),'DOUBLE':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[10,10,-2,10,-5,10,10,10,-1,-3,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-4,-10,]),'BOOLEAN':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[11,11,-2,11,-5,11,11,11,-1,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-4,-10,]),'STRING':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[12,12,-2,12,-5,12,12,12,-1,-3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-4,-10,]),'LPAREN':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[13,13,-2,13,-5,13,13,13,-1,-3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-4,-10,]),'ID':([0,1,2,4,5,6,7,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,53,56,],[14,14,-2,33,-5,33,33,33,-1,-3,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-4,-10,]),'$end':([1,2,5,15,16,53,56,],[0,-2,-5,-1,-3,-4,-10,]),'SEMI':([3,8,9,10,11,12,14,32,33,34,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[16,-28,-29,-30,-31,-32,-35,53,-35,-24,-27,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-25,-26,-33,56,]),'PLUS':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[17,-28,-29,-30,-31,-32,-35,17,-35,-24,-27,17,-11,-12,-13,-14,-15,-16,-17,17,17,17,17,17,17,17,17,-33,17,]),'MUL':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[19,-28,-29,-30,-31,-32,-35,19,-35,-24,-27,19,19,19,-13,-14,-15,-16,-17,19,19,19,19,19,19,19,19,-33,19,]),'DIVIDE':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[20,-28,-29,-30,-31,-32,-35,20,-35,-24,-27,20,20,20,-13,-14,-15,-16,-17,20,20,20,20,20,20,20,20,-33,20,]),'INTDIVIDE':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[21,-28,-29,-30,-31,-32,-35,21,-35,-24,-27,21,21,21,-13,-14,-15,-16,-17,21,21,21,21,21,21,21,21,-33,21,]),'MODULO':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[22,-28,-29,-30,-31,-32,-35,22,-35,-24,-27,22,22,22,-13,-14,-15,-16,-17,22,22,22,22,22,22,22,22,-33,22,]),'POW':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[23,-28,-29,-30,-31,-32,-35,23,-35,-24,-27,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-33,23,]),'LE':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[24,-28,-29,-30,-31,-32,-35,24,-35,-24,-27,24,-11,-12,-13,-14,-15,-16,-17,None,None,None,None,24,24,24,24,-33,24,]),'GE':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[25,-28,-29,-30,-31,-32,-35,25,-35,-24,-27,25,-11,-12,-13,-14,-15,-16,-17,None,None,None,None,25,25,25,25,-33,25,]),'LT':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[26,-28,-29,-30,-31,-32,-35,26,-35,-24,-27,26,-11,-12,-13,-14,-15,-16,-17,None,None,None,None,26,26,26,26,-33,26,]),'GT':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[27,-28,-29,-30,-31,-32,-35,27,-35,-24,-27,27,-11,-12,-13,-14,-15,-16,-17,None,None,None,None,27,27,27,27,-33,27,]),'EQ':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[28,-28,-29,-30,-31,-32,-35,28,-35,-24,-27,28,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,None,None,28,28,-33,28,]),'NE':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[29,-28,-29,-30,-31,-32,-35,29,-35,-24,-27,29,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,None,None,29,29,-33,29,]),'LAND':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[30,-28,-29,-30,-31,-32,-35,30,-35,-24,-27,30,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,None,30,-33,30,]),'LOR':([3,8,9,10,11,12,14,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,],[31,-28,-29,-30,-31,-32,-35,31,-35,-24,-27,31,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-25,None,-33,31,]),'RPAREN':([8,9,10,11,12,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,],[-28,-29,-30,-31,-32,-35,-24,-27,54,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-25,-26,-33,]),'EQUALS':([14,],[37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmtList':([0,],[1,]),'stmt':([0,1,],[2,15,]),'expr':([0,1,4,6,7,13,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,],[3,3,32,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,]),'assign':([0,1,],[5,5,]),'id':([0,1,4,6,7,13,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,37,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmtList","S'",1,None,None,None),
  ('stmtList -> stmtList stmt','stmtList',2,'p_stmt_list','doh_parser.py',57),
  ('stmtList -> stmt','stmtList',1,'p_stmt_list','doh_parser.py',58),
  ('stmt -> expr SEMI','stmt',2,'p_stmt','doh_parser.py',66),
  ('stmt -> RETURN expr SEMI','stmt',3,'p_stmt','doh_parser.py',67),
  ('stmt -> assign','stmt',1,'p_stmt','doh_parser.py',68),
  ('func_params -> <empty>','func_params',0,'p_func_params','doh_parser.py',83),
  ('func_params -> func_param','func_params',1,'p_func_params','doh_parser.py',84),
  ('func_params -> func_params COMMA func_param','func_params',3,'p_func_params','doh_parser.py',85),
  ('func_param -> DATATYPE ID','func_param',2,'p_func_param_declaration','doh_parser.py',95),
  ('assign -> ID EQUALS expr SEMI','assign',4,'p_assign','doh_parser.py',100),
  ('expr -> expr PLUS expr','expr',3,'p_math_expressions','doh_parser.py',105),
  ('expr -> expr MINUS expr','expr',3,'p_math_expressions','doh_parser.py',106),
  ('expr -> expr MUL expr','expr',3,'p_math_expressions','doh_parser.py',107),
  ('expr -> expr DIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',108),
  ('expr -> expr INTDIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',109),
  ('expr -> expr MODULO expr','expr',3,'p_math_expressions','doh_parser.py',110),
  ('expr -> expr POW expr','expr',3,'p_math_expressions','doh_parser.py',111),
  ('expr -> expr LE expr','expr',3,'p_conditionals','doh_parser.py',132),
  ('expr -> expr GE expr','expr',3,'p_conditionals','doh_parser.py',133),
  ('expr -> expr LT expr','expr',3,'p_conditionals','doh_parser.py',134),
  ('expr -> expr GT expr','expr',3,'p_conditionals','doh_parser.py',135),
  ('expr -> expr EQ expr','expr',3,'p_conditionals','doh_parser.py',136),
  ('expr -> expr NE expr','expr',3,'p_conditionals','doh_parser.py',137),
  ('expr -> MINUS expr','expr',2,'p_logical_oper','doh_parser.py',153),
  ('expr -> expr LAND expr','expr',3,'p_logical_oper','doh_parser.py',154),
  ('expr -> expr LOR expr','expr',3,'p_logical_oper','doh_parser.py',155),
  ('expr -> LNOT expr','expr',2,'p_logical_oper','doh_parser.py',156),
  ('expr -> id','expr',1,'p_literals','doh_parser.py',168),
  ('expr -> INTEGER','expr',1,'p_literals','doh_parser.py',169),
  ('expr -> DOUBLE','expr',1,'p_literals','doh_parser.py',170),
  ('expr -> BOOLEAN','expr',1,'p_literals','doh_parser.py',171),
  ('expr -> STRING','expr',1,'p_literals','doh_parser.py',172),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_literals','doh_parser.py',173),
  ('datatype -> DATATYPE','datatype',1,'p_datatype','doh_parser.py',181),
  ('id -> ID','id',1,'p_id','doh_parser.py',186),
]
