
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSnonassocLORnonassocLANDnonassocBORnonassocBANDnonassocEQNEnonassocLEGELTGTleftPLUSMINUSleftMULDIVIDEINTDIVIDEMODULOrightPOWrightUMINUSLNOTleftLBRACERBRACELPARENRPARENLBRACKETRBRACKETBAND BOOL BOR BREAK COLON COMMA COMMENT CONTINUE DATATYPE DIVIDE DO DOT DOUBLE ELSE EQ EQUALS ERROR FUNCTION GE GOTO GT ID IF INTDIVIDE INTEGER LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MODULO MUL NE NEWLINE NULL PLUS POW RBRACE RBRACKET RETURN RPAREN SEMI STRING STRUCTURE VOID WHILEprogram :\n               | body_block\n    body_block : stmt_list\n               | LBRACE stmt_list RBRACE\n    func_declaration : FUNCTION datatype id LPAREN params RPAREN body_blockstmt_list : stmt_list statement\n                 | statement\n    statement : expr SEMI\n              | var_declaration\n              | return\n              | assign\n              | func_declaration\n              | struct_declaration\n              | while\n              | BREAK SEMI\n              | CONTINUE SEMI\n              | GOTO ID SEMI\n              | goto_mark\n              | if-else\n    \n    while : WHILE conditional body_block\n          | DO body_block WHILE conditional SEMI\n    \n    if-else : IF conditional body_block\n            | IF conditional body_block ELSE body_block\n    conditional : LPAREN expr RPAREN\n    conditional : error expr RPAREN\n                | LPAREN error RPAREN\n                | LPAREN expr error\n    \n    struct_declaration : STRUCTURE id LBRACE struct_params RBRACE\n    \n    struct_params : struct_param\n                  | struct_params COMMA struct_param\n    \n    struct_param : DATATYPE ID\n                 | func_declaration\n    params :\n              | param\n              | params COMMA paramparam : DATATYPE IDexpr : id LPAREN args RPARENargs :\n            | expr\n            | args COMMA expr\n    var_declaration : datatype id EQUALS expr SEMI\n                    | datatype id SEMI\n                    | ID id EQUALS LBRACE args RBRACE SEMI\n    assign : ID EQUALS expr SEMI\n              | ID EQUALS LBRACE args RBRACE SEMI\n              | ID DOT ID EQUALS expr SEMI\n    return : RETURN expr SEMI\n           | RETURN SEMI\n    expr : expr PLUS expr\n            | expr MINUS expr\n            | expr MUL expr\n            | expr DIVIDE expr\n            | expr INTDIVIDE expr\n            | expr MODULO expr\n            | expr POW exprexpr : expr LE expr\n            | expr GE expr\n            | expr LT expr\n            | expr GT expr\n            | expr EQ expr\n            | expr NE exprexpr : MINUS expr %prec UMINUS\n            | expr LAND expr\n            | expr LOR expr\n            | LNOT expr\n    expr : expr BAND expr\n         | expr BOR expr\n    expr : id\n            | int\n            | double\n            | bool\n            | str\n            | void\n            | NULL\n            | LPAREN expr RPARENint : INTEGERdouble : DOUBLEbool : BOOLstr : STRINGvoid : VOID\n    expr : datatype LBRACKET RBRACKET id\n         | datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET\n    expr : ID LBRACKET expr RBRACKETgoto_mark : ID COLONdatatype : DATATYPEid : ID'
    
_lr_action_items = {'$end':([0,1,2,3,5,7,8,9,10,11,12,17,18,42,44,62,63,70,80,88,106,117,118,121,126,129,152,156,159,160,162,163,169,171,],[-1,0,-2,-3,-7,-9,-10,-11,-12,-13,-14,-18,-19,-6,-8,-15,-16,-84,-48,-4,-17,-42,-47,-20,-22,-44,-41,-28,-21,-23,-45,-46,-43,-5,]),'LBRACE':([0,35,65,68,82,83,87,108,141,142,143,144,146,165,],[4,4,-86,110,120,4,4,128,-24,-27,-26,-25,4,4,]),'BREAK':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[13,13,13,-7,-9,-10,-11,-12,-13,-14,-18,-19,13,-6,13,-8,-15,-16,-84,-48,13,13,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,13,-41,-28,-21,-23,-45,-46,13,-43,-5,]),'CONTINUE':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[14,14,14,-7,-9,-10,-11,-12,-13,-14,-18,-19,14,-6,14,-8,-15,-16,-84,-48,14,14,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,14,-41,-28,-21,-23,-45,-46,14,-43,-5,]),'GOTO':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[15,15,15,-7,-9,-10,-11,-12,-13,-14,-18,-19,15,-6,15,-8,-15,-16,-84,-48,15,15,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,15,-41,-28,-21,-23,-45,-46,15,-43,-5,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,70,71,72,74,75,76,79,80,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,113,114,116,117,118,121,122,124,126,127,128,129,131,132,133,134,135,141,142,143,144,146,149,150,152,156,159,160,162,163,165,169,171,174,],[21,21,21,-7,46,-9,-10,-11,-12,-13,-14,-86,-18,-19,-68,21,21,21,-69,-70,-71,-72,-73,-74,-76,21,21,-77,-78,-79,-80,-6,21,-8,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-15,-16,-86,21,21,-84,21,46,-86,-62,-65,46,-48,21,21,21,21,-4,-49,-50,-51,-52,-53,-54,-55,46,46,46,46,46,46,46,46,46,46,-17,46,46,21,46,-75,21,-42,-47,-20,46,46,-22,-83,21,-44,21,-37,21,-81,46,-24,-27,-26,-25,21,46,46,-41,-28,-21,-23,-45,-46,21,-43,-5,-82,]),'LNOT':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[22,22,22,-7,-9,-10,-11,-12,-13,-14,-18,-19,22,22,22,22,22,-6,22,-8,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-15,-16,22,22,-84,22,-48,22,22,22,22,-4,-17,22,22,-42,-47,-20,-22,22,-44,22,22,-24,-27,-26,-25,22,-41,-28,-21,-23,-45,-46,22,-43,-5,]),'NULL':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[28,28,28,-7,-9,-10,-11,-12,-13,-14,-18,-19,28,28,28,28,28,-6,28,-8,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-15,-16,28,28,-84,28,-48,28,28,28,28,-4,-17,28,28,-42,-47,-20,-22,28,-44,28,28,-24,-27,-26,-25,28,-41,-28,-21,-23,-45,-46,28,-43,-5,]),'LPAREN':([0,3,4,5,7,8,9,10,11,12,16,17,18,19,20,21,22,31,34,35,36,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,70,71,74,80,83,84,85,87,88,106,110,116,117,118,119,121,125,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[20,20,20,-7,-9,-10,-11,-12,-13,-14,-86,-18,-19,71,20,20,20,20,84,20,84,-6,20,-8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-15,-16,-86,20,20,-84,20,-86,-48,20,20,20,20,-4,-17,20,20,-42,-47,136,-20,84,-22,20,-44,20,20,-24,-27,-26,-25,20,-41,-28,-21,-23,-45,-46,20,-43,-5,]),'ID':([0,3,4,5,7,8,9,10,11,12,15,16,17,18,20,21,22,29,31,33,35,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,69,70,71,80,81,83,84,85,87,88,106,110,115,116,117,118,121,126,128,129,131,133,139,141,142,143,144,146,152,155,156,159,160,162,163,165,169,171,],[16,16,16,-7,-9,-10,-11,-12,-13,-14,64,65,-18,-19,74,74,74,65,74,65,16,-85,-6,16,-8,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-15,-16,74,74,111,-84,74,-48,65,16,74,74,16,-4,-17,74,65,74,-42,-47,-20,-22,74,-44,74,74,158,-24,-27,-26,-25,16,-41,167,-28,-21,-23,-45,-46,16,-43,-5,]),'RETURN':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[31,31,31,-7,-9,-10,-11,-12,-13,-14,-18,-19,31,-6,31,-8,-15,-16,-84,-48,31,31,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,31,-41,-28,-21,-23,-45,-46,31,-43,-5,]),'FUNCTION':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,120,121,126,129,141,142,143,144,146,152,156,157,159,160,162,163,165,169,171,],[32,32,32,-7,-9,-10,-11,-12,-13,-14,-18,-19,32,-6,32,-8,-15,-16,-84,-48,32,32,-4,-17,-42,-47,32,-20,-22,-44,-24,-27,-26,-25,32,-41,-28,32,-21,-23,-45,-46,32,-43,-5,]),'STRUCTURE':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[33,33,33,-7,-9,-10,-11,-12,-13,-14,-18,-19,33,-6,33,-8,-15,-16,-84,-48,33,33,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,33,-41,-28,-21,-23,-45,-46,33,-43,-5,]),'WHILE':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,86,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[34,34,34,-7,-9,-10,-11,-12,-13,-14,-18,-19,34,-6,34,-8,-15,-16,-84,-48,34,125,34,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,34,-41,-28,-21,-23,-45,-46,34,-43,-5,]),'DO':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[35,35,35,-7,-9,-10,-11,-12,-13,-14,-18,-19,35,-6,35,-8,-15,-16,-84,-48,35,35,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,35,-41,-28,-21,-23,-45,-46,35,-43,-5,]),'IF':([0,3,4,5,7,8,9,10,11,12,17,18,35,42,43,44,62,63,70,80,83,87,88,106,117,118,121,126,129,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[36,36,36,-7,-9,-10,-11,-12,-13,-14,-18,-19,36,-6,36,-8,-15,-16,-84,-48,36,36,-4,-17,-42,-47,-20,-22,-44,-24,-27,-26,-25,36,-41,-28,-21,-23,-45,-46,36,-43,-5,]),'INTEGER':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,170,171,],[30,30,30,-7,-9,-10,-11,-12,-13,-14,-18,-19,30,30,30,30,30,-6,30,-8,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-15,-16,30,30,-84,30,-48,30,30,30,30,-4,-17,30,30,-42,-47,-20,-22,30,-44,30,30,-24,-27,-26,-25,30,-41,-28,-21,-23,-45,-46,30,-43,173,-5,]),'DOUBLE':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[37,37,37,-7,-9,-10,-11,-12,-13,-14,-18,-19,37,37,37,37,37,-6,37,-8,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-15,-16,37,37,-84,37,-48,37,37,37,37,-4,-17,37,37,-42,-47,-20,-22,37,-44,37,37,-24,-27,-26,-25,37,-41,-28,-21,-23,-45,-46,37,-43,-5,]),'BOOL':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[38,38,38,-7,-9,-10,-11,-12,-13,-14,-18,-19,38,38,38,38,38,-6,38,-8,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-15,-16,38,38,-84,38,-48,38,38,38,38,-4,-17,38,38,-42,-47,-20,-22,38,-44,38,38,-24,-27,-26,-25,38,-41,-28,-21,-23,-45,-46,38,-43,-5,]),'STRING':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[39,39,39,-7,-9,-10,-11,-12,-13,-14,-18,-19,39,39,39,39,39,-6,39,-8,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-15,-16,39,39,-84,39,-48,39,39,39,39,-4,-17,39,39,-42,-47,-20,-22,39,-44,39,39,-24,-27,-26,-25,39,-41,-28,-21,-23,-45,-46,39,-43,-5,]),'VOID':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,121,126,128,129,131,133,141,142,143,144,146,152,156,159,160,162,163,165,169,171,],[40,40,40,-7,-9,-10,-11,-12,-13,-14,-18,-19,40,40,40,40,40,-6,40,-8,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-15,-16,40,40,-84,40,-48,40,40,40,40,-4,-17,40,40,-42,-47,-20,-22,40,-44,40,40,-24,-27,-26,-25,40,-41,-28,-21,-23,-45,-46,40,-43,-5,]),'DATATYPE':([0,3,4,5,7,8,9,10,11,12,17,18,20,21,22,31,32,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,68,70,71,80,83,84,85,87,88,106,110,116,117,118,120,121,126,128,129,131,133,136,141,142,143,144,146,151,152,156,157,159,160,162,163,165,166,169,171,],[41,41,41,-7,-9,-10,-11,-12,-13,-14,-18,-19,41,41,41,41,41,41,-6,41,-8,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-15,-16,41,41,-84,41,-48,41,41,41,41,-4,-17,41,41,-42,-47,139,-20,-22,41,-44,41,41,155,-24,-27,-26,-25,41,41,-41,-28,139,-21,-23,-45,-46,41,155,-43,-5,]),'RBRACE':([3,5,7,8,9,10,11,12,17,18,19,23,24,25,26,27,28,30,37,38,39,40,42,43,44,62,63,65,70,74,75,76,80,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,110,113,114,117,118,121,126,127,128,129,130,132,134,137,138,140,147,150,152,156,158,159,160,162,163,168,169,171,174,],[-3,-7,-9,-10,-11,-12,-13,-14,-18,-19,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-6,88,-8,-15,-16,-86,-84,-86,-62,-65,-48,-4,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-17,-38,-39,-75,-42,-47,-20,-22,-83,-38,-44,148,-37,-81,156,-29,-32,161,-40,-41,-28,-31,-21,-23,-45,-46,-30,-43,-5,-82,]),'ELSE':([3,5,7,8,9,10,11,12,17,18,42,44,62,63,70,80,88,106,117,118,121,126,129,152,156,159,160,162,163,169,171,],[-3,-7,-9,-10,-11,-12,-13,-14,-18,-19,-6,-8,-15,-16,-84,-48,-4,-17,-42,-47,-20,146,-44,-41,-28,-21,-23,-45,-46,-43,-5,]),'COMMA':([3,5,7,8,9,10,11,12,17,18,19,23,24,25,26,27,28,30,37,38,39,40,42,44,62,63,65,70,71,74,75,76,80,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,110,112,113,114,117,118,121,126,127,128,129,130,132,134,136,137,138,140,147,150,152,153,154,156,158,159,160,162,163,167,168,169,171,172,174,],[-3,-7,-9,-10,-11,-12,-13,-14,-18,-19,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-6,-8,-15,-16,-86,-84,-38,-86,-62,-65,-48,-4,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-17,-38,133,-39,-75,-42,-47,-20,-22,-83,-38,-44,133,-37,-81,-33,157,-29,-32,133,-40,-41,166,-34,-28,-31,-21,-23,-45,-46,-36,-30,-43,-5,-35,-82,]),'SEMI':([6,13,14,16,19,23,24,25,26,27,28,30,31,37,38,39,40,64,65,74,75,76,78,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,114,127,132,134,135,141,142,143,144,145,148,149,161,174,],[44,62,63,-86,-68,-69,-70,-71,-72,-73,-74,-76,80,-77,-78,-79,-80,106,-86,-86,-62,-65,117,118,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,129,-75,-83,-37,-81,152,-24,-27,-26,-25,159,162,163,169,-82,]),'PLUS':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[45,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,45,-86,-62,-65,45,-49,-50,-51,-52,-53,-54,-55,45,45,45,45,45,45,45,45,45,45,45,45,45,-75,45,45,-83,-37,-81,45,45,45,-82,]),'MUL':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[47,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,47,-86,-62,-65,47,47,47,-51,-52,-53,-54,-55,47,47,47,47,47,47,47,47,47,47,47,47,47,-75,47,47,-83,-37,-81,47,47,47,-82,]),'DIVIDE':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[48,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,48,-86,-62,-65,48,48,48,-51,-52,-53,-54,-55,48,48,48,48,48,48,48,48,48,48,48,48,48,-75,48,48,-83,-37,-81,48,48,48,-82,]),'INTDIVIDE':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[49,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,49,-86,-62,-65,49,49,49,-51,-52,-53,-54,-55,49,49,49,49,49,49,49,49,49,49,49,49,49,-75,49,49,-83,-37,-81,49,49,49,-82,]),'MODULO':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[50,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,50,-86,-62,-65,50,50,50,-51,-52,-53,-54,-55,50,50,50,50,50,50,50,50,50,50,50,50,50,-75,50,50,-83,-37,-81,50,50,50,-82,]),'POW':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[51,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,51,-86,-62,-65,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-75,51,51,-83,-37,-81,51,51,51,-82,]),'LE':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[52,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,52,-86,-62,-65,52,-49,-50,-51,-52,-53,-54,-55,None,None,None,None,52,52,52,52,52,52,52,52,52,-75,52,52,-83,-37,-81,52,52,52,-82,]),'GE':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[53,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,53,-86,-62,-65,53,-49,-50,-51,-52,-53,-54,-55,None,None,None,None,53,53,53,53,53,53,53,53,53,-75,53,53,-83,-37,-81,53,53,53,-82,]),'LT':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[54,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,54,-86,-62,-65,54,-49,-50,-51,-52,-53,-54,-55,None,None,None,None,54,54,54,54,54,54,54,54,54,-75,54,54,-83,-37,-81,54,54,54,-82,]),'GT':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[55,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,55,-86,-62,-65,55,-49,-50,-51,-52,-53,-54,-55,None,None,None,None,55,55,55,55,55,55,55,55,55,-75,55,55,-83,-37,-81,55,55,55,-82,]),'EQ':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[56,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,56,-86,-62,-65,56,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,None,None,56,56,56,56,56,56,56,-75,56,56,-83,-37,-81,56,56,56,-82,]),'NE':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[57,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,57,-86,-62,-65,57,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,None,None,57,57,57,57,57,57,57,-75,57,57,-83,-37,-81,57,57,57,-82,]),'LAND':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[58,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,58,-86,-62,-65,58,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,None,58,-66,-67,58,58,58,-75,58,58,-83,-37,-81,58,58,58,-82,]),'LOR':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[59,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,59,-86,-62,-65,59,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,None,-66,-67,59,59,59,-75,59,59,-83,-37,-81,59,59,59,-82,]),'BAND':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[60,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,60,-86,-62,-65,60,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,60,60,None,60,60,60,60,-75,60,60,-83,-37,-81,60,60,60,-82,]),'BOR':([6,16,19,23,24,25,26,27,28,30,37,38,39,40,65,72,74,75,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,122,124,127,132,134,135,149,150,174,],[61,-86,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,61,-86,-62,-65,61,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,61,61,-66,None,61,61,61,-75,61,61,-83,-37,-81,61,61,61,-82,]),'LBRACKET':([16,29,41,73,74,164,],[66,77,-85,77,66,170,]),'EQUALS':([16,65,67,78,111,134,],[68,-86,108,116,131,151,]),'DOT':([16,],[69,]),'COLON':([16,],[70,]),'RPAREN':([19,23,24,25,26,27,28,30,37,38,39,40,65,71,72,74,75,76,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,112,113,114,122,123,124,127,132,134,136,150,153,154,167,172,174,],[-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,-38,114,-86,-62,-65,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,132,-39,-75,141,143,144,-83,-37,-81,-33,-40,165,-34,-36,-35,-82,]),'RBRACKET':([19,23,24,25,26,27,28,30,37,38,39,40,65,74,75,76,77,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,114,127,132,134,173,174,],[-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-86,-86,-62,-65,115,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,127,-75,-83,-37,-81,174,-82,]),'error':([19,23,24,25,26,27,28,30,34,36,37,38,39,40,65,74,75,76,84,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,122,125,127,132,134,174,],[-68,-69,-70,-71,-72,-73,-74,-76,85,85,-77,-78,-79,-80,-86,-86,-62,-65,123,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-75,142,85,-83,-37,-81,-82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body_block':([0,35,83,87,146,165,],[2,86,121,126,160,171,]),'stmt_list':([0,4,35,83,87,146,165,],[3,43,3,3,3,3,3,]),'statement':([0,3,4,35,43,83,87,146,165,],[5,42,5,5,42,5,5,5,5,]),'expr':([0,3,4,20,21,22,31,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,165,],[6,6,6,72,75,76,79,6,6,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,6,122,124,6,113,135,113,149,150,6,6,]),'var_declaration':([0,3,4,35,43,83,87,146,165,],[7,7,7,7,7,7,7,7,7,]),'return':([0,3,4,35,43,83,87,146,165,],[8,8,8,8,8,8,8,8,8,]),'assign':([0,3,4,35,43,83,87,146,165,],[9,9,9,9,9,9,9,9,9,]),'func_declaration':([0,3,4,35,43,83,87,120,146,157,165,],[10,10,10,10,10,10,10,140,10,140,10,]),'struct_declaration':([0,3,4,35,43,83,87,146,165,],[11,11,11,11,11,11,11,11,11,]),'while':([0,3,4,35,43,83,87,146,165,],[12,12,12,12,12,12,12,12,12,]),'goto_mark':([0,3,4,35,43,83,87,146,165,],[17,17,17,17,17,17,17,17,17,]),'if-else':([0,3,4,35,43,83,87,146,165,],[18,18,18,18,18,18,18,18,18,]),'id':([0,3,4,16,20,21,22,29,31,33,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,81,83,84,85,87,110,115,116,128,131,133,146,165,],[19,19,19,67,19,19,19,78,19,82,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,119,19,19,19,19,19,134,19,19,19,19,19,19,]),'int':([0,3,4,20,21,22,31,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,165,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'double':([0,3,4,20,21,22,31,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,165,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'bool':([0,3,4,20,21,22,31,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,165,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'str':([0,3,4,20,21,22,31,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,165,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'void':([0,3,4,20,21,22,31,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,165,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'datatype':([0,3,4,20,21,22,31,32,35,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,71,83,84,85,87,110,116,128,131,133,146,151,165,],[29,29,29,73,73,73,73,81,29,29,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,29,73,73,29,73,73,73,73,73,29,164,29,]),'conditional':([34,36,125,],[83,87,145,]),'args':([71,110,128,],[112,130,147,]),'struct_params':([120,],[137,]),'struct_param':([120,157,],[138,168,]),'params':([136,],[153,]),'param':([136,166,],[154,172,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> <empty>','program',0,'p_program','doh_parser.py',34),
  ('program -> body_block','program',1,'p_program','doh_parser.py',35),
  ('body_block -> stmt_list','body_block',1,'p_body_block','doh_parser.py',44),
  ('body_block -> LBRACE stmt_list RBRACE','body_block',3,'p_body_block','doh_parser.py',45),
  ('func_declaration -> FUNCTION datatype id LPAREN params RPAREN body_block','func_declaration',7,'p_func_declaration','doh_parser.py',54),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','doh_parser.py',59),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','doh_parser.py',60),
  ('statement -> expr SEMI','statement',2,'p_stmt','doh_parser.py',69),
  ('statement -> var_declaration','statement',1,'p_stmt','doh_parser.py',70),
  ('statement -> return','statement',1,'p_stmt','doh_parser.py',71),
  ('statement -> assign','statement',1,'p_stmt','doh_parser.py',72),
  ('statement -> func_declaration','statement',1,'p_stmt','doh_parser.py',73),
  ('statement -> struct_declaration','statement',1,'p_stmt','doh_parser.py',74),
  ('statement -> while','statement',1,'p_stmt','doh_parser.py',75),
  ('statement -> BREAK SEMI','statement',2,'p_stmt','doh_parser.py',76),
  ('statement -> CONTINUE SEMI','statement',2,'p_stmt','doh_parser.py',77),
  ('statement -> GOTO ID SEMI','statement',3,'p_stmt','doh_parser.py',78),
  ('statement -> goto_mark','statement',1,'p_stmt','doh_parser.py',79),
  ('statement -> if-else','statement',1,'p_stmt','doh_parser.py',80),
  ('while -> WHILE conditional body_block','while',3,'p_loops','doh_parser.py',94),
  ('while -> DO body_block WHILE conditional SEMI','while',5,'p_loops','doh_parser.py',95),
  ('if-else -> IF conditional body_block','if-else',3,'p_if_else','doh_parser.py',105),
  ('if-else -> IF conditional body_block ELSE body_block','if-else',5,'p_if_else','doh_parser.py',106),
  ('conditional -> LPAREN expr RPAREN','conditional',3,'p_conditional','doh_parser.py',115),
  ('conditional -> error expr RPAREN','conditional',3,'p_conditional_errors','doh_parser.py',121),
  ('conditional -> LPAREN error RPAREN','conditional',3,'p_conditional_errors','doh_parser.py',122),
  ('conditional -> LPAREN expr error','conditional',3,'p_conditional_errors','doh_parser.py',123),
  ('struct_declaration -> STRUCTURE id LBRACE struct_params RBRACE','struct_declaration',5,'p_struct_declaration','doh_parser.py',130),
  ('struct_params -> struct_param','struct_params',1,'p_struct_params','doh_parser.py',137),
  ('struct_params -> struct_params COMMA struct_param','struct_params',3,'p_struct_params','doh_parser.py',138),
  ('struct_param -> DATATYPE ID','struct_param',2,'p_struct_param','doh_parser.py',148),
  ('struct_param -> func_declaration','struct_param',1,'p_struct_param','doh_parser.py',149),
  ('params -> <empty>','params',0,'p_params','doh_parser.py',158),
  ('params -> param','params',1,'p_params','doh_parser.py',159),
  ('params -> params COMMA param','params',3,'p_params','doh_parser.py',160),
  ('param -> DATATYPE ID','param',2,'p_param_declaration','doh_parser.py',170),
  ('expr -> id LPAREN args RPAREN','expr',4,'p_func_call','doh_parser.py',175),
  ('args -> <empty>','args',0,'p_arguments','doh_parser.py',180),
  ('args -> expr','args',1,'p_arguments','doh_parser.py',181),
  ('args -> args COMMA expr','args',3,'p_arguments','doh_parser.py',182),
  ('var_declaration -> datatype id EQUALS expr SEMI','var_declaration',5,'p_var_declaration','doh_parser.py',194),
  ('var_declaration -> datatype id SEMI','var_declaration',3,'p_var_declaration','doh_parser.py',195),
  ('var_declaration -> ID id EQUALS LBRACE args RBRACE SEMI','var_declaration',7,'p_var_declaration','doh_parser.py',196),
  ('assign -> ID EQUALS expr SEMI','assign',4,'p_assign','doh_parser.py',208),
  ('assign -> ID EQUALS LBRACE args RBRACE SEMI','assign',6,'p_assign','doh_parser.py',209),
  ('assign -> ID DOT ID EQUALS expr SEMI','assign',6,'p_assign','doh_parser.py',210),
  ('return -> RETURN expr SEMI','return',3,'p_return','doh_parser.py',221),
  ('return -> RETURN SEMI','return',2,'p_return','doh_parser.py',222),
  ('expr -> expr PLUS expr','expr',3,'p_math_expressions','doh_parser.py',231),
  ('expr -> expr MINUS expr','expr',3,'p_math_expressions','doh_parser.py',232),
  ('expr -> expr MUL expr','expr',3,'p_math_expressions','doh_parser.py',233),
  ('expr -> expr DIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',234),
  ('expr -> expr INTDIVIDE expr','expr',3,'p_math_expressions','doh_parser.py',235),
  ('expr -> expr MODULO expr','expr',3,'p_math_expressions','doh_parser.py',236),
  ('expr -> expr POW expr','expr',3,'p_math_expressions','doh_parser.py',237),
  ('expr -> expr LE expr','expr',3,'p_conditionals','doh_parser.py',258),
  ('expr -> expr GE expr','expr',3,'p_conditionals','doh_parser.py',259),
  ('expr -> expr LT expr','expr',3,'p_conditionals','doh_parser.py',260),
  ('expr -> expr GT expr','expr',3,'p_conditionals','doh_parser.py',261),
  ('expr -> expr EQ expr','expr',3,'p_conditionals','doh_parser.py',262),
  ('expr -> expr NE expr','expr',3,'p_conditionals','doh_parser.py',263),
  ('expr -> MINUS expr','expr',2,'p_logical_operation','doh_parser.py',279),
  ('expr -> expr LAND expr','expr',3,'p_logical_operation','doh_parser.py',280),
  ('expr -> expr LOR expr','expr',3,'p_logical_operation','doh_parser.py',281),
  ('expr -> LNOT expr','expr',2,'p_logical_operation','doh_parser.py',282),
  ('expr -> expr BAND expr','expr',3,'p_bitwise_operation','doh_parser.py',295),
  ('expr -> expr BOR expr','expr',3,'p_bitwise_operation','doh_parser.py',296),
  ('expr -> id','expr',1,'p_literals','doh_parser.py',305),
  ('expr -> int','expr',1,'p_literals','doh_parser.py',306),
  ('expr -> double','expr',1,'p_literals','doh_parser.py',307),
  ('expr -> bool','expr',1,'p_literals','doh_parser.py',308),
  ('expr -> str','expr',1,'p_literals','doh_parser.py',309),
  ('expr -> void','expr',1,'p_literals','doh_parser.py',310),
  ('expr -> NULL','expr',1,'p_literals','doh_parser.py',311),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_literals','doh_parser.py',312),
  ('int -> INTEGER','int',1,'p_const_int','doh_parser.py',320),
  ('double -> DOUBLE','double',1,'p_const_double','doh_parser.py',325),
  ('bool -> BOOL','bool',1,'p_const_bool','doh_parser.py',330),
  ('str -> STRING','str',1,'p_const_string','doh_parser.py',335),
  ('void -> VOID','void',1,'p_void','doh_parser.py',340),
  ('expr -> datatype LBRACKET RBRACKET id','expr',4,'p_array_init','doh_parser.py',346),
  ('expr -> datatype LBRACKET RBRACKET id EQUALS datatype LBRACKET INTEGER RBRACKET','expr',9,'p_array_init','doh_parser.py',347),
  ('expr -> ID LBRACKET expr RBRACKET','expr',4,'p_index','doh_parser.py',356),
  ('goto_mark -> ID COLON','goto_mark',2,'p_goto_mark','doh_parser.py',361),
  ('datatype -> DATATYPE','datatype',1,'p_datatype','doh_parser.py',366),
  ('id -> ID','id',1,'p_id','doh_parser.py',371),
]
